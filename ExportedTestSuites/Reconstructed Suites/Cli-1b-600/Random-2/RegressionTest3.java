package org.apache.commons.cli;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options43 = null;
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        org.apache.commons.cli.Options options50 = options45.addOption(option47);
        org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray53 = commandLine51.getOptionValues("hi!");
        java.lang.String str56 = commandLine51.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str58 = commandLine51.getOptionValue("arg");
        java.lang.String[] strArray59 = commandLine51.getArgs();
        java.lang.String[] strArray61 = posixParser44.flatten(options50, strArray59, false);
        posixParser44.burstToken("hi!", true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("");
        org.apache.commons.cli.Options options70 = options65.addOption(option67);
        java.util.Collection collection71 = options65.getOptionGroups();
        org.apache.commons.cli.Options options75 = options65.addOption("", false, "arg");
        java.util.List list76 = options75.getRequiredOptions();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options79 = options75.addOption(option78);
        boolean boolean81 = options75.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection82 = options75.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine83 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray85 = commandLine83.getOptionValues("hi!");
        java.lang.String str88 = commandLine83.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str90 = commandLine83.getOptionValue("arg");
        java.lang.String[] strArray91 = commandLine83.getArgs();
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser44.parse(options75, strArray91, properties92, true);
        java.util.Properties properties95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options43, strArray91, properties95, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNull(strArray53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str56, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNotNull(collection71);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(collection82);
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str88, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine94);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.util.Iterator iterator8 = commandLine0.iterator();
        java.lang.String str10 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        java.lang.String str13 = commandLine0.getOptionValue(' ', "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.Object obj15 = commandLine0.getOptionObject("[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj17 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option[] optionArray18 = commandLine0.getOptions();
        java.lang.String str21 = commandLine0.getOptionValue("org.apache.commons.cli.ParseException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", "org.apache.commons.cli.UnrecognizedOptionException: 4");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(optionArray18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: 4" + "'", str21, "org.apache.commons.cli.UnrecognizedOptionException: 4");
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.List list53 = options22.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(list53);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup58 = options55.getOptionGroup(option57);
        org.apache.commons.cli.Option option60 = options55.getOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.List list61 = options55.helpOptions();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues("hi!");
        java.lang.String str67 = commandLine62.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str69 = commandLine62.getOptionValue("arg");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser0.parse(options55, strArray70, properties71, true);
        org.apache.commons.cli.Option option74 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine73.addOption(option74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNull(optionGroup58);
        org.junit.Assert.assertNull(option60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str67, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        java.lang.String str6 = option1.getLongOpt();
        boolean boolean7 = option1.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray24 = commandLine22.getOptionValues("hi!");
        java.lang.String[] strArray25 = commandLine22.getArgs();
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser15.parse(options16, strArray25, properties26);
        org.apache.commons.cli.CommandLine commandLine29 = posixParser8.parse(options14, strArray25, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup33 = options30.getOptionGroup(option32);
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        char char36 = option35.getValueSeparator();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        option35.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup42 = options30.getOptionGroup(option35);
        boolean boolean44 = options30.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("");
        org.apache.commons.cli.Options options51 = options46.addOption(option48);
        org.apache.commons.cli.CommandLine commandLine52 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine52.getOptionValues("hi!");
        java.lang.String[] strArray55 = commandLine52.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser45.parse(options46, strArray55, properties56);
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser8.parse(options30, strArray55, properties58, true);
        java.util.Collection collection61 = options30.getOptionGroups();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        java.util.Collection collection68 = options62.getOptionGroups();
        org.apache.commons.cli.Options options72 = options62.addOption("", false, "arg");
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup76 = options73.getOptionGroup(option75);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        char char79 = option78.getValueSeparator();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("");
        option78.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup85 = options73.getOptionGroup(option78);
        boolean boolean86 = option78.hasArgName();
        org.apache.commons.cli.Options options87 = options62.addOption(option78);
        org.apache.commons.cli.Options options88 = options30.addOption(option78);
        boolean boolean89 = option1.equals((java.lang.Object) options30);
        org.apache.commons.cli.Option option93 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean94 = option93.hasOptionalArg();
        java.lang.String str95 = option93.getOpt();
        org.apache.commons.cli.Options options96 = options30.addOption(option93);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertTrue("'" + char36 + "' != '" + '\000' + "'", char36 == '\000');
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + char79 + "' != '" + '\000' + "'", char79 == '\000');
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(options87);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(options96);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String str75 = commandLine70.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str77 = commandLine70.getOptionValue("arg");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("arg", "", false, "");
        option87.setValueSeparator('#');
        org.apache.commons.cli.Options options90 = options62.addOption(option87);
        java.util.List list91 = options62.getRequiredOptions();
        org.apache.commons.cli.OptionBuilder optionBuilder92 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options62);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str75, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(options90);
        org.junit.Assert.assertNotNull(list91);
        org.junit.Assert.assertNotNull(optionBuilder92);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues("hi!");
        java.lang.String[] strArray29 = commandLine26.getArgs();
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser19.parse(options20, strArray29, properties30);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        option38.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues("hi!");
        java.lang.String str60 = commandLine55.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str62 = commandLine55.getOptionValue("arg");
        java.lang.String[] strArray63 = commandLine55.getArgs();
        java.lang.String[] strArray65 = posixParser48.flatten(options54, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser32.parse(options33, strArray65, properties66);
        java.util.List list68 = commandLine67.getArgList();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser0.flatten(options20, strArray69, false);
        org.apache.commons.cli.Options options76 = options20.addOption("", "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list77 = options76.getRequiredOptions();
        java.lang.String str78 = options76.toString();
        org.apache.commons.cli.OptionGroup optionGroup79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options80 = options76.addOptionGroup(optionGroup79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + char39 + "' != '" + '\000' + "'", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str60, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ Options: [ short {=[ option:  [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ] +ARG :: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ] ], 4=[ option: 4  ::  ]} ] [ long {[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]=[ option:  [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ] +ARG :: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ] ]} ]" + "'", str78, "[ Options: [ short {=[ option:  [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ] +ARG :: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ] ], 4=[ option: 4  ::  ]} ] [ long {[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]=[ option:  [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ] +ARG :: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ] ]} ]");
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Option[] optionArray51 = commandLine50.getOptions();
        java.lang.String str54 = commandLine50.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]", "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.Object obj56 = commandLine50.getOptionObject('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(optionArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]" + "'", str54, "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        commandLine7.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.List list13 = commandLine7.getArgList();
        boolean boolean15 = commandLine7.hasOption("[ Options: [ short {4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        boolean boolean14 = options1.hasOption(" ");
        java.util.Collection collection15 = options1.getOptionGroups();
        org.apache.commons.cli.Option option17 = options1.getOption("org.apache.commons.cli.ParseException: arg");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(collection15);
        org.junit.Assert.assertNull(option17);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues("hi!");
        java.lang.String str25 = commandLine20.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str27 = commandLine20.getOptionValue("arg");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        java.lang.String str33 = commandLine31.getOptionValue("[ option: 4  ::  :: [] ]");
        java.lang.String[] strArray34 = commandLine31.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str19, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str25, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray34);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        char char6 = option2.getValueSeparator();
        java.lang.String str7 = option2.getArgName();
        option2.setRequired(false);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = options11.addOption(option13);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray26 = commandLine24.getOptionValues("hi!");
        java.lang.String[] strArray27 = commandLine24.getArgs();
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser17.parse(options18, strArray27, properties28);
        org.apache.commons.cli.CommandLine commandLine31 = posixParser10.parse(options16, strArray27, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup35 = options32.getOptionGroup(option34);
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        char char38 = option37.getValueSeparator();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        option37.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup44 = options32.getOptionGroup(option37);
        boolean boolean46 = options32.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("");
        org.apache.commons.cli.Options options53 = options48.addOption(option50);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine54.getOptionValues("hi!");
        java.lang.String[] strArray57 = commandLine54.getArgs();
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser47.parse(options48, strArray57, properties58);
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser10.parse(options32, strArray57, properties60, true);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        java.util.Collection collection69 = options63.getOptions();
        java.lang.String[] strArray70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser10.parse(options63, strArray70, true);
        java.lang.String str74 = commandLine72.getOptionValue('\000');
        java.lang.Object obj76 = commandLine72.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray77 = commandLine72.getOptions();
        java.lang.String[] strArray78 = commandLine72.getArgs();
        boolean boolean79 = option2.equals((java.lang.Object) strArray78);
        java.lang.String str80 = option2.getKey();
        int int81 = option2.getArgs();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create('4');
        char char84 = option83.getValueSeparator();
        boolean boolean85 = option83.hasArg();
        java.lang.String str86 = option83.getValue();
        java.lang.String str87 = option83.getDescription();
        java.lang.String str88 = option83.toString();
        option2.setType((java.lang.Object) str88);
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertTrue("'" + char38 + "' != '" + '\000' + "'", char38 == '\000');
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(optionArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "4" + "'", str80, "4");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertTrue("'" + char84 + "' != '" + '\000' + "'", char84 == '\000');
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[ option: 4  :: null ]" + "'", str88, "[ option: 4  :: null ]");
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option26.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Option option38 = options21.getOption("[ option:    :: null ]");
        java.util.Collection collection39 = options21.getOptions();
        org.apache.commons.cli.OptionGroup optionGroup40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options41 = options21.addOptionGroup(optionGroup40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertNotNull(collection39);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        boolean boolean42 = commandLine39.hasOption('#');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', "[ option: 4  :: null ]");
        java.lang.String[] strArray87 = commandLine81.getOptionValues("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ option: 4  :: null ]" + "'", str85, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray87);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        java.util.Collection collection8 = options2.getOptionGroups();
        org.apache.commons.cli.Options options12 = options2.addOption("", false, "arg");
        java.util.List list13 = options12.getRequiredOptions();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options16 = options12.addOption(option15);
        boolean boolean18 = options12.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup23 = options20.getOptionGroup(option22);
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        char char26 = option25.getValueSeparator();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("");
        option25.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup32 = options20.getOptionGroup(option25);
        boolean boolean34 = options20.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.CommandLine commandLine42 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine42.getOptionValues("hi!");
        java.lang.String str47 = commandLine42.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str49 = commandLine42.getOptionValue("arg");
        java.lang.String[] strArray50 = commandLine42.getArgs();
        java.lang.String[] strArray52 = posixParser35.flatten(options41, strArray50, false);
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser19.parse(options20, strArray52, properties53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptionGroups();
        org.apache.commons.cli.Options options65 = options55.addOption("", false, "arg");
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup69 = options66.getOptionGroup(option68);
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        char char72 = option71.getValueSeparator();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        option74.setDescription("");
        option71.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup78 = options66.getOptionGroup(option71);
        boolean boolean79 = option71.hasArgName();
        org.apache.commons.cli.Options options80 = options55.addOption(option71);
        java.util.List list81 = options55.helpOptions();
        org.apache.commons.cli.CommandLine commandLine82 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray84 = commandLine82.getOptionValues("hi!");
        java.lang.String str87 = commandLine82.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str89 = commandLine82.getOptionValue("arg");
        java.lang.String[] strArray90 = commandLine82.getArgs();
        java.lang.String[] strArray92 = posixParser19.flatten(options55, strArray90, false);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser1.parse(options12, strArray92, properties93);
        java.lang.String[] strArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray97 = posixParser0.flatten(options12, strArray95, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(collection8);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + '\000' + "'", char26 == '\000');
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(optionGroup32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str47, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNull(optionGroup69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertTrue("'" + char72 + "' != '" + '\000' + "'", char72 == '\000');
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(list81);
        org.junit.Assert.assertNull(strArray84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str87, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        java.lang.String str57 = commandLine54.getOptionValue(' ', "");
        boolean boolean59 = commandLine54.hasOption(' ');
        java.lang.String str61 = commandLine54.getOptionValue('a');
        org.apache.commons.cli.Option[] optionArray62 = commandLine54.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(optionArray62);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.Object obj2 = commandLine0.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        java.util.List list3 = commandLine0.getArgList();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        java.lang.String str7 = commandLine0.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray8 = commandLine0.getArgs();
        java.lang.String str10 = commandLine0.getOptionValue('4');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str7, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.Collection collection57 = options51.getOptionGroups();
        java.util.Collection collection58 = options51.getOptionGroups();
        java.util.Collection collection59 = options51.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String str72 = commandLine67.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str74 = commandLine67.getOptionValue("arg");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options51, strArray77, properties78);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean82 = option81.hasArgName();
        boolean boolean83 = option81.hasArgName();
        boolean boolean84 = option81.hasOptionalArg();
        java.lang.Object obj85 = option81.getType();
        option81.setLongOpt("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine88 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray90 = commandLine88.getOptionValues("hi!");
        java.lang.String[] strArray91 = commandLine88.getArgs();
        option81.setType((java.lang.Object) strArray91);
        org.apache.commons.cli.Options options93 = options51.addOption(option81);
        boolean boolean94 = option81.hasArgName();
        java.lang.String str95 = option81.getLongOpt();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str95, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        posixParser0.burstToken("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]", false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        java.util.Collection collection28 = options22.getOptionGroups();
        org.apache.commons.cli.Options options32 = options22.addOption("", false, "arg");
        java.util.List list33 = options32.getRequiredOptions();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options36 = options32.addOption(option35);
        java.util.Collection collection37 = options32.getOptionGroups();
        java.util.List list38 = options32.helpOptions();
        java.lang.String str39 = options32.toString();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        org.apache.commons.cli.Options options46 = options41.addOption(option43);
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("");
        org.apache.commons.cli.Options options53 = options48.addOption(option50);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine54.getOptionValues("hi!");
        java.lang.String[] strArray57 = commandLine54.getArgs();
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser47.parse(options48, strArray57, properties58);
        org.apache.commons.cli.CommandLine commandLine61 = posixParser40.parse(options46, strArray57, false);
        java.lang.String[] strArray63 = posixParser0.flatten(options32, strArray57, false);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        java.util.Collection collection70 = options64.getOptions();
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        char char74 = option73.getValueSeparator();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setDescription("");
        option73.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup80 = options71.getOptionGroup(option73);
        option73.setOptionalArg(true);
        int int83 = option73.getId();
        org.apache.commons.cli.Options options84 = options64.addOption(option73);
        java.util.List list85 = options64.helpOptions();
        boolean boolean87 = options64.hasOption("org.apache.commons.cli.ParseException: arg");
        java.lang.String[] strArray88 = null;
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options64, strArray88, true);
        java.util.List list91 = options64.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str39, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue("'" + char74 + "' != '" + '\000' + "'", char74 == '\000');
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(list85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(list91);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.String str50 = commandLine48.getOptionValue("[ option: 4  ::  ]");
        java.util.List list51 = commandLine48.getArgList();
        java.lang.Object obj53 = commandLine48.getOptionObject("[ Options: [ short {4=[ option: 4  ::  :: [ option: 4  ::  :: false ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(list51);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.Object obj2 = commandLine0.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        java.util.Iterator iterator3 = commandLine0.iterator();
        boolean boolean5 = commandLine0.hasOption('=');
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        java.lang.String str70 = options38.toString();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("4", true, "4");
        boolean boolean75 = option74.hasOptionalArg();
        org.apache.commons.cli.Options options76 = options38.addOption(option74);
        java.util.List list77 = options76.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(list77);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.util.Iterator iterator89 = commandLine86.iterator();
        org.apache.commons.cli.Option[] optionArray90 = commandLine86.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNotNull(optionArray90);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray6 = commandLine0.getOptions();
        java.lang.String str9 = commandLine0.getOptionValue('a', "[ option: 4 hi!  ::  ]");
        java.lang.String str12 = commandLine0.getOptionValue('\000', "[ option:   :: null ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(optionArray6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ option: 4 hi!  ::  ]" + "'", str9, "[ option: 4 hi!  ::  ]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option:   :: null ]" + "'", str12, "[ option:   :: null ]");
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues("hi!");
        java.lang.String str31 = commandLine26.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str33 = commandLine26.getOptionValue("arg");
        java.lang.String[] strArray34 = commandLine26.getArgs();
        java.lang.String[] strArray36 = posixParser19.flatten(options25, strArray34, false);
        java.util.Collection collection37 = options25.getOptionGroups();
        java.util.List list38 = options25.helpOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setArgs((int) (short) 100);
        option40.setArgName("[ option: 4  :: null ]");
        java.lang.String str45 = option40.getLongOpt();
        java.lang.String str47 = option40.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine48 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray50 = commandLine48.getOptionValues("hi!");
        java.lang.String str53 = commandLine48.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str55 = commandLine48.getOptionValue("arg");
        java.lang.String[] strArray56 = commandLine48.getArgs();
        option40.setType((java.lang.Object) strArray56);
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options25, strArray56, properties58);
        java.lang.Object obj61 = commandLine59.getOptionObject('a');
        boolean boolean63 = commandLine59.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str31, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str53, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.util.List list10 = commandLine0.getArgList();
        java.lang.String[] strArray12 = commandLine0.getOptionValues('a');
        java.lang.String str15 = commandLine0.getOptionValue(' ', "org.apache.commons.cli.UnrecognizedOptionException: [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]" + "'", str15, "org.apache.commons.cli.UnrecognizedOptionException: [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray6 = commandLine0.getOptions();
        java.lang.String[] strArray8 = commandLine0.getOptionValues("[ option:    :: null ]");
        boolean boolean10 = commandLine0.hasOption("arg");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(optionArray6);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        org.apache.commons.cli.Option option93 = options77.getOption("org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNull(option93);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.List list6 = option2.getValuesList();
        option2.setValueSeparator(' ');
        java.lang.String str9 = option2.getKey();
        int int10 = option2.getArgs();
        org.apache.commons.cli.CommandLine commandLine11 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray13 = commandLine11.getOptionValues("hi!");
        java.lang.Object obj15 = commandLine11.getOptionObject('a');
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("");
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        boolean boolean26 = option22.hasOptionalArg();
        option17.setType((java.lang.Object) boolean26);
        java.lang.String str28 = option17.getArgName();
        java.lang.Object obj29 = option17.getType();
        java.lang.String[] strArray30 = option17.getValues();
        commandLine11.addOption(option17);
        java.util.Iterator iterator32 = commandLine11.iterator();
        boolean boolean34 = commandLine11.hasOption('=');
        option2.setType((java.lang.Object) commandLine11);
        boolean boolean36 = option2.hasArgs();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "4" + "'", str9, "4");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "arg" + "'", str28, "arg");
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + false + "'", obj29, false);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptionGroups();
        org.apache.commons.cli.Options options65 = options55.addOption("", false, "arg");
        java.lang.String str66 = options65.toString();
        java.util.Collection collection67 = options65.getOptions();
        java.util.Collection collection68 = options65.getOptions();
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues("hi!");
        java.lang.String str74 = commandLine69.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str76 = commandLine69.getOptionValue("arg");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        org.apache.commons.cli.CommandLine commandLine78 = posixParser0.parse(options65, strArray77);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str66, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str74, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine78);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        posixParser0.burstToken("[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]", false);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options21.getOptions();
        java.util.List list23 = options21.helpOptions();
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("");
        org.apache.commons.cli.Options options30 = options25.addOption(option27);
        java.util.Collection collection31 = options25.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine32 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray34 = commandLine32.getOptionValues("hi!");
        java.lang.String str37 = commandLine32.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str39 = commandLine32.getOptionValue("arg");
        java.lang.String[] strArray40 = commandLine32.getArgs();
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser24.parse(options25, strArray40, properties41);
        org.apache.commons.cli.CommandLine commandLine43 = posixParser0.parse(options21, strArray40);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNull(strArray34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str37, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(commandLine43);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        boolean boolean22 = option13.equals((java.lang.Object) option18);
        option18.setDescription("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine0.addOption(option18);
        java.lang.String str26 = option18.getDescription();
        boolean boolean27 = option18.hasOptionalArg();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str26, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        java.lang.String str4 = option1.getOpt();
        java.lang.String str5 = option1.getArgName();
        option1.setDescription("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        boolean boolean8 = option1.hasLongOpt();
        java.lang.String str10 = option1.getValue((int) (byte) 10);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = options11.addOption(option13);
        java.util.Collection collection17 = options11.getOptionGroups();
        org.apache.commons.cli.Options options21 = options11.addOption("", false, "arg");
        java.util.List list22 = options21.getRequiredOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options25 = options21.addOption(option24);
        java.util.Collection collection26 = options21.getOptionGroups();
        java.util.List list27 = options21.helpOptions();
        java.util.List list28 = options21.helpOptions();
        java.util.Collection collection29 = options21.getOptions();
        org.apache.commons.cli.Option option31 = options21.getOption("");
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        org.apache.commons.cli.Options options37 = options32.addOption(option34);
        java.util.Collection collection38 = options32.getOptionGroups();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        option40.setLongOpt("hi!");
        boolean boolean45 = option40.hasArgName();
        org.apache.commons.cli.Options options46 = options32.addOption(option40);
        boolean boolean47 = option31.equals((java.lang.Object) options46);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        java.util.Collection collection55 = options49.getOptions();
        boolean boolean57 = options49.hasOption("arg");
        java.lang.String[] strArray60 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser48.parse(options49, strArray60);
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setArgs((int) (short) 100);
        option63.setArgName("[ option: 4  :: null ]");
        java.lang.String str68 = option63.getLongOpt();
        java.lang.String str70 = option63.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine71.getOptionValues("hi!");
        java.lang.String str76 = commandLine71.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str78 = commandLine71.getOptionValue("arg");
        java.lang.String[] strArray79 = commandLine71.getArgs();
        option63.setType((java.lang.Object) strArray79);
        java.lang.String str82 = option63.getValue((int) 'a');
        org.apache.commons.cli.OptionGroup optionGroup83 = options49.getOptionGroup(option63);
        org.apache.commons.cli.OptionGroup optionGroup84 = options46.getOptionGroup(option63);
        org.apache.commons.cli.OptionBuilder optionBuilder85 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options46);
        java.util.List list86 = options46.getRequiredOptions();
        boolean boolean87 = option1.equals((java.lang.Object) list86);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(collection17);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(collection26);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str76, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(optionGroup83);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertNotNull(optionBuilder85);
        org.junit.Assert.assertNotNull(list86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        java.lang.String str7 = commandLine0.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        char char10 = option9.getValueSeparator();
        option9.setOptionalArg(false);
        java.lang.String str13 = option9.getValue();
        java.lang.String str14 = option9.getDescription();
        java.util.List list15 = option9.getValuesList();
        commandLine0.addOption(option9);
        char char17 = option9.getValueSeparator();
        option9.setOptionalArg(false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str7, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\000' + "'", char10 == '\000');
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options23 = options1.addOption(" ", "", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setArgs((int) (short) 100);
        option25.setArgName("[ option: 4  :: null ]");
        java.lang.String str30 = option25.getLongOpt();
        boolean boolean31 = option25.hasLongOpt();
        java.lang.Object obj32 = option25.getType();
        boolean boolean33 = option25.hasLongOpt();
        option25.setLongOpt("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Options options36 = options23.addOption(option25);
        java.util.List list37 = options36.helpOptions();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setArgName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        option39.setValueSeparator('\000');
        org.apache.commons.cli.OptionGroup optionGroup44 = options36.getOptionGroup(option39);
        org.apache.commons.cli.OptionGroup optionGroup45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options46 = options36.addOptionGroup(optionGroup45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNull(optionGroup44);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str14 = commandLine0.getOptionValue("[ option:    :: null ]");
        boolean boolean16 = commandLine0.hasOption('\000');
        java.lang.String[] strArray18 = commandLine0.getOptionValues("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.lang.String[] strArray20 = commandLine0.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: [ option: 4  ::  ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str12, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(strArray20);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        commandLine13.addArg("[ option: 4  :: null ::  ]");
        java.util.Iterator iterator16 = commandLine13.iterator();
        java.lang.Object obj18 = commandLine13.getOptionObject("[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        java.lang.Object obj20 = commandLine13.getOptionObject('4');
        commandLine13.addArg("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean4 = option3.hasOptionalArg();
        java.lang.String str6 = option3.getValue("");
        java.lang.String str7 = option3.getValue();
        option3.setValueSeparator('a');
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = options11.addOption(option13);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray26 = commandLine24.getOptionValues("hi!");
        java.lang.String[] strArray27 = commandLine24.getArgs();
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser17.parse(options18, strArray27, properties28);
        org.apache.commons.cli.CommandLine commandLine31 = posixParser10.parse(options16, strArray27, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup35 = options32.getOptionGroup(option34);
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        char char38 = option37.getValueSeparator();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        option37.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup44 = options32.getOptionGroup(option37);
        boolean boolean46 = options32.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("");
        org.apache.commons.cli.Options options53 = options48.addOption(option50);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine54.getOptionValues("hi!");
        java.lang.String[] strArray57 = commandLine54.getArgs();
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser47.parse(options48, strArray57, properties58);
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser10.parse(options32, strArray57, properties60, true);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        java.util.Collection collection69 = options63.getOptions();
        java.lang.String[] strArray70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser10.parse(options63, strArray70, true);
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options74 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setDescription("");
        org.apache.commons.cli.Options options79 = options74.addOption(option76);
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues("hi!");
        java.lang.String[] strArray83 = commandLine80.getArgs();
        java.util.Properties properties84 = null;
        org.apache.commons.cli.CommandLine commandLine85 = posixParser73.parse(options74, strArray83, properties84);
        java.lang.String[] strArray88 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties89 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser10.parse(options74, strArray88, properties89, true);
        option3.setType((java.lang.Object) strArray88);
        boolean boolean93 = option3.hasValueSeparator();
        java.lang.Object obj94 = option3.getType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertTrue("'" + char38 + "' != '" + '\000' + "'", char38 == '\000');
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(obj94);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("", false, "arg");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues("hi!");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options60 = options6.addOption(" ", false, "hi!");
        org.apache.commons.cli.Option option61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup62 = options6.getOptionGroup(option61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setArgs((int) (short) 100);
        option28.setArgName("[ option: 4  :: null ]");
        java.lang.String str33 = option28.getLongOpt();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup37 = options34.getOptionGroup(option36);
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup40 = options34.getOptionGroup(option39);
        option28.setType((java.lang.Object) options34);
        org.apache.commons.cli.Options options42 = options6.addOption(option28);
        org.apache.commons.cli.Option option44 = options42.getOption("[ option: 4  :: null ::  ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options48 = options42.addOption("[ option: a  :: null ]", true, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNull(option44);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptions();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options25.getOptionGroup(option27);
        option27.setOptionalArg(true);
        int int37 = option27.getId();
        org.apache.commons.cli.Options options38 = options18.addOption(option27);
        option27.setOptionalArg(false);
        java.lang.String str42 = option27.getValue("[ option: 4  :: null ::  ]");
        java.lang.String[] strArray43 = option27.getValues();
        option27.setValueSeparator('a');
        org.apache.commons.cli.OptionGroup optionGroup46 = options6.getOptionGroup(option27);
        java.lang.String str47 = options6.toString();
        java.util.Collection collection48 = options6.getOptionGroups();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        char char55 = option51.getValueSeparator();
        option51.setRequired(false);
        org.apache.commons.cli.Options options58 = options6.addOption(option51);
        org.apache.commons.cli.OptionBuilder optionBuilder59 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options6);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str42, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str47, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertTrue("'" + char55 + "' != '" + '\000' + "'", char55 == '\000');
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(optionBuilder59);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.lang.String str90 = commandLine86.getOptionValue("[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]");
        java.lang.String[] strArray92 = commandLine86.getOptionValues("");
        java.lang.String str94 = commandLine86.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(strArray92);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        java.lang.String str57 = commandLine54.getOptionValue(' ', "");
        java.lang.String[] strArray59 = commandLine54.getOptionValues(' ');
        java.lang.String str62 = commandLine54.getOptionValue("[ option: 4  :: null :: [ option: 4  :: null ] ]", "org.apache.commons.cli.MissingOptionException: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str62, "org.apache.commons.cli.MissingOptionException: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        java.lang.String str4 = option1.getValue();
        boolean boolean5 = option1.hasOptionalArg();
        java.lang.String str7 = option1.getValue("");
        char char8 = option1.getValueSeparator();
        java.lang.String str9 = option1.getOpt();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = options11.addOption(option13);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray26 = commandLine24.getOptionValues("hi!");
        java.lang.String[] strArray27 = commandLine24.getArgs();
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser17.parse(options18, strArray27, properties28);
        org.apache.commons.cli.CommandLine commandLine31 = posixParser10.parse(options16, strArray27, false);
        java.util.Collection collection32 = options16.getOptionGroups();
        java.util.Collection collection33 = options16.getOptions();
        java.lang.String str34 = options16.toString();
        option1.setType((java.lang.Object) options16);
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str39 = option37.getValue("arg");
        java.lang.String str40 = option37.getLongOpt();
        option37.setLongOpt("");
        option37.setArgName("");
        java.lang.String str45 = option37.getArgName();
        option37.setValueSeparator('\000');
        org.apache.commons.cli.OptionGroup optionGroup48 = options16.getOptionGroup(option37);
        org.apache.commons.cli.Option option50 = options16.getOption("");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\000' + "'", char8 == '\000');
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "4" + "'", str9, "4");
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(collection33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str34, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNull(option50);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.OptionBuilder optionBuilder22 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options6);
        java.util.Collection collection23 = options6.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options28 = options6.addOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]", "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", true, "[ option: 4  ::  :: [] ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(optionBuilder22);
        org.junit.Assert.assertNotNull(collection23);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        java.util.Collection collection23 = options6.getOptions();
        org.apache.commons.cli.Option option25 = options6.getOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option27 = options6.getOption("[ option:    :: null :: arg ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(collection23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNull(option27);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("");
        java.lang.Object obj9 = commandLine0.getOptionObject("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray11 = commandLine0.getOptionValues('#');
        java.util.Iterator iterator12 = commandLine0.iterator();
        boolean boolean14 = commandLine0.hasOption('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        org.apache.commons.cli.Options options82 = null;
        java.lang.String[] strArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine85 = posixParser0.parse(options82, strArray83, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        boolean boolean6 = option2.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        java.util.Collection collection14 = options8.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String str20 = commandLine15.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str22 = commandLine15.getOptionValue("arg");
        java.lang.String[] strArray23 = commandLine15.getArgs();
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser7.parse(options8, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        org.apache.commons.cli.Options options32 = options27.addOption(option29);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser26.parse(options27, strArray36, properties37);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        char char46 = option45.getValueSeparator();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("");
        option45.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup52 = options40.getOptionGroup(option45);
        boolean boolean54 = options40.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create('4');
        option58.setDescription("");
        org.apache.commons.cli.Options options61 = options56.addOption(option58);
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues("hi!");
        java.lang.String str67 = commandLine62.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str69 = commandLine62.getOptionValue("arg");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.lang.String[] strArray72 = posixParser55.flatten(options61, strArray70, false);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser39.parse(options40, strArray72, properties73);
        java.util.List list75 = commandLine74.getArgList();
        java.lang.String[] strArray76 = commandLine74.getArgs();
        java.lang.String[] strArray78 = posixParser7.flatten(options27, strArray76, false);
        boolean boolean79 = option2.equals((java.lang.Object) strArray76);
        int int80 = option2.getId();
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues("hi!");
        java.lang.String str86 = commandLine81.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine81.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray90 = commandLine81.getOptionValues("[ option:    :: null ]");
        option2.setType((java.lang.Object) commandLine81);
        java.lang.Class<?> wildcardClass92 = commandLine81.getClass();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(collection14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + '\000' + "'", char46 == '\000');
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str67, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str86, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options17 = options1.addOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: false ]} ] [ long {} ]", true, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        java.lang.Object obj8 = commandLine0.getOptionObject("[ option:    :: null ]");
        java.lang.String str11 = commandLine0.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.lang.String[] strArray12 = commandLine0.getArgs();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]" + "'", str11, "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.Object obj70 = commandLine62.getOptionObject("");
        java.lang.String str72 = commandLine62.getOptionValue('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        option6.setDescription("");
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        boolean boolean15 = option11.hasOptionalArg();
        option6.setType((java.lang.Object) boolean15);
        java.lang.String str17 = option6.getArgName();
        java.lang.Object obj18 = option6.getType();
        java.lang.String[] strArray19 = option6.getValues();
        commandLine0.addOption(option6);
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("");
        org.apache.commons.cli.Options options30 = options25.addOption(option27);
        boolean boolean31 = option27.hasOptionalArg();
        option22.setType((java.lang.Object) boolean31);
        commandLine0.addOption(option22);
        boolean boolean34 = option22.hasArg();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + false + "'", obj18, false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.util.Collection collection19 = options13.getOptionGroups();
        org.apache.commons.cli.Options options23 = options13.addOption("", false, "arg");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean28 = option27.hasOptionalArg();
        option27.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup31 = options23.getOptionGroup(option27);
        java.util.Collection collection32 = options23.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.Collection collection40 = options34.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues("hi!");
        java.lang.String str46 = commandLine41.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str48 = commandLine41.getOptionValue("arg");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser33.parse(options34, strArray49, properties50);
        java.lang.String[] strArray53 = posixParser0.flatten(options23, strArray49, true);
        posixParser0.burstToken("", true);
        posixParser0.burstToken("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        char char63 = option62.getValueSeparator();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        option62.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup69 = options60.getOptionGroup(option62);
        java.util.List list70 = options60.helpOptions();
        java.util.Collection collection71 = options60.getOptionGroups();
        java.util.Collection collection72 = options60.getOptions();
        java.lang.String[] strArray73 = null;
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser0.parse(options60, strArray73, properties74);
        posixParser0.burstToken("[ Options: [ short {=[ option:  +ARG ::  ]} ] [ long {} ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str46, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNull(optionGroup69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(collection71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(commandLine75);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str12 = commandLine0.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option: 4  :: null ]");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        java.lang.Object obj16 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray18 = commandLine0.getOptionValues("org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option: 4  :: null ]" + "'", str12, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(strArray18);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        int int13 = option4.getArgs();
        boolean boolean14 = option4.hasValueSeparator();
        java.lang.String[] strArray15 = option4.getValues();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strArray15);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        org.apache.commons.cli.Option option71 = options40.getOption("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ::  ]");
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str75 = option73.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException77 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean78 = option73.equals((java.lang.Object) "hi!");
        option73.setValueSeparator('=');
        boolean boolean81 = option73.hasValueSeparator();
        java.lang.String str83 = option73.getValue("[ option:  +ARG ::  ]");
        java.lang.String str84 = option73.getLongOpt();
        java.lang.String str85 = option73.getValue();
        boolean boolean86 = option73.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup87 = options40.getOptionGroup(option73);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNull(option71);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[ option:  +ARG ::  ]" + "'", str83, "[ option:  +ARG ::  ]");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(optionGroup87);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option26.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Option option38 = options21.getOption("[ option:    :: null ]");
        java.util.Collection collection39 = options21.getOptions();
        java.lang.String str40 = options21.toString();
        org.apache.commons.cli.Option option41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup42 = options21.getOptionGroup(option41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertNotNull(collection39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str40, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        char char41 = option40.getValueSeparator();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        option40.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option40);
        boolean boolean48 = option40.hasValueSeparator();
        commandLine35.addOption(option40);
        java.lang.String str50 = option40.getLongOpt();
        boolean boolean51 = option40.hasArg();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + char41 + "' != '" + '\000' + "'", char41 == '\000');
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        boolean boolean7 = commandLine0.hasOption("[ option: 4 hi!  ::  ]");
        java.util.Iterator iterator8 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(iterator8);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setArgs((int) (short) 100);
        option72.setArgName("[ option: 4  :: null ]");
        java.lang.String str77 = option72.getLongOpt();
        boolean boolean78 = option72.hasLongOpt();
        java.lang.Object obj79 = option72.getType();
        int int80 = option72.getId();
        java.lang.String str81 = option72.getArgName();
        org.apache.commons.cli.Options options82 = options41.addOption(option72);
        boolean boolean83 = option72.hasOptionalArg();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ option: 4  :: null ]" + "'", str81, "[ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        java.lang.String str6 = option1.getLongOpt();
        boolean boolean7 = option1.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray24 = commandLine22.getOptionValues("hi!");
        java.lang.String[] strArray25 = commandLine22.getArgs();
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser15.parse(options16, strArray25, properties26);
        org.apache.commons.cli.CommandLine commandLine29 = posixParser8.parse(options14, strArray25, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup33 = options30.getOptionGroup(option32);
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        char char36 = option35.getValueSeparator();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        option35.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup42 = options30.getOptionGroup(option35);
        boolean boolean44 = options30.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("");
        org.apache.commons.cli.Options options51 = options46.addOption(option48);
        org.apache.commons.cli.CommandLine commandLine52 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine52.getOptionValues("hi!");
        java.lang.String[] strArray55 = commandLine52.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser45.parse(options46, strArray55, properties56);
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser8.parse(options30, strArray55, properties58, true);
        java.util.Collection collection61 = options30.getOptionGroups();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        java.util.Collection collection68 = options62.getOptionGroups();
        org.apache.commons.cli.Options options72 = options62.addOption("", false, "arg");
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup76 = options73.getOptionGroup(option75);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        char char79 = option78.getValueSeparator();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("");
        option78.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup85 = options73.getOptionGroup(option78);
        boolean boolean86 = option78.hasArgName();
        org.apache.commons.cli.Options options87 = options62.addOption(option78);
        org.apache.commons.cli.Options options88 = options30.addOption(option78);
        boolean boolean89 = option1.equals((java.lang.Object) options30);
        boolean boolean90 = option1.hasValueSeparator();
        java.lang.String str92 = option1.getValue("[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]");
        org.junit.Assert.assertNotNull(option1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option: 4  :: [ option:    :: [ option: 4 hi!  ::  ] ] ]" + "'", str6, "[ option: 4  :: [ option:    :: [ option: 4 hi!  ::  ] ] ]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertTrue("'" + char36 + "' != '" + '\000' + "'", char36 == '\000');
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + char79 + "' != '" + '\000' + "'", char79 == '\000');
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(options87);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]" + "'", str92, "[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]");
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        char char11 = option1.getValueSeparator();
        option1.setArgName("[ option: 4  :: null ::  ]");
        java.util.List list14 = option1.getValuesList();
        org.apache.commons.cli.OptionBuilder optionBuilder15 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option1);
        boolean boolean16 = option1.hasOptionalArg();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(optionBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option9.setLongOpt("hi!");
        commandLine0.addOption(option9);
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str21 = option18.getValue("");
        java.lang.String str22 = option18.getValue();
        option18.setValueSeparator('a');
        char char25 = option18.getValueSeparator();
        boolean boolean26 = option9.equals((java.lang.Object) char25);
        java.lang.Object obj27 = option9.getType();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + 'a' + "'", char25 == 'a');
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.List list61 = options55.helpOptions();
        org.apache.commons.cli.Options options66 = options55.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "");
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String[] strArray70 = commandLine67.getArgs();
        org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options66, strArray70, true);
        posixParser0.burstToken("", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine72);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine71.getOptionValues("hi!");
        java.lang.String[] strArray74 = commandLine71.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options70, strArray74, properties75, true);
        java.lang.String[] strArray79 = commandLine77.getOptionValues('\000');
        java.util.List list80 = commandLine77.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertNotNull(list80);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues("hi!");
        java.lang.String str25 = commandLine20.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str27 = commandLine20.getOptionValue("arg");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        org.apache.commons.cli.Options options37 = options32.addOption(option34);
        java.util.Collection collection38 = options32.getOptionGroups();
        org.apache.commons.cli.Options options42 = options32.addOption("", false, "arg");
        java.lang.String str43 = options42.toString();
        java.util.Collection collection44 = options42.getOptionGroups();
        java.util.Collection collection45 = options42.getOptions();
        java.util.Collection collection46 = options42.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        option50.setDescription("");
        org.apache.commons.cli.Options options53 = options48.addOption(option50);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine54.getOptionValues("hi!");
        java.lang.String[] strArray57 = commandLine54.getArgs();
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser47.parse(options48, strArray57, properties58);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        org.apache.commons.cli.Options options65 = options60.addOption(option62);
        java.lang.String str66 = options60.toString();
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String str72 = commandLine67.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str74 = commandLine67.getOptionValue("arg");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser47.parse(options60, strArray75, properties76, false);
        java.lang.String str80 = commandLine78.getOptionValue("[ option: 4  ::  :: [] ]");
        java.lang.String str82 = commandLine78.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        commandLine78.addArg("");
        java.lang.String[] strArray85 = commandLine78.getArgs();
        java.util.Properties properties86 = null;
        org.apache.commons.cli.CommandLine commandLine87 = posixParser0.parse(options42, strArray85, properties86);
        java.lang.Object obj89 = commandLine87.getOptionObject("[ option:  +ARG ::  ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str19, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str25, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str43, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str66, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("", false, "arg");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("");
        option70.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        char char83 = option82.getValueSeparator();
        boolean boolean84 = option82.hasArg();
        boolean boolean85 = option82.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup86 = options22.getOptionGroup(option82);
        org.apache.commons.cli.Option option88 = options22.getOption("arg");
        org.apache.commons.cli.Option option89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup90 = options22.getOptionGroup(option89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue("'" + char71 + "' != '" + '\000' + "'", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertTrue("'" + char83 + "' != '" + '\000' + "'", char83 == '\000');
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNull(option88);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.Collection collection87 = options53.getOptions();
        org.apache.commons.cli.Options options92 = options53.addOption("", "[ option: 4  :: null :: [ option: 4  :: null ] ]", true, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(collection87);
        org.junit.Assert.assertNotNull(options92);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("");
        option46.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup84 = options81.getOptionGroup(option83);
        boolean boolean85 = option83.hasLongOpt();
        boolean boolean86 = option83.isRequired();
        java.util.List list87 = option83.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup88 = options38.getOptionGroup(option83);
        java.lang.String str89 = option83.getOpt();
        java.lang.String str90 = option83.getOpt();
        java.lang.String str91 = option83.getKey();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '\000' + "'", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(list87);
        org.junit.Assert.assertNull(optionGroup88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + " " + "'", str89, " ");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + " " + "'", str90, " ");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + " " + "'", str91, " ");
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.util.List list63 = options53.getRequiredOptions();
        org.apache.commons.cli.Option option65 = options53.getOption("[ Options: [ short {=[ option:  +ARG ::  ]} ] [ long {} ]");
        boolean boolean67 = options53.hasOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNull(option65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.util.List list10 = commandLine0.getArgList();
        java.lang.String[] strArray12 = commandLine0.getOptionValues('a');
        java.lang.Object obj14 = commandLine0.getOptionObject('\000');
        java.lang.String str16 = commandLine0.getOptionValue('\000');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        commandLine50.addArg("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray54 = commandLine50.getOptionValues('#');
        java.lang.String[] strArray56 = commandLine50.getOptionValues("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String[] strArray57 = commandLine50.getArgs();
        java.util.Iterator iterator58 = commandLine50.iterator();
        org.apache.commons.cli.Option[] optionArray59 = commandLine50.getOptions();
        java.lang.String str62 = commandLine50.getOptionValue('#', "org.apache.commons.cli.MissingOptionException: [ option:    :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(iterator58);
        org.junit.Assert.assertNotNull(optionArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ option:    :: null ]" + "'", str62, "org.apache.commons.cli.MissingOptionException: [ option:    :: null ]");
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean17 = option16.hasArgName();
        boolean boolean18 = option16.hasArgName();
        commandLine0.addOption(option16);
        java.lang.String str20 = option16.getLongOpt();
        boolean boolean21 = option16.hasArg();
        int int22 = option16.getId();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: hi!", false);
        posixParser0.burstToken("[ option: 4 hi!  ::  ]", false);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: hi!", false);
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        org.apache.commons.cli.Options options50 = options45.addOption(option47);
        java.util.Collection collection51 = options45.getOptionGroups();
        org.apache.commons.cli.Options options55 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean58 = option57.hasOptionalArg();
        org.apache.commons.cli.Options options59 = options45.addOption(option57);
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        char char62 = option61.getValueSeparator();
        boolean boolean63 = option61.hasArg();
        java.lang.String str64 = option61.getValue();
        java.lang.String str66 = option61.getValue((int) ' ');
        org.apache.commons.cli.OptionGroup optionGroup67 = options45.getOptionGroup(option61);
        org.apache.commons.cli.Option option69 = options45.getOption("4");
        java.util.List list70 = options45.helpOptions();
        java.util.Collection collection71 = options45.getOptions();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean74 = option73.hasArgName();
        boolean boolean75 = option73.hasArgName();
        boolean boolean76 = option73.hasOptionalArg();
        java.lang.Object obj77 = option73.getType();
        option73.setLongOpt("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues("hi!");
        java.util.Iterator iterator83 = commandLine80.iterator();
        java.lang.String[] strArray85 = commandLine80.getOptionValues('a');
        java.util.Iterator iterator86 = commandLine80.iterator();
        boolean boolean88 = commandLine80.hasOption("");
        boolean boolean89 = option73.equals((java.lang.Object) commandLine80);
        java.util.List list90 = commandLine80.getArgList();
        java.lang.String[] strArray91 = commandLine80.getArgs();
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options45, strArray91, true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + char62 + "' != '" + '\000' + "'", char62 == '\000');
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(collection71);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertNotNull(iterator83);
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertNotNull(iterator86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(list90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        commandLine0.addArg("[ option: 4  :: null ]");
        boolean boolean16 = commandLine0.hasOption("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup16 = options13.getOptionGroup(option15);
        boolean boolean17 = option15.hasLongOpt();
        boolean boolean18 = option15.isRequired();
        java.util.List list19 = option15.getValuesList();
        boolean boolean20 = option15.isRequired();
        java.lang.String str21 = option15.toString();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        java.util.Collection collection28 = options22.getOptions();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        char char32 = option31.getValueSeparator();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        option31.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option31);
        option31.setOptionalArg(true);
        int int41 = option31.getId();
        org.apache.commons.cli.Options options42 = options22.addOption(option31);
        option15.setType((java.lang.Object) options42);
        java.util.List list44 = options42.getRequiredOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = posixParser0.parse(options42, strArray45);
        boolean boolean48 = commandLine46.hasOption('a');
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        char char51 = option50.getValueSeparator();
        boolean boolean52 = option50.hasArg();
        boolean boolean53 = option50.hasOptionalArg();
        java.lang.Object obj54 = option50.getType();
        java.lang.String str55 = option50.getDescription();
        commandLine46.addOption(option50);
        java.lang.String[] strArray57 = commandLine46.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNull(optionGroup16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ option:    :: null ]" + "'", str21, "[ option:    :: null ]");
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\000' + "'", char32 == '\000');
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + char51 + "' != '" + '\000' + "'", char51 == '\000');
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options40, strArray47);
        java.lang.String str51 = commandLine48.getOptionValue("[ Options: [ short {} ] [ long {} ]", "org.apache.commons.cli.ParseException: [ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.apache.commons.cli.ParseException: [ option: 4  :: null ]" + "'", str51, "org.apache.commons.cli.ParseException: [ option: 4  :: null ]");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        boolean boolean46 = option42.hasOptionalArg();
        option37.setType((java.lang.Object) boolean46);
        java.lang.String str48 = option37.getArgName();
        java.lang.String str49 = option37.getValue();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        option52.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup59 = options50.getOptionGroup(option52);
        boolean boolean60 = option52.hasValueSeparator();
        option52.setDescription("");
        option52.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        boolean boolean65 = option37.equals((java.lang.Object) option52);
        java.util.ListIterator listIterator66 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option37, listIterator66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "arg" + "'", str48, "arg");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setArgs((int) (short) 100);
        option28.setArgName("[ option: 4  :: null ]");
        java.lang.String str33 = option28.getLongOpt();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup37 = options34.getOptionGroup(option36);
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup40 = options34.getOptionGroup(option39);
        option28.setType((java.lang.Object) options34);
        org.apache.commons.cli.Options options42 = options6.addOption(option28);
        java.lang.String[] strArray43 = option28.getValues();
        java.lang.Object obj44 = option28.getType();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        org.apache.commons.cli.Option option6 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine0.addOption(option6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        boolean boolean14 = option10.hasValueSeparator();
        boolean boolean15 = option10.hasOptionalArg();
        java.lang.String str16 = option10.getOpt();
        commandLine0.addOption(option10);
        java.lang.String str19 = commandLine0.getOptionValue("org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
        java.util.List list20 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "4" + "'", str16, "4");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(list20);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        java.lang.String str70 = options38.toString();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("4", true, "4");
        boolean boolean75 = option74.hasOptionalArg();
        org.apache.commons.cli.Options options76 = options38.addOption(option74);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        char char79 = option78.getValueSeparator();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("");
        option78.setType((java.lang.Object) "");
        boolean boolean85 = option78.hasLongOpt();
        int int86 = option78.getArgs();
        int int87 = option78.getId();
        org.apache.commons.cli.Options options88 = options38.addOption(option78);
        java.lang.Object obj89 = null;
        boolean boolean90 = option78.equals(obj89);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + char79 + "' != '" + '\000' + "'", char79 == '\000');
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Options options10 = options0.addOption("", false, "arg");
        java.util.List list11 = options10.getRequiredOptions();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options14 = options10.addOption(option13);
        java.util.Collection collection15 = options10.getOptionGroups();
        java.util.List list16 = options10.helpOptions();
        java.util.List list17 = options10.helpOptions();
        java.util.Collection collection18 = options10.getOptions();
        org.apache.commons.cli.Option option20 = options10.getOption("");
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option29.setLongOpt("hi!");
        boolean boolean34 = option29.hasArgName();
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        boolean boolean36 = option20.equals((java.lang.Object) options35);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        java.util.Collection collection44 = options38.getOptions();
        boolean boolean46 = options38.hasOption("arg");
        java.lang.String[] strArray49 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine50 = posixParser37.parse(options38, strArray49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setArgs((int) (short) 100);
        option52.setArgName("[ option: 4  :: null ]");
        java.lang.String str57 = option52.getLongOpt();
        java.lang.String str59 = option52.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        option52.setType((java.lang.Object) strArray68);
        java.lang.String str71 = option52.getValue((int) 'a');
        org.apache.commons.cli.OptionGroup optionGroup72 = options38.getOptionGroup(option52);
        org.apache.commons.cli.OptionGroup optionGroup73 = options35.getOptionGroup(option52);
        org.apache.commons.cli.Option option74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup75 = options35.getOptionGroup(option74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(collection15);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(collection18);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNull(optionGroup73);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option29.setLongOpt("hi!");
        boolean boolean34 = option29.hasArgName();
        org.apache.commons.cli.Options options35 = options21.addOption(option29);
        java.util.Collection collection36 = options35.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        org.apache.commons.cli.Options options50 = options45.addOption(option47);
        org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray53 = commandLine51.getOptionValues("hi!");
        java.lang.String[] strArray54 = commandLine51.getArgs();
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser44.parse(options45, strArray54, properties55);
        org.apache.commons.cli.CommandLine commandLine58 = posixParser37.parse(options43, strArray54, false);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup62 = options59.getOptionGroup(option61);
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        char char65 = option64.getValueSeparator();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("");
        option64.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup71 = options59.getOptionGroup(option64);
        boolean boolean73 = options59.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        option77.setDescription("");
        org.apache.commons.cli.Options options80 = options75.addOption(option77);
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues("hi!");
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser74.parse(options75, strArray84, properties85);
        java.util.Properties properties87 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser37.parse(options59, strArray84, properties87, true);
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options35, strArray84, properties90, true);
        java.lang.String[] strArray94 = commandLine92.getOptionValues('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(collection36);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNull(optionGroup62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertTrue("'" + char65 + "' != '" + '\000' + "'", char65 == '\000');
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNull(strArray94);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        option27.setDescription("");
        org.apache.commons.cli.Options options30 = options25.addOption(option27);
        java.util.Collection collection31 = options25.getOptionGroups();
        org.apache.commons.cli.Options options35 = options25.addOption("", false, "arg");
        java.util.List list36 = options35.getRequiredOptions();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options39 = options35.addOption(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setArgs((int) (short) 100);
        option41.setArgName("[ option: 4  :: null ]");
        java.lang.String str46 = option41.getLongOpt();
        java.lang.String str48 = option41.getValue((int) (short) -1);
        org.apache.commons.cli.Options options49 = options39.addOption(option41);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup53 = options50.getOptionGroup(option52);
        boolean boolean54 = option52.hasLongOpt();
        boolean boolean55 = option52.isRequired();
        java.util.List list56 = option52.getValuesList();
        option52.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options59 = options49.addOption(option52);
        java.util.List list60 = options49.helpOptions();
        java.lang.String str61 = options49.toString();
        org.apache.commons.cli.PosixParser posixParser62 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues("hi!");
        java.lang.String str74 = commandLine69.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str76 = commandLine69.getOptionValue("arg");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        java.lang.String[] strArray79 = posixParser62.flatten(options68, strArray77, false);
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options49, strArray79, true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str74, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        java.lang.String str68 = commandLine62.getOptionValue('=');
        boolean boolean70 = commandLine62.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: hi!", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptions();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        option48.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup55 = options46.getOptionGroup(option48);
        option48.setOptionalArg(true);
        int int58 = option48.getId();
        org.apache.commons.cli.Options options59 = options39.addOption(option48);
        java.util.List list60 = options39.helpOptions();
        java.lang.String[] strArray61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options39, strArray61, false);
        org.apache.commons.cli.Option option64 = null;
        java.util.ListIterator listIterator65 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option64, listIterator65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\000' + "'", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNotNull(commandLine63);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray14 = commandLine0.getOptionValues('a');
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        boolean boolean17 = option16.hasArgName();
        boolean boolean18 = option16.hasArgName();
        commandLine0.addOption(option16);
        java.lang.String str21 = option16.getValue((int) 'a');
        java.lang.String str22 = option16.getOpt();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + " " + "'", str22, " ");
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        java.util.Collection collection42 = options36.getOptionGroups();
        org.apache.commons.cli.Options options46 = options36.addOption("", false, "arg");
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean49 = option48.hasOptionalArg();
        org.apache.commons.cli.Options options50 = options36.addOption(option48);
        boolean boolean52 = options36.hasOption("");
        java.lang.String str53 = options36.toString();
        java.util.Collection collection54 = options36.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues("hi!");
        java.lang.String[] strArray58 = commandLine55.getArgs();
        java.lang.String str60 = commandLine55.getOptionValue("hi!");
        boolean boolean62 = commandLine55.hasOption("");
        java.lang.String str65 = commandLine55.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray67 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray68 = commandLine55.getArgs();
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options36, strArray68);
        org.apache.commons.cli.Option option71 = options36.getOption("[ option:    :: null :: arg ]");
        org.apache.commons.cli.Options options75 = options36.addOption("", false, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str53, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str65, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNull(option71);
        org.junit.Assert.assertNotNull(options75);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("4", false, "[ option: 4  ::  ]");
        java.lang.String str76 = option75.getDescription();
        org.apache.commons.cli.Options options77 = options41.addOption(option75);
        java.util.List list78 = options77.helpOptions();
        org.apache.commons.cli.Option option80 = options77.getOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ option: 4  ::  ]" + "'", str76, "[ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(list78);
        org.junit.Assert.assertNull(option80);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option9.setLongOpt("hi!");
        commandLine0.addOption(option9);
        java.lang.Object obj15 = option9.getType();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        char char18 = option17.getValueSeparator();
        boolean boolean19 = option17.hasArg();
        java.lang.String str20 = option17.getValue();
        java.lang.String str22 = option17.getValue((int) ' ');
        boolean boolean23 = option9.equals((java.lang.Object) str22);
        int int24 = option9.getId();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertTrue("'" + char18 + "' != '" + '\000' + "'", char18 == '\000');
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        java.lang.String str68 = commandLine62.getOptionValue('=');
        java.lang.String str71 = commandLine62.getOptionValue(' ', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String str73 = commandLine62.getOptionValue("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str71, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.Options options26 = options16.addOption("", false, "arg");
        java.util.List list27 = options26.getRequiredOptions();
        java.lang.String str28 = options26.toString();
        boolean boolean30 = options26.hasOption("[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        org.apache.commons.cli.Options options35 = options26.addOption("", "", false, "[ option: 4  ::  ]");
        java.util.List list36 = options26.getRequiredOptions();
        java.util.Collection collection37 = options26.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine38 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray40 = commandLine38.getOptionValues("hi!");
        java.lang.String str43 = commandLine38.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine38.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray47 = commandLine38.getOptionValues('4');
        java.lang.String[] strArray48 = commandLine38.getArgs();
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options26, strArray48, false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str43, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.lang.String str5 = option1.getValue();
        option1.setArgs((int) '\000');
        boolean boolean8 = option1.hasValueSeparator();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.util.Iterator iterator12 = commandLine9.iterator();
        java.lang.String[] strArray14 = commandLine9.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray15 = commandLine9.getOptions();
        option1.setType((java.lang.Object) optionArray15);
        option1.setRequired(true);
        boolean boolean19 = option1.isRequired();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(optionArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String str9 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray10 = commandLine0.getArgs();
        boolean boolean12 = commandLine0.hasOption(' ');
        boolean boolean14 = commandLine0.hasOption('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str9, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption("hi!");
        java.util.List list6 = commandLine0.getArgList();
        commandLine0.addArg("");
        java.lang.String str11 = commandLine0.getOptionValue('a', "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ option: 4  :: null ]" + "'", str11, "[ option: 4  :: null ]");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str15 = option13.getValue("");
        commandLine0.addOption(option13);
        java.util.List list17 = commandLine0.getArgList();
        java.lang.String str19 = commandLine0.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.util.List list89 = options59.getRequiredOptions();
        java.util.Collection collection90 = options59.getOptions();
        java.lang.String str91 = options59.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNotNull(collection90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str91, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        commandLine68.addArg("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        boolean boolean72 = commandLine68.hasOption('\000');
        boolean boolean74 = commandLine68.hasOption('#');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup31 = options28.getOptionGroup(option30);
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        char char34 = option33.getValueSeparator();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        option33.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup40 = options28.getOptionGroup(option33);
        boolean boolean42 = options28.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        option46.setDescription("");
        org.apache.commons.cli.Options options49 = options44.addOption(option46);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine50.getOptionValues("hi!");
        java.lang.String str55 = commandLine50.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str57 = commandLine50.getOptionValue("arg");
        java.lang.String[] strArray58 = commandLine50.getArgs();
        java.lang.String[] strArray60 = posixParser43.flatten(options49, strArray58, false);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser27.parse(options28, strArray60, properties61);
        java.util.List list63 = commandLine62.getArgList();
        boolean boolean64 = option24.equals((java.lang.Object) list63);
        java.lang.String str65 = option24.getOpt();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertTrue("'" + char34 + "' != '" + '\000' + "'", char34 == '\000');
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str55, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "4" + "'", str65, "4");
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        java.lang.Object obj8 = commandLine0.getOptionObject("[ option:    :: null ]");
        java.lang.String str11 = commandLine0.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.lang.String str13 = commandLine0.getOptionValue('4');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]" + "'", str11, "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("", false, "arg");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues("hi!");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options60 = options6.addOption(" ", false, "hi!");
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup64 = options61.getOptionGroup(option63);
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        char char67 = option66.getValueSeparator();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('4');
        option69.setDescription("");
        option66.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup73 = options61.getOptionGroup(option66);
        int int74 = option66.getId();
        org.apache.commons.cli.Option option78 = new org.apache.commons.cli.Option("", false, "");
        org.apache.commons.cli.Option option80 = org.apache.commons.cli.OptionBuilder.create('4');
        option80.setDescription("");
        boolean boolean83 = option80.hasValueSeparator();
        java.util.List list84 = option80.getValuesList();
        int int85 = option80.getArgs();
        option78.setType((java.lang.Object) int85);
        option66.setType((java.lang.Object) int85);
        java.lang.String str89 = option66.getValue(0);
        org.apache.commons.cli.OptionGroup optionGroup90 = options60.getOptionGroup(option66);
        java.util.Collection collection91 = options60.getOptionGroups();
        org.apache.commons.cli.Option option93 = options60.getOption("hi!");
        java.util.List list94 = options60.getRequiredOptions();
        java.util.List list95 = options60.helpOptions();
        org.apache.commons.cli.OptionGroup optionGroup96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options97 = options60.addOptionGroup(optionGroup96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertTrue("'" + char67 + "' != '" + '\000' + "'", char67 == '\000');
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertNotNull(collection91);
        org.junit.Assert.assertNull(option93);
        org.junit.Assert.assertNotNull(list94);
        org.junit.Assert.assertNotNull(list95);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', "[ option: 4  :: null ]");
        java.lang.String[] strArray86 = commandLine81.getArgs();
        commandLine81.addArg("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.util.List list89 = commandLine81.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ option: 4  :: null ]" + "'", str85, "[ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(list89);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options40.addOption("[ option: 4 [ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]  :: null ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        boolean boolean14 = options1.hasOption(" ");
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("");
        org.apache.commons.cli.Options options24 = options19.addOption(option21);
        boolean boolean25 = option21.hasOptionalArg();
        option16.setType((java.lang.Object) boolean25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("");
        org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        org.apache.commons.cli.Options options36 = options31.addOption(option33);
        boolean boolean37 = option33.hasOptionalArg();
        option28.setType((java.lang.Object) boolean37);
        option16.setType((java.lang.Object) boolean37);
        java.lang.String str41 = option16.getValue((int) 'a');
        boolean boolean42 = option16.hasArgs();
        option16.setOptionalArg(true);
        java.lang.String str46 = option16.getValue("");
        org.apache.commons.cli.OptionGroup optionGroup47 = options1.getOptionGroup(option16);
        option16.setLongOpt("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        boolean boolean50 = option16.hasLongOpt();
        java.lang.String str51 = option16.getArgName();
        java.util.List list52 = option16.getValuesList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNotNull(list52);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        org.apache.commons.cli.CommandLine commandLine4 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray6 = commandLine4.getOptionValues("hi!");
        java.lang.String[] strArray7 = commandLine4.getArgs();
        java.lang.String str9 = commandLine4.getOptionValue("hi!");
        boolean boolean11 = commandLine4.hasOption("");
        java.lang.String str14 = commandLine4.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str17 = commandLine4.getOptionValue("[ option:    :: null ]", "[ option: 4  :: null ]");
        option1.setType((java.lang.Object) str17);
        option1.setOptionalArg(false);
        boolean boolean21 = option1.hasOptionalArg();
        option1.setType((java.lang.Object) "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str14, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ option: 4  :: null ]" + "'", str17, "[ option: 4  :: null ]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.Object obj14 = commandLine0.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray15 = commandLine0.getOptions();
        java.lang.Object obj17 = commandLine0.getOptionObject('\000');
        java.lang.String str19 = commandLine0.getOptionValue(' ');
        org.apache.commons.cli.Option[] optionArray20 = commandLine0.getOptions();
        commandLine0.addArg("");
        java.lang.String[] strArray24 = commandLine0.getOptionValues('a');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str12, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(optionArray15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(optionArray20);
        org.junit.Assert.assertNull(strArray24);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        org.apache.commons.cli.Options options47 = options42.addOption(option44);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        char char51 = option50.getValueSeparator();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        option50.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup57 = options48.getOptionGroup(option50);
        option50.setOptionalArg(true);
        int int60 = option50.getId();
        org.apache.commons.cli.OptionGroup optionGroup61 = options47.getOptionGroup(option50);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup65 = options62.getOptionGroup(option64);
        boolean boolean66 = option64.hasLongOpt();
        boolean boolean67 = option64.isRequired();
        org.apache.commons.cli.Options options68 = options47.addOption(option64);
        java.lang.String[] strArray69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser0.parse(options68, strArray69);
        posixParser0.burstToken("[ option: 4  :: org.apache.commons.cli.ParseException: arg ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + char51 + "' != '" + '\000' + "'", char51 == '\000');
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(commandLine70);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        boolean boolean8 = commandLine0.hasOption("");
        boolean boolean10 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option[] optionArray11 = commandLine0.getOptions();
        java.util.Iterator iterator12 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(optionArray11);
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str84 = commandLine81.getOptionValue("[ option:  +ARG ::  ]");
        java.util.List list85 = commandLine81.getArgList();
        commandLine81.addArg("[ Options: [ short {4=[ option: 4  ::  ], arg=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.UnrecognizedOptionException: hi!=[ option: arg org.apache.commons.cli.UnrecognizedOptionException: hi!  ::  ]} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(list85);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        java.util.Collection collection76 = options70.getOptionGroups();
        org.apache.commons.cli.Options options80 = options70.addOption("", false, "arg");
        java.util.Collection collection81 = options70.getOptionGroups();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str85 = option83.getValue("arg");
        java.lang.String str86 = option83.getLongOpt();
        option83.setLongOpt("");
        java.lang.String str90 = option83.getValue("[ option: 4  :: null ]");
        org.apache.commons.cli.Options options91 = options70.addOption(option83);
        int int92 = option83.getId();
        java.util.ListIterator listIterator93 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option83, listIterator93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNotNull(collection76);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "arg" + "'", str85, "arg");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[ option: 4  :: null ]" + "'", str90, "[ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(options91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 52 + "'", int92 == 52);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        commandLine62.addArg("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String str71 = commandLine62.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.String[] strArray72 = commandLine62.getArgs();
        boolean boolean74 = commandLine62.hasOption('=');
        java.lang.String[] strArray75 = commandLine62.getArgs();
        boolean boolean77 = commandLine62.hasOption('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: [ option:    :: null ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues("hi!");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.burstToken("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ]", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption("hi!");
        java.util.List list6 = commandLine0.getArgList();
        java.lang.Object obj8 = commandLine0.getOptionObject("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        commandLine13.addArg("[ option: 4  :: null ::  ]");
        java.util.Iterator iterator16 = commandLine13.iterator();
        java.lang.Object obj18 = commandLine13.getOptionObject("[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        java.util.Iterator iterator19 = commandLine13.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(iterator19);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options43.getOptionGroups();
        org.apache.commons.cli.Options options53 = options43.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean56 = option55.hasOptionalArg();
        org.apache.commons.cli.Options options57 = options43.addOption(option55);
        boolean boolean59 = options43.hasOption("");
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String str72 = commandLine67.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str74 = commandLine67.getOptionValue("arg");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options43, strArray75, false);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: arg", true);
        posixParser0.burstToken("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("", false, "arg");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues("hi!");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options60 = options6.addOption(" ", false, "hi!");
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        boolean boolean67 = option63.hasOptionalArg();
        int int68 = option63.getArgs();
        org.apache.commons.cli.Options options69 = options60.addOption(option63);
        java.util.List list70 = options69.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(list70);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create(' ');
        commandLine0.addOption(option7);
        java.lang.String[] strArray10 = commandLine0.getOptionValues("[ option: 4  :: null ]");
        java.lang.Object obj12 = commandLine0.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray13 = commandLine0.getOptions();
        java.lang.String str16 = commandLine0.getOptionValue('4', "");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(optionArray13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        java.lang.String str71 = options41.toString();
        java.util.List list72 = options41.getRequiredOptions();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str76 = option74.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException78 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean79 = option74.equals((java.lang.Object) "hi!");
        option74.setValueSeparator('=');
        boolean boolean82 = option74.hasValueSeparator();
        option74.setRequired(false);
        org.apache.commons.cli.Options options85 = options41.addOption(option74);
        java.util.List list86 = options41.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "arg" + "'", str76, "arg");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNotNull(list86);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        org.apache.commons.cli.Option option72 = options41.getOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        boolean boolean74 = options41.hasOption("[ option:  +ARG ::  ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNull(option72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.util.Iterator iterator6 = commandLine0.iterator();
        boolean boolean8 = commandLine0.hasOption("");
        boolean boolean10 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option[] optionArray11 = commandLine0.getOptions();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        org.apache.commons.cli.Options options17 = options12.addOption(option14);
        java.util.Collection collection18 = options12.getOptions();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        char char22 = option21.getValueSeparator();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        option21.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup28 = options19.getOptionGroup(option21);
        option21.setOptionalArg(true);
        int int31 = option21.getId();
        org.apache.commons.cli.Options options32 = options12.addOption(option21);
        boolean boolean34 = options32.hasOption("");
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setArgs((int) (short) 100);
        option36.setArgName("[ option: 4  :: null ]");
        java.lang.String str41 = option36.getLongOpt();
        boolean boolean42 = option36.hasLongOpt();
        org.apache.commons.cli.Options options43 = options32.addOption(option36);
        java.lang.String str44 = option36.getLongOpt();
        commandLine0.addOption(option36);
        java.util.Iterator iterator46 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(optionArray11);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(collection18);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertTrue("'" + char22 + "' != '" + '\000' + "'", char22 == '\000');
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(iterator46);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        option28.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues("hi!");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option62.setLongOpt("hi!");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option:  +ARG ::  ]", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "[ option:    :: null ]" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        commandLine96.addArg("org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.lang.String str23 = commandLine21.getOptionValue("[ option:  +ARG ::  ]");
        java.lang.Object obj25 = commandLine21.getOptionObject("");
        java.util.Iterator iterator26 = commandLine21.iterator();
        java.lang.Object obj28 = commandLine21.getOptionObject("[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        java.util.Iterator iterator29 = commandLine21.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(iterator29);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("", false, "arg");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues("hi!");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        boolean boolean52 = option37.hasLongOpt();
        boolean boolean53 = option37.hasArgName();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.lang.String str19 = options13.toString();
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine20.getOptionValues("hi!");
        java.lang.String str25 = commandLine20.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str27 = commandLine20.getOptionValue("arg");
        java.lang.String[] strArray28 = commandLine20.getArgs();
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser0.parse(options13, strArray28, properties29, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        org.apache.commons.cli.Options options37 = options32.addOption(option34);
        java.util.Collection collection38 = options32.getOptionGroups();
        org.apache.commons.cli.Options options42 = options32.addOption("", false, "arg");
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        option48.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup55 = options43.getOptionGroup(option48);
        boolean boolean56 = option48.hasArgName();
        org.apache.commons.cli.Options options57 = options32.addOption(option48);
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        java.util.Collection collection65 = options59.getOptionGroups();
        org.apache.commons.cli.Options options69 = options59.addOption("", false, "arg");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean72 = option71.hasOptionalArg();
        org.apache.commons.cli.Options options73 = options59.addOption(option71);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup78 = options75.getOptionGroup(option77);
        org.apache.commons.cli.CommandLine commandLine79 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray81 = commandLine79.getOptionValues("hi!");
        java.lang.String str84 = commandLine79.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str86 = commandLine79.getOptionValue("arg");
        java.lang.String[] strArray87 = commandLine79.getArgs();
        java.lang.String[] strArray89 = posixParser74.flatten(options75, strArray87, true);
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser58.parse(options73, strArray89, properties90);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser0.parse(options32, strArray89, properties92, true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str19, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str25, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\000' + "'", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(collection65);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str84, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(commandLine94);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str84 = commandLine81.getOptionValue("[ option:  +ARG ::  ]");
        boolean boolean86 = commandLine81.hasOption("[ Options: [ short {=[ option:  +ARG ::  ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        boolean boolean70 = commandLine68.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray72 = commandLine68.getOptionValues("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str76 = option74.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException78 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean79 = option74.equals((java.lang.Object) "hi!");
        java.lang.String str80 = option74.toString();
        option74.setDescription("");
        commandLine68.addOption(option74);
        java.lang.String[] strArray85 = commandLine68.getOptionValues('\000');
        boolean boolean87 = commandLine68.hasOption('#');
        java.lang.String str90 = commandLine68.getOptionValue('a', "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ::  ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "arg" + "'", str76, "arg");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ option: 4  :: null ]" + "'", str80, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ::  ]" + "'", str90, "org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ::  ]");
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options23 = options1.addOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", false, "[ option: 4  :: null ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options23 = options1.addOption(" ", "", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setArgs((int) (short) 100);
        option25.setArgName("[ option: 4  :: null ]");
        java.lang.String str30 = option25.getLongOpt();
        boolean boolean31 = option25.hasLongOpt();
        java.lang.Object obj32 = option25.getType();
        boolean boolean33 = option25.hasLongOpt();
        option25.setLongOpt("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Options options36 = options23.addOption(option25);
        boolean boolean37 = option25.hasArgName();
        option25.setLongOpt("org.apache.commons.cli.ParseException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        org.apache.commons.cli.Options options34 = options29.addOption(option31);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray37 = commandLine35.getOptionValues("hi!");
        java.lang.String[] strArray38 = commandLine35.getArgs();
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser28.parse(options29, strArray38, properties39);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser21.parse(options27, strArray38, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        option48.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup55 = options43.getOptionGroup(option48);
        boolean boolean57 = options43.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues("hi!");
        java.lang.String[] strArray68 = commandLine65.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser58.parse(options59, strArray68, properties69);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser21.parse(options43, strArray68, properties71, true);
        java.lang.String str74 = options43.toString();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("");
        org.apache.commons.cli.Options options81 = options76.addOption(option78);
        java.util.Collection collection82 = options76.getOptions();
        boolean boolean84 = options76.hasOption("arg");
        java.lang.String[] strArray87 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine88 = posixParser75.parse(options76, strArray87);
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options43, strArray87, false);
        java.util.List list91 = commandLine90.getArgList();
        java.lang.String str94 = commandLine90.getOptionValue("a", "4");
        java.lang.String[] strArray95 = commandLine90.getArgs();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\000' + "'", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str74, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNotNull(collection82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(list91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "4" + "'", str94, "4");
        org.junit.Assert.assertNotNull(strArray95);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.util.Iterator iterator8 = commandLine0.iterator();
        java.lang.String str10 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        java.lang.String str13 = commandLine0.getOptionValue('=', "");
        java.lang.String str16 = commandLine0.getOptionValue("org.apache.commons.cli.ParseException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]", "org.apache.commons.cli.MissingOptionException: [ option: 4  :: hi! ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.cli.MissingOptionException: [ option: 4  :: hi! ]" + "'", str16, "org.apache.commons.cli.MissingOptionException: [ option: 4  :: hi! ]");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues("hi!");
        java.lang.String str10 = commandLine5.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str12 = commandLine5.getOptionValue("arg");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options16, strArray31, properties32, false);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup38 = options35.getOptionGroup(option37);
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        char char41 = option40.getValueSeparator();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        option40.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup47 = options35.getOptionGroup(option40);
        boolean boolean49 = options35.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        option52.setArgs((int) '\000');
        org.apache.commons.cli.Options options58 = options35.addOption(option52);
        org.apache.commons.cli.Options options62 = options35.addOption(" ", true, "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray63 = null;
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser0.parse(options62, strArray63, properties64);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str10, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + char41 + "' != '" + '\000' + "'", char41 == '\000');
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(commandLine65);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String str54 = commandLine49.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str56 = commandLine49.getOptionValue("arg");
        java.lang.String[] strArray57 = commandLine49.getArgs();
        java.lang.String[] strArray59 = posixParser42.flatten(options48, strArray57, false);
        boolean boolean61 = options48.hasOption("arg");
        java.util.Collection collection62 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Iterator iterator67 = commandLine63.iterator();
        boolean boolean69 = commandLine63.hasOption("[ option: 4  :: null ]");
        java.lang.String str72 = commandLine63.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray73 = commandLine63.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options48, strArray73, properties74, true);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setOptionalArg(false);
        int int81 = option78.getArgs();
        char char82 = option78.getValueSeparator();
        java.util.ListIterator listIterator83 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option78, listIterator83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str54, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(iterator67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str72, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        java.util.Collection collection64 = options48.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues("hi!");
        java.lang.String str77 = commandLine72.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str79 = commandLine72.getOptionValue("arg");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.lang.String[] strArray82 = posixParser65.flatten(options71, strArray80, false);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options48, strArray80, false);
        java.lang.Object obj86 = commandLine84.getOptionObject("[ option: 4  ::  ]");
        java.lang.Object obj88 = commandLine84.getOptionObject('#');
        boolean boolean90 = commandLine84.hasOption('\000');
        java.lang.Object obj92 = commandLine84.getOptionObject('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str77, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("");
        org.apache.commons.cli.Options options24 = options19.addOption(option21);
        java.util.Collection collection25 = options19.getOptionGroups();
        org.apache.commons.cli.Options options29 = options19.addOption("", false, "arg");
        java.util.List list30 = options29.getRequiredOptions();
        java.lang.String str31 = options29.toString();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        org.apache.commons.cli.Options options37 = options32.addOption(option34);
        char char38 = option34.getValueSeparator();
        option34.setArgName("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.apache.commons.cli.OptionGroup optionGroup41 = options29.getOptionGroup(option34);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        org.apache.commons.cli.Options options47 = options42.addOption(option44);
        java.util.Collection collection48 = options42.getOptionGroups();
        org.apache.commons.cli.Options options52 = options42.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean55 = option54.hasOptionalArg();
        org.apache.commons.cli.Options options56 = options42.addOption(option54);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create('4');
        char char59 = option58.getValueSeparator();
        boolean boolean60 = option58.hasArg();
        java.lang.String str61 = option58.getValue();
        java.lang.String str63 = option58.getValue((int) ' ');
        org.apache.commons.cli.OptionGroup optionGroup64 = options42.getOptionGroup(option58);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("");
        org.apache.commons.cli.Options options70 = options65.addOption(option67);
        option67.setArgName("");
        org.apache.commons.cli.Options options73 = options42.addOption(option67);
        boolean boolean74 = option34.equals((java.lang.Object) option67);
        java.util.ListIterator listIterator75 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option34, listIterator75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(collection25);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str31, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertTrue("'" + char38 + "' != '" + '\000' + "'", char38 == '\000');
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertTrue("'" + char59 + "' != '" + '\000' + "'", char59 == '\000');
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        char char5 = option4.getValueSeparator();
        boolean boolean6 = option4.hasArg();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.String str9 = option4.getValue(0);
        java.lang.String[] strArray10 = option4.getValues();
        int int11 = option4.getId();
        commandLine0.addOption(option4);
        int int13 = option4.getArgs();
        boolean boolean14 = option4.hasValueSeparator();
        java.lang.Class<?> wildcardClass15 = option4.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        boolean boolean71 = options41.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.List list72 = options41.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(list72);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean9 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("");
        java.lang.Object obj13 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        option41.setValueSeparator('4');
        commandLine0.addOption(option41);
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setArgs((int) (short) 100);
        option53.setArgName("[ option: 4  :: null ]");
        java.lang.String str58 = option53.getLongOpt();
        boolean boolean59 = option53.hasLongOpt();
        java.lang.Object obj60 = option53.getType();
        commandLine0.addOption(option53);
        option53.setRequired(true);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option26.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        java.util.Collection collection43 = options37.getOptionGroups();
        org.apache.commons.cli.Options options47 = options37.addOption("", false, "arg");
        java.lang.String str48 = options47.toString();
        org.apache.commons.cli.Option option50 = options47.getOption("[ option: 4 hi!  ::  ]");
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        option54.setDescription("");
        org.apache.commons.cli.Options options57 = options52.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues("hi!");
        java.lang.String[] strArray68 = commandLine65.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser58.parse(options59, strArray68, properties69);
        org.apache.commons.cli.CommandLine commandLine72 = posixParser51.parse(options57, strArray68, false);
        java.lang.String str74 = commandLine72.getOptionValue("[ option:  +ARG ::  ]");
        java.lang.Object obj76 = commandLine72.getOptionObject("");
        java.util.Iterator iterator77 = commandLine72.iterator();
        java.lang.Object obj79 = commandLine72.getOptionObject("[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        boolean boolean81 = commandLine72.hasOption("[ option: arg [ option: 4  :: null ] +ARG :: 4 ]");
        java.lang.String[] strArray82 = commandLine72.getArgs();
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options47, strArray82, properties83);
        org.apache.commons.cli.OptionGroup optionGroup85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options86 = options47.addOptionGroup(optionGroup85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(collection43);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str48, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(iterator77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.util.Iterator iterator89 = commandLine88.iterator();
        java.lang.Object obj91 = commandLine88.getOptionObject('4');
        java.lang.String str94 = commandLine88.getOptionValue('4', "[ option: 4  ::  :: [] ]");
        java.lang.String[] strArray96 = commandLine88.getOptionValues("[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ option: 4  ::  :: [] ]" + "'", str94, "[ option: 4  ::  :: [] ]");
        org.junit.Assert.assertNull(strArray96);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        java.lang.Object obj4 = commandLine0.getOptionObject('4');
        java.lang.String str7 = commandLine0.getOptionValue('#', "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str9 = commandLine0.getOptionValue("org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str7, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean65 = options51.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        option68.setArgs((int) '\000');
        org.apache.commons.cli.Options options74 = options51.addOption(option68);
        org.apache.commons.cli.Option option76 = options74.getOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection77 = options74.getOptions();
        java.lang.String[] strArray78 = null;
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options74, strArray78, properties79, true);
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str85 = option83.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException87 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean88 = option83.equals((java.lang.Object) "hi!");
        option83.setValueSeparator('=');
        boolean boolean91 = option83.hasLongOpt();
        java.lang.String str93 = option83.getValue("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.ListIterator listIterator94 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option83, listIterator94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(option76);
        org.junit.Assert.assertNotNull(collection77);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "arg" + "'", str85, "arg");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str93, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.lang.String str23 = commandLine21.getOptionValue("[ option:  +ARG ::  ]");
        java.lang.Object obj25 = commandLine21.getOptionObject("");
        java.lang.Object obj27 = commandLine21.getOptionObject('=');
        java.lang.String[] strArray29 = commandLine21.getOptionValues("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(strArray29);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create('4');
        option13.setDescription("");
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        boolean boolean22 = option13.equals((java.lang.Object) option18);
        option18.setDescription("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine0.addOption(option18);
        java.lang.String str26 = option18.getDescription();
        java.lang.String str27 = option18.getLongOpt();
        java.lang.String str28 = option18.getKey();
        java.lang.Object obj29 = option18.getType();
        int int30 = option18.getArgs();
        option18.setArgs((int) (byte) 0);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str26, "[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "4" + "'", str28, "4");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str12 = commandLine0.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option: 4  :: null ]");
        java.lang.String[] strArray14 = commandLine0.getOptionValues('=');
        java.lang.String[] strArray16 = commandLine0.getOptionValues("[ option: 4  :: null ::  ]");
        boolean boolean18 = commandLine0.hasOption('#');
        java.lang.Object obj20 = commandLine0.getOptionObject('#');
        java.lang.Object obj22 = commandLine0.getOptionObject(' ');
        java.lang.String[] strArray24 = commandLine0.getOptionValues('\000');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ option: 4  :: null ]" + "'", str12, "[ option: 4  :: null ]");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(strArray24);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String str75 = commandLine70.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str77 = commandLine70.getOptionValue("arg");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        java.lang.Object obj84 = commandLine82.getOptionObject(' ');
        java.lang.Object obj86 = commandLine82.getOptionObject("[ option: 4  :: null ::  ]");
        java.lang.String str89 = commandLine82.getOptionValue('a', "[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        java.util.Iterator iterator90 = commandLine82.iterator();
        java.lang.Object obj92 = commandLine82.getOptionObject(' ');
        boolean boolean94 = commandLine82.hasOption("[ option: 4  :: org.apache.commons.cli.ParseException: arg ]");
        java.lang.Object obj96 = commandLine82.getOptionObject('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str75, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]" + "'", str89, "[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(iterator90);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.Collection collection57 = options51.getOptionGroups();
        java.util.Collection collection58 = options51.getOptionGroups();
        java.util.Collection collection59 = options51.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String str72 = commandLine67.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str74 = commandLine67.getOptionValue("arg");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options51, strArray77, properties78);
        posixParser0.burstToken("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String str54 = commandLine49.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str56 = commandLine49.getOptionValue("arg");
        java.lang.String[] strArray57 = commandLine49.getArgs();
        java.lang.String[] strArray59 = posixParser42.flatten(options48, strArray57, false);
        boolean boolean61 = options48.hasOption("arg");
        java.util.Collection collection62 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Iterator iterator67 = commandLine63.iterator();
        boolean boolean69 = commandLine63.hasOption("[ option: 4  :: null ]");
        java.lang.String str72 = commandLine63.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray73 = commandLine63.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options48, strArray73, properties74, true);
        posixParser0.burstToken("[ option: 4  :: [ option:    :: [ option: 4 hi!  ::  ] ] ]", true);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        char char82 = option81.getValueSeparator();
        boolean boolean83 = option81.hasArg();
        boolean boolean84 = option81.hasOptionalArg();
        java.lang.Object obj85 = option81.getType();
        option81.setValueSeparator('#');
        option81.setRequired(false);
        java.util.ListIterator listIterator90 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option81, listIterator90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str54, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(iterator67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str72, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean37 = option36.isRequired();
        org.apache.commons.cli.Options options38 = options22.addOption(option36);
        java.util.List list39 = options38.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup44 = options41.getOptionGroup(option43);
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        char char47 = option46.getValueSeparator();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create('4');
        option49.setDescription("");
        option46.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup53 = options41.getOptionGroup(option46);
        boolean boolean55 = options41.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        java.lang.String[] strArray73 = posixParser56.flatten(options62, strArray71, false);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser40.parse(options41, strArray73, properties74);
        java.util.List list76 = commandLine75.getArgList();
        java.lang.String[] strArray77 = commandLine75.getArgs();
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options38, strArray77, properties78, false);
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup84 = options81.getOptionGroup(option83);
        boolean boolean85 = option83.hasLongOpt();
        boolean boolean86 = option83.isRequired();
        java.util.List list87 = option83.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup88 = options38.getOptionGroup(option83);
        java.lang.String str89 = option83.getArgName();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '\000' + "'", char47 == '\000');
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(list87);
        org.junit.Assert.assertNull(optionGroup88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "arg" + "'", str89, "arg");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup58 = options55.getOptionGroup(option57);
        org.apache.commons.cli.Option option60 = options55.getOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.List list61 = options55.helpOptions();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues("hi!");
        java.lang.String str67 = commandLine62.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str69 = commandLine62.getOptionValue("arg");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser0.parse(options55, strArray70, properties71, true);
        java.lang.String str76 = commandLine73.getOptionValue('4', "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.lang.Object obj78 = commandLine73.getOptionObject('\000');
        java.lang.String[] strArray79 = commandLine73.getArgs();
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup83 = options80.getOptionGroup(option82);
        java.util.List list84 = option82.getValuesList();
        option82.setOptionalArg(false);
        java.lang.String[] strArray87 = option82.getValues();
        commandLine73.addOption(option82);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNull(optionGroup58);
        org.junit.Assert.assertNull(option60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str67, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str76, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup83);
        org.junit.Assert.assertNotNull(list84);
        org.junit.Assert.assertNull(strArray87);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options23 = options1.addOption(" ", "", true, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.Collection collection24 = options1.getOptionGroups();
        org.apache.commons.cli.OptionGroup optionGroup25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options26 = options1.addOptionGroup(optionGroup25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str13 = commandLine0.getOptionValue("[ option: 4  :: null ::  ]");
        java.util.Iterator iterator14 = commandLine0.iterator();
        boolean boolean16 = commandLine0.hasOption('=');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: hi!", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        option41.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option41);
        boolean boolean49 = option41.hasValueSeparator();
        java.lang.String str50 = option41.toString();
        java.lang.String str51 = option41.getDescription();
        java.util.ListIterator listIterator52 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option41, listIterator52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str50, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.Iterator iterator87 = commandLine86.iterator();
        java.util.List list88 = commandLine86.getArgList();
        java.lang.String str90 = commandLine86.getOptionValue("[ option: 4  ::  ]");
        java.lang.Class<?> wildcardClass91 = commandLine86.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.util.Iterator iterator87 = commandLine86.iterator();
        org.apache.commons.cli.Option option89 = org.apache.commons.cli.OptionBuilder.create('4');
        option89.setArgName("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        commandLine86.addOption(option89);
        java.util.Iterator iterator93 = commandLine86.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNotNull(option89);
        org.junit.Assert.assertNotNull(iterator93);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        posixParser0.burstToken("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]", false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        java.util.Collection collection28 = options22.getOptionGroups();
        org.apache.commons.cli.Options options32 = options22.addOption("", false, "arg");
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean37 = option36.hasOptionalArg();
        option36.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup40 = options32.getOptionGroup(option36);
        option36.setOptionalArg(false);
        java.util.ListIterator listIterator43 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option36, listIterator43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(optionGroup40);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        option28.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues("hi!");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option62.setLongOpt("hi!");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option:  +ARG ::  ]", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "[ option:    :: null ]" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        org.apache.commons.cli.Option option97 = null;
        java.util.ListIterator listIterator98 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option97, listIterator98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator1 = commandLine0.iterator();
        java.util.Iterator iterator2 = commandLine0.iterator();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option5 = org.apache.commons.cli.OptionBuilder.create('4');
        option5.setDescription("");
        org.apache.commons.cli.Options options8 = options3.addOption(option5);
        char char9 = option5.getValueSeparator();
        boolean boolean10 = option5.hasArg();
        java.lang.String str11 = option5.getLongOpt();
        int int12 = option5.getId();
        java.lang.String[] strArray13 = option5.getValues();
        commandLine0.addOption(option5);
        java.util.Iterator iterator15 = commandLine0.iterator();
        java.lang.String[] strArray17 = commandLine0.getOptionValues("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]");
        org.junit.Assert.assertNotNull(iterator1);
        org.junit.Assert.assertNotNull(iterator2);
        org.junit.Assert.assertNotNull(option5);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNull(strArray17);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        boolean boolean6 = option2.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        java.util.Collection collection14 = options8.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String str20 = commandLine15.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str22 = commandLine15.getOptionValue("arg");
        java.lang.String[] strArray23 = commandLine15.getArgs();
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser7.parse(options8, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        org.apache.commons.cli.Options options32 = options27.addOption(option29);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser26.parse(options27, strArray36, properties37);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        char char46 = option45.getValueSeparator();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("");
        option45.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup52 = options40.getOptionGroup(option45);
        boolean boolean54 = options40.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create('4');
        option58.setDescription("");
        org.apache.commons.cli.Options options61 = options56.addOption(option58);
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues("hi!");
        java.lang.String str67 = commandLine62.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str69 = commandLine62.getOptionValue("arg");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.lang.String[] strArray72 = posixParser55.flatten(options61, strArray70, false);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser39.parse(options40, strArray72, properties73);
        java.util.List list75 = commandLine74.getArgList();
        java.lang.String[] strArray76 = commandLine74.getArgs();
        java.lang.String[] strArray78 = posixParser7.flatten(options27, strArray76, false);
        boolean boolean79 = option2.equals((java.lang.Object) strArray76);
        int int80 = option2.getId();
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues("hi!");
        java.lang.String str86 = commandLine81.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine81.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray90 = commandLine81.getOptionValues("[ option:    :: null ]");
        option2.setType((java.lang.Object) commandLine81);
        java.lang.String str92 = option2.getOpt();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(collection14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + '\000' + "'", char46 == '\000');
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str67, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str86, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "4" + "'", str92, "4");
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        posixParser0.burstToken("[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]", false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        java.util.Collection collection28 = options22.getOptionGroups();
        org.apache.commons.cli.Options options32 = options22.addOption("", false, "arg");
        java.util.List list33 = options32.getRequiredOptions();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options36 = options32.addOption(option35);
        java.util.Collection collection37 = options32.getOptionGroups();
        java.util.List list38 = options32.helpOptions();
        java.util.List list39 = options32.helpOptions();
        java.util.Collection collection40 = options32.getOptions();
        org.apache.commons.cli.Option option42 = options32.getOption("");
        boolean boolean44 = options32.hasOption("[ option: 4 hi!  ::  ]");
        boolean boolean46 = options32.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray47 = null;
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options32, strArray47, properties48, false);
        java.lang.String str51 = options32.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str51, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]");
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        java.util.Collection collection35 = options22.getOptions();
        java.lang.String[] strArray36 = null;
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options22, strArray36, properties37, false);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        boolean boolean46 = option42.hasValueSeparator();
        java.lang.String str47 = option42.toString();
        java.util.ListIterator listIterator48 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option42, listIterator48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[ option: 4  ::  ]" + "'", str47, "[ option: 4  ::  ]");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.lang.String str84 = commandLine81.getOptionValue('a', "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.apache.commons.cli.Option option89 = new org.apache.commons.cli.Option("arg", "4", false, "");
        commandLine81.addOption(option89);
        java.lang.String str91 = option89.getKey();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str84, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "arg" + "'", str91, "arg");
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        java.lang.String str70 = options38.toString();
        java.util.Collection collection71 = options38.getOptionGroups();
        java.lang.String str72 = options38.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        java.lang.String str9 = commandLine0.getOptionValue(" ");
        java.lang.String[] strArray11 = commandLine0.getOptionValues('#');
        commandLine0.addArg("[ Options: [ short {=[ option:  +ARG ::  ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strArray11);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("");
        org.apache.commons.cli.Options options24 = options19.addOption(option21);
        char char25 = option21.getValueSeparator();
        option21.setArgName("[ option: 4 hi!  ::  ]");
        java.util.ListIterator listIterator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option21, listIterator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        java.lang.String str6 = option1.getLongOpt();
        java.lang.String str8 = option1.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.lang.String str14 = commandLine9.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str16 = commandLine9.getOptionValue("arg");
        java.lang.String[] strArray17 = commandLine9.getArgs();
        option1.setType((java.lang.Object) strArray17);
        java.lang.String str20 = option1.getValue((int) 'a');
        java.lang.String str22 = option1.getValue("[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        org.apache.commons.cli.OptionBuilder optionBuilder23 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str14, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]" + "'", str22, "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]");
        org.junit.Assert.assertNotNull(optionBuilder23);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: hi!", false);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues("hi!");
        java.lang.String str51 = commandLine46.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str53 = commandLine46.getOptionValue("arg");
        java.lang.String[] strArray54 = commandLine46.getArgs();
        java.lang.String[] strArray56 = posixParser39.flatten(options45, strArray54, false);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        java.util.Collection collection63 = options57.getOptionGroups();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        option65.setLongOpt("hi!");
        boolean boolean70 = option65.hasArgName();
        org.apache.commons.cli.Options options71 = options57.addOption(option65);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues("hi!");
        java.lang.String[] strArray75 = commandLine72.getArgs();
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser39.parse(options57, strArray75, properties76, true);
        boolean boolean80 = options57.hasOption("[ option: 4  :: org.apache.commons.cli.ParseException: arg ]");
        java.lang.String[] strArray81 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser0.parse(options57, strArray81, true);
        boolean boolean85 = commandLine83.hasOption("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str51, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.Collection collection52 = options39.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options39, strArray53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.List list61 = option57.getValuesList();
        java.lang.String str62 = option57.getOpt();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create("arg");
        java.lang.String str65 = option64.getOpt();
        boolean boolean66 = option64.isRequired();
        boolean boolean67 = option57.equals((java.lang.Object) option64);
        org.apache.commons.cli.Options options68 = options39.addOption(option57);
        java.lang.String str69 = option57.getDescription();
        char char70 = option57.getValueSeparator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "4" + "'", str62, "4");
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "arg" + "'", str65, "arg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + char70 + "' != '" + '\000' + "'", char70 == '\000');
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Options options10 = options0.addOption("", false, "arg");
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean15 = option14.hasOptionalArg();
        option14.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup18 = options10.getOptionGroup(option14);
        java.lang.String str20 = option14.getValue("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]");
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String str49 = commandLine44.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str51 = commandLine44.getOptionValue("arg");
        java.lang.String[] strArray52 = commandLine44.getArgs();
        java.lang.String[] strArray54 = posixParser37.flatten(options43, strArray52, false);
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser21.parse(options22, strArray54, properties55);
        posixParser21.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser21.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        boolean boolean63 = option14.equals((java.lang.Object) posixParser21);
        java.lang.String str64 = option14.getLongOpt();
        java.lang.String str65 = option14.getOpt();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(optionGroup18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]" + "'", str20, "[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]");
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str49, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        org.apache.commons.cli.Options options47 = options42.addOption(option44);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        char char51 = option50.getValueSeparator();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        option50.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup57 = options48.getOptionGroup(option50);
        option50.setOptionalArg(true);
        int int60 = option50.getId();
        org.apache.commons.cli.OptionGroup optionGroup61 = options47.getOptionGroup(option50);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup65 = options62.getOptionGroup(option64);
        boolean boolean66 = option64.hasLongOpt();
        boolean boolean67 = option64.isRequired();
        org.apache.commons.cli.Options options68 = options47.addOption(option64);
        java.lang.String[] strArray69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser0.parse(options68, strArray69);
        org.apache.commons.cli.OptionGroup optionGroup71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options72 = options68.addOptionGroup(optionGroup71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + char51 + "' != '" + '\000' + "'", char51 == '\000');
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(commandLine70);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: hi!", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptionGroups();
        org.apache.commons.cli.Options options49 = options39.addOption("", false, "arg");
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean52 = option51.hasOptionalArg();
        org.apache.commons.cli.Options options53 = options39.addOption(option51);
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        org.apache.commons.cli.PosixParser posixParser61 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        org.apache.commons.cli.CommandLine commandLine68 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray70 = commandLine68.getOptionValues("hi!");
        java.lang.String[] strArray71 = commandLine68.getArgs();
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser61.parse(options62, strArray71, properties72);
        org.apache.commons.cli.CommandLine commandLine75 = posixParser54.parse(options60, strArray71, false);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options53, strArray71);
        java.util.List list77 = options53.helpOptions();
        java.util.Collection collection78 = options53.getOptionGroups();
        org.apache.commons.cli.OptionBuilder optionBuilder79 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) collection78);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertNotNull(collection78);
        org.junit.Assert.assertNotNull(optionBuilder79);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String str5 = commandLine0.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str7 = commandLine0.getOptionValue("arg");
        java.lang.String str9 = commandLine0.getOptionValue('a');
        java.lang.String str12 = commandLine0.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        char char15 = option14.getValueSeparator();
        boolean boolean16 = option14.hasArg();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        java.lang.String str20 = option14.getValue((int) (short) 100);
        int int21 = option14.getArgs();
        commandLine0.addOption(option14);
        java.lang.String[] strArray23 = commandLine0.getArgs();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str5, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str12, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strArray23);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = null;
        org.apache.commons.cli.PosixParser posixParser14 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("");
        org.apache.commons.cli.Options options20 = options15.addOption(option17);
        org.apache.commons.cli.CommandLine commandLine21 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray23 = commandLine21.getOptionValues("hi!");
        java.lang.String str26 = commandLine21.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str28 = commandLine21.getOptionValue("arg");
        java.lang.String[] strArray29 = commandLine21.getArgs();
        java.lang.String[] strArray31 = posixParser14.flatten(options20, strArray29, false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        org.apache.commons.cli.Options options37 = options32.addOption(option34);
        java.util.Collection collection38 = options32.getOptionGroups();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        option40.setLongOpt("hi!");
        boolean boolean45 = option40.hasArgName();
        org.apache.commons.cli.Options options46 = options32.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues("hi!");
        java.lang.String[] strArray50 = commandLine47.getArgs();
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser14.parse(options32, strArray50, properties51, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options13, strArray50, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNull(strArray23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str26, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        java.util.Collection collection42 = options36.getOptionGroups();
        org.apache.commons.cli.Options options46 = options36.addOption("", false, "arg");
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean49 = option48.hasOptionalArg();
        org.apache.commons.cli.Options options50 = options36.addOption(option48);
        boolean boolean52 = options36.hasOption("");
        java.lang.String str53 = options36.toString();
        java.util.Collection collection54 = options36.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues("hi!");
        java.lang.String[] strArray58 = commandLine55.getArgs();
        java.lang.String str60 = commandLine55.getOptionValue("hi!");
        boolean boolean62 = commandLine55.hasOption("");
        java.lang.String str65 = commandLine55.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray67 = commandLine55.getOptionValues('4');
        java.lang.String[] strArray68 = commandLine55.getArgs();
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options36, strArray68);
        java.lang.Class<?> wildcardClass70 = options36.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str53, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str65, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: hi!", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        boolean boolean53 = options39.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        boolean boolean55 = options39.hasOption("[ option: 4  :: null ::  ]");
        java.lang.String[] strArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray58 = posixParser0.flatten(options39, strArray56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String str75 = commandLine70.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str77 = commandLine70.getOptionValue("arg");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str86 = option84.getValue("arg");
        java.lang.String str87 = option84.getLongOpt();
        option84.setLongOpt("");
        option84.setArgName("");
        commandLine82.addOption(option84);
        java.lang.String[] strArray94 = commandLine82.getOptionValues('=');
        java.util.Iterator iterator95 = commandLine82.iterator();
        java.lang.Object obj97 = commandLine82.getOptionObject('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str75, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "arg" + "'", str86, "arg");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(strArray94);
        org.junit.Assert.assertNotNull(iterator95);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setArgs((int) (short) 100);
        option72.setArgName("[ option: 4  :: null ]");
        java.lang.String str77 = option72.getLongOpt();
        boolean boolean78 = option72.hasLongOpt();
        java.lang.Object obj79 = option72.getType();
        int int80 = option72.getId();
        java.lang.String str81 = option72.getArgName();
        org.apache.commons.cli.Options options82 = options41.addOption(option72);
        option72.setOptionalArg(true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ option: 4  :: null ]" + "'", str81, "[ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(options82);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        java.lang.String str27 = option24.getValue();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str3 = option1.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException5 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean6 = option1.equals((java.lang.Object) "hi!");
        java.lang.String str7 = option1.toString();
        boolean boolean8 = option1.isRequired();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.lang.String[] strArray12 = commandLine9.getArgs();
        java.lang.String str14 = commandLine9.getOptionValue('\000');
        java.lang.Object obj16 = commandLine9.getOptionObject("");
        java.lang.String[] strArray18 = commandLine9.getOptionValues('\000');
        java.lang.String str20 = commandLine9.getOptionValue('\000');
        java.lang.String str23 = commandLine9.getOptionValue('=', "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        boolean boolean25 = commandLine9.hasOption('=');
        option1.setType((java.lang.Object) boolean25);
        option1.setDescription("[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[ option: 4  :: null ]" + "'", str7, "[ option: 4  :: null ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]" + "'", str23, "[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("");
        java.util.List list8 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(list8);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        java.lang.String str6 = option1.getLongOpt();
        boolean boolean7 = option1.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray24 = commandLine22.getOptionValues("hi!");
        java.lang.String[] strArray25 = commandLine22.getArgs();
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser15.parse(options16, strArray25, properties26);
        org.apache.commons.cli.CommandLine commandLine29 = posixParser8.parse(options14, strArray25, false);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup33 = options30.getOptionGroup(option32);
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        char char36 = option35.getValueSeparator();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        option35.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup42 = options30.getOptionGroup(option35);
        boolean boolean44 = options30.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("");
        org.apache.commons.cli.Options options51 = options46.addOption(option48);
        org.apache.commons.cli.CommandLine commandLine52 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine52.getOptionValues("hi!");
        java.lang.String[] strArray55 = commandLine52.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser45.parse(options46, strArray55, properties56);
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser8.parse(options30, strArray55, properties58, true);
        java.util.Collection collection61 = options30.getOptionGroups();
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('4');
        option64.setDescription("");
        org.apache.commons.cli.Options options67 = options62.addOption(option64);
        java.util.Collection collection68 = options62.getOptionGroups();
        org.apache.commons.cli.Options options72 = options62.addOption("", false, "arg");
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup76 = options73.getOptionGroup(option75);
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        char char79 = option78.getValueSeparator();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('4');
        option81.setDescription("");
        option78.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup85 = options73.getOptionGroup(option78);
        boolean boolean86 = option78.hasArgName();
        org.apache.commons.cli.Options options87 = options62.addOption(option78);
        org.apache.commons.cli.Options options88 = options30.addOption(option78);
        boolean boolean89 = option1.equals((java.lang.Object) options30);
        java.lang.String str91 = option1.getValue((int) 'a');
        boolean boolean92 = option1.isRequired();
        option1.setDescription("[ option: arg  :: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ] ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertTrue("'" + char36 + "' != '" + '\000' + "'", char36 == '\000');
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + char79 + "' != '" + '\000' + "'", char79 == '\000');
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(options87);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup16 = options13.getOptionGroup(option15);
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        char char19 = option18.getValueSeparator();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create('4');
        option21.setDescription("");
        option18.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup25 = options13.getOptionGroup(option18);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean28 = option27.isRequired();
        org.apache.commons.cli.Options options29 = options13.addOption(option27);
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        char char32 = option31.getValueSeparator();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        option31.setType((java.lang.Object) "");
        boolean boolean38 = option31.isRequired();
        java.lang.String str39 = option31.getKey();
        boolean boolean40 = option31.isRequired();
        java.lang.Object obj41 = option31.getType();
        org.apache.commons.cli.Options options42 = options29.addOption(option31);
        java.lang.String[] strArray43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser0.parse(options42, strArray43);
        boolean boolean46 = commandLine44.hasOption("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        java.lang.String str48 = commandLine44.getOptionValue('#');
        org.apache.commons.cli.Option[] optionArray49 = commandLine44.getOptions();
        java.lang.String str52 = commandLine44.getOptionValue("[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]", "[ option: 4   :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNull(optionGroup16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + '\000' + "'", char19 == '\000');
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\000' + "'", char32 == '\000');
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "4" + "'", str39, "4");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + "" + "'", obj41, "");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(optionArray49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ option: 4   :: null ]" + "'", str52, "[ option: 4   :: null ]");
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        option1.setOptionalArg(true);
        java.lang.String str4 = option1.getDescription();
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create('4');
        option8.setDescription("");
        org.apache.commons.cli.Options options11 = options6.addOption(option8);
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray21 = commandLine19.getOptionValues("hi!");
        java.lang.String[] strArray22 = commandLine19.getArgs();
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser12.parse(options13, strArray22, properties23);
        org.apache.commons.cli.CommandLine commandLine26 = posixParser5.parse(options11, strArray22, false);
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup30 = options27.getOptionGroup(option29);
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create('4');
        char char33 = option32.getValueSeparator();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        option35.setDescription("");
        option32.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup39 = options27.getOptionGroup(option32);
        boolean boolean41 = options27.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser42.parse(options43, strArray52, properties53);
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser5.parse(options27, strArray52, properties55, true);
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        option60.setDescription("");
        org.apache.commons.cli.Options options63 = options58.addOption(option60);
        java.util.Collection collection64 = options58.getOptions();
        java.lang.String[] strArray65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser5.parse(options58, strArray65, true);
        java.lang.String str69 = commandLine67.getOptionValue('\000');
        java.lang.Object obj71 = commandLine67.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray72 = commandLine67.getOptions();
        java.lang.String[] strArray73 = commandLine67.getArgs();
        java.lang.Object obj75 = commandLine67.getOptionObject("");
        java.lang.String str77 = commandLine67.getOptionValue('#');
        commandLine67.addArg("org.apache.commons.cli.ParseException: [ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]");
        boolean boolean80 = option1.equals((java.lang.Object) "org.apache.commons.cli.ParseException: [ option:   [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup30);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertTrue("'" + char33 + "' != '" + '\000' + "'", char33 == '\000');
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(optionArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        java.lang.String[] strArray13 = commandLine0.getArgs();
        java.lang.String str16 = commandLine0.getOptionValue('\000', "");
        java.lang.String str18 = commandLine0.getOptionValue('a');
        commandLine0.addArg("[ option:  +ARG ::  :: [] ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String[] strArray84 = commandLine81.getOptionValues("[ option: 4  :: null ]");
        java.util.Iterator iterator85 = commandLine81.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNull(strArray84);
        org.junit.Assert.assertNotNull(iterator85);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        java.lang.String str45 = commandLine39.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list46 = commandLine39.getArgList();
        boolean boolean48 = commandLine39.hasOption("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]");
        org.apache.commons.cli.Option option49 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine39.addOption(option49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.Object obj6 = commandLine0.getOptionObject('#');
        java.lang.String str9 = commandLine0.getOptionValue('a', "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray10 = commandLine0.getArgs();
        org.apache.commons.cli.OptionBuilder optionBuilder11 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) strArray10);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str9, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(optionBuilder11);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean9 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("");
        java.lang.Object obj13 = commandLine0.getOptionObject('a');
        java.lang.String str16 = commandLine0.getOptionValue("[ option:  +ARG ::  :: [] ]", "[ option: 4  :: null ::  ]");
        java.util.List list17 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str16, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNotNull(list17);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        boolean boolean70 = commandLine68.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.Object obj72 = commandLine68.getOptionObject('4');
        java.util.Iterator iterator73 = commandLine68.iterator();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(iterator73);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        option16.setDescription("");
        org.apache.commons.cli.Options options19 = options14.addOption(option16);
        java.util.Collection collection20 = options14.getOptionGroups();
        org.apache.commons.cli.Options options24 = options14.addOption("", false, "arg");
        java.util.List list25 = options24.getRequiredOptions();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options28 = options24.addOption(option27);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setArgs((int) (short) 100);
        option30.setArgName("[ option: 4  :: null ]");
        java.lang.String str35 = option30.getLongOpt();
        java.lang.String str37 = option30.getValue((int) (short) -1);
        org.apache.commons.cli.Options options38 = options28.addOption(option30);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        boolean boolean43 = option41.hasLongOpt();
        boolean boolean44 = option41.isRequired();
        java.util.List list45 = option41.getValuesList();
        option41.setDescription("[ option: 4  ::  ]");
        org.apache.commons.cli.Options options48 = options38.addOption(option41);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options38, strArray64, true);
        commandLine68.addArg("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.String str72 = commandLine68.getOptionValue("");
        java.lang.String[] strArray73 = commandLine68.getArgs();
        java.lang.String[] strArray75 = commandLine68.getOptionValues('\000');
        java.lang.String str77 = commandLine68.getOptionValue('4');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNull(strArray75);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        boolean boolean20 = options1.hasOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.List list21 = options1.getRequiredOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(list21);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.util.List list70 = options41.helpOptions();
        org.apache.commons.cli.Option option72 = options41.getOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options76 = options41.addOption("hi!", true, "[ Options: [ short {=[ option:  +ARG :: hi! ], 4=[ option: 4  :: null ::  ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '!'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNull(option72);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        boolean boolean6 = option2.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        java.util.Collection collection14 = options8.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String str20 = commandLine15.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str22 = commandLine15.getOptionValue("arg");
        java.lang.String[] strArray23 = commandLine15.getArgs();
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser7.parse(options8, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        org.apache.commons.cli.Options options32 = options27.addOption(option29);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser26.parse(options27, strArray36, properties37);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        char char46 = option45.getValueSeparator();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        option48.setDescription("");
        option45.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup52 = options40.getOptionGroup(option45);
        boolean boolean54 = options40.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create('4');
        option58.setDescription("");
        org.apache.commons.cli.Options options61 = options56.addOption(option58);
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine62.getOptionValues("hi!");
        java.lang.String str67 = commandLine62.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str69 = commandLine62.getOptionValue("arg");
        java.lang.String[] strArray70 = commandLine62.getArgs();
        java.lang.String[] strArray72 = posixParser55.flatten(options61, strArray70, false);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser39.parse(options40, strArray72, properties73);
        java.util.List list75 = commandLine74.getArgList();
        java.lang.String[] strArray76 = commandLine74.getArgs();
        java.lang.String[] strArray78 = posixParser7.flatten(options27, strArray76, false);
        boolean boolean79 = option2.equals((java.lang.Object) strArray76);
        int int80 = option2.getId();
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine81.getOptionValues("hi!");
        java.lang.String str86 = commandLine81.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine81.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray90 = commandLine81.getOptionValues("[ option:    :: null ]");
        option2.setType((java.lang.Object) commandLine81);
        java.util.Iterator iterator92 = commandLine81.iterator();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(collection14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + '\000' + "'", char46 == '\000');
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str67, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str86, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNotNull(iterator92);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.lang.String[] strArray89 = commandLine86.getArgs();
        java.lang.Object obj91 = commandLine86.getOptionObject(' ');
        java.lang.String[] strArray93 = commandLine86.getOptionValues(' ');
        commandLine86.addArg("org.apache.commons.cli.UnrecognizedOptionException: [ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(strArray93);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptionGroups();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        org.apache.commons.cli.Options options28 = options23.addOption(option25);
        java.util.Collection collection29 = options23.getOptionGroups();
        org.apache.commons.cli.Options options33 = options23.addOption("", false, "arg");
        java.util.Collection collection34 = options23.getOptionGroups();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        option37.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options23.getOptionGroup(option37);
        option37.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine46.getOptionValues("hi!");
        java.lang.String[] strArray49 = commandLine46.getArgs();
        boolean boolean50 = option37.equals((java.lang.Object) strArray49);
        org.apache.commons.cli.OptionGroup optionGroup51 = options6.getOptionGroup(option37);
        org.apache.commons.cli.Options options56 = options6.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options60 = options6.addOption(" ", false, "hi!");
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        boolean boolean67 = option63.hasOptionalArg();
        int int68 = option63.getArgs();
        org.apache.commons.cli.Options options69 = options60.addOption(option63);
        org.apache.commons.cli.Option option71 = options60.getOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(collection29);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(option71);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        org.apache.commons.cli.Options options21 = options16.addOption(option18);
        java.util.Collection collection22 = options16.getOptions();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        char char26 = option25.getValueSeparator();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("");
        option25.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup32 = options23.getOptionGroup(option25);
        option25.setOptionalArg(true);
        int int35 = option25.getId();
        org.apache.commons.cli.Options options36 = options16.addOption(option25);
        java.util.List list37 = options16.helpOptions();
        java.util.List list38 = options16.getRequiredOptions();
        java.lang.String str39 = options16.toString();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        option41.setType((java.lang.Object) "");
        boolean boolean48 = option41.isRequired();
        java.lang.String str49 = option41.getKey();
        boolean boolean50 = option41.hasLongOpt();
        org.apache.commons.cli.OptionGroup optionGroup51 = options16.getOptionGroup(option41);
        java.lang.String[] strArray52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray54 = posixParser0.flatten(options16, strArray52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + '\000' + "'", char26 == '\000');
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(optionGroup32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]" + "'", str39, "[ Options: [ short {4=[ option: 4  :: null ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "4" + "'", str49, "4");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.String str89 = commandLine86.getOptionValue("[ option: 4 hi!  ::  ]", "");
        java.util.List list90 = commandLine86.getArgList();
        java.lang.String[] strArray91 = commandLine86.getArgs();
        java.lang.String str93 = commandLine86.getOptionValue('=');
        java.lang.String str96 = commandLine86.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(list90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]" + "'", str96, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]");
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.OptionGroup optionGroup40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options41 = options18.addOptionGroup(optionGroup40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        char char17 = option16.getValueSeparator();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        option16.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup23 = options14.getOptionGroup(option16);
        java.util.List list24 = options14.helpOptions();
        java.util.Collection collection25 = options14.getOptionGroups();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("");
        org.apache.commons.cli.Options options31 = options26.addOption(option28);
        java.util.Collection collection32 = options26.getOptionGroups();
        org.apache.commons.cli.Options options36 = options26.addOption("", false, "arg");
        java.util.Collection collection37 = options26.getOptionGroups();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        option40.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options26.getOptionGroup(option40);
        option40.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        boolean boolean53 = option40.equals((java.lang.Object) strArray52);
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options14, strArray52, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", true);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]", true);
        posixParser0.burstToken("hi!", false);
        org.apache.commons.cli.Options options65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        commandLine66.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String[] strArray75 = commandLine66.getOptionValues('4');
        boolean boolean77 = commandLine66.hasOption(' ');
        java.lang.String[] strArray78 = commandLine66.getArgs();
        java.util.Properties properties79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options65, strArray78, properties79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(collection25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        option24.setDescription("");
        org.apache.commons.cli.Options options27 = options22.addOption(option24);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        org.apache.commons.cli.Options options34 = options29.addOption(option31);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray37 = commandLine35.getOptionValues("hi!");
        java.lang.String[] strArray38 = commandLine35.getArgs();
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser28.parse(options29, strArray38, properties39);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser21.parse(options27, strArray38, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options43.getOptionGroup(option45);
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create('4');
        char char49 = option48.getValueSeparator();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        option48.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup55 = options43.getOptionGroup(option48);
        boolean boolean57 = options43.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        org.apache.commons.cli.Options options64 = options59.addOption(option61);
        org.apache.commons.cli.CommandLine commandLine65 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine65.getOptionValues("hi!");
        java.lang.String[] strArray68 = commandLine65.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser58.parse(options59, strArray68, properties69);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser21.parse(options43, strArray68, properties71, true);
        java.lang.String str74 = options43.toString();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("");
        org.apache.commons.cli.Options options81 = options76.addOption(option78);
        java.util.Collection collection82 = options76.getOptions();
        boolean boolean84 = options76.hasOption("arg");
        java.lang.String[] strArray87 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine88 = posixParser75.parse(options76, strArray87);
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options43, strArray87, false);
        java.lang.Object obj92 = commandLine90.getOptionObject(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\000' + "'", char49 == '\000');
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str74, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNotNull(collection82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("");
        java.lang.Object obj42 = commandLine35.getOptionObject(" ");
        org.apache.commons.cli.Option[] optionArray43 = commandLine35.getOptions();
        org.apache.commons.cli.Option option44 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine35.addOption(option44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(optionArray43);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options43.getOptionGroups();
        org.apache.commons.cli.Options options53 = options43.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean56 = option55.hasOptionalArg();
        org.apache.commons.cli.Options options57 = options43.addOption(option55);
        boolean boolean59 = options43.hasOption("");
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String str72 = commandLine67.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str74 = commandLine67.getOptionValue("arg");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options43, strArray75, false);
        java.lang.String str82 = commandLine79.getOptionValue("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]", "hi!");
        java.lang.Object obj84 = commandLine79.getOptionObject("[ option: 4  :: hi! ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Option[] optionArray51 = commandLine50.getOptions();
        java.lang.String str54 = commandLine50.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]", "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.apache.commons.cli.Option[] optionArray55 = commandLine50.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(optionArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]" + "'", str54, "[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNotNull(optionArray55);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        java.lang.String str70 = options41.toString();
        org.apache.commons.cli.Option option72 = options41.getOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options76 = options41.addOption("[ Options: [ short {=[ option:  [ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]  :: org.apache.commons.cli.ParseException: [ option: 4  :: null ] ], 4=[ option: 4  :: null ::  ]} ] [ long {[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]=[ option:  [ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]  :: org.apache.commons.cli.ParseException: [ option: 4  :: null ] ]} ]", false, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(option72);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.List list6 = options0.helpOptions();
        org.apache.commons.cli.Options options11 = options0.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "");
        org.apache.commons.cli.CommandLine commandLine12 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray14 = commandLine12.getOptionValues("hi!");
        java.lang.String[] strArray15 = commandLine12.getArgs();
        java.util.Iterator iterator16 = commandLine12.iterator();
        java.lang.String str18 = commandLine12.getOptionValue("[ option:    :: null ]");
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str22 = option20.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException24 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean25 = option20.equals((java.lang.Object) "hi!");
        option20.setValueSeparator('=');
        boolean boolean28 = option20.hasValueSeparator();
        java.lang.String str29 = option20.getArgName();
        commandLine12.addOption(option20);
        org.apache.commons.cli.OptionGroup optionGroup31 = options11.getOptionGroup(option20);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        option35.setDescription("");
        org.apache.commons.cli.Options options38 = options33.addOption(option35);
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.lang.String[] strArray49 = posixParser32.flatten(options38, strArray47, false);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        java.util.Collection collection56 = options50.getOptions();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        char char60 = option59.getValueSeparator();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option59.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup66 = options57.getOptionGroup(option59);
        option59.setOptionalArg(true);
        int int69 = option59.getId();
        org.apache.commons.cli.Options options70 = options50.addOption(option59);
        option59.setOptionalArg(false);
        java.lang.String str74 = option59.getValue("[ option: 4  :: null ::  ]");
        java.lang.String[] strArray75 = option59.getValues();
        option59.setValueSeparator('a');
        org.apache.commons.cli.OptionGroup optionGroup78 = options38.getOptionGroup(option59);
        org.apache.commons.cli.Options options79 = options11.addOption(option59);
        org.apache.commons.cli.Option option81 = options79.getOption("[ option:    :: [ option: 4 hi!  ::  ] ]");
        boolean boolean83 = options79.hasOption("org.apache.commons.cli.ParseException: arg");
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "arg" + "'", str22, "arg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(collection56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertTrue("'" + char60 + "' != '" + '\000' + "'", char60 == '\000');
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str74, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(strArray75);
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNull(option81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray8 = commandLine0.getOptionValues("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        boolean boolean10 = commandLine0.hasOption('a');
        java.lang.String[] strArray11 = commandLine0.getArgs();
        java.util.Iterator iterator12 = commandLine0.iterator();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean9 = commandLine0.hasOption('#');
        java.lang.String str11 = commandLine0.getOptionValue('a');
        org.apache.commons.cli.Option[] optionArray12 = commandLine0.getOptions();
        java.lang.String[] strArray13 = commandLine0.getArgs();
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(optionArray12);
        org.junit.Assert.assertNotNull(strArray13);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptions();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        char char31 = option30.getValueSeparator();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        option33.setDescription("");
        option30.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup37 = options28.getOptionGroup(option30);
        option30.setOptionalArg(true);
        int int40 = option30.getId();
        org.apache.commons.cli.Options options41 = options21.addOption(option30);
        boolean boolean43 = options41.hasOption("");
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setArgs((int) (short) 100);
        option45.setArgName("[ option: 4  :: null ]");
        java.lang.String str50 = option45.getLongOpt();
        boolean boolean51 = option45.hasLongOpt();
        org.apache.commons.cli.Options options52 = options41.addOption(option45);
        java.util.Collection collection53 = options41.getOptions();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        org.apache.commons.cli.Options options60 = options55.addOption(option57);
        java.util.Collection collection61 = options55.getOptions();
        boolean boolean63 = options55.hasOption("arg");
        java.lang.String[] strArray66 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser54.parse(options55, strArray66);
        java.lang.String[] strArray69 = posixParser0.flatten(options41, strArray66, false);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingOptionException: hi!", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        option39.setArgs((int) '\000');
        org.apache.commons.cli.Options options45 = options22.addOption(option39);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        option52.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean61 = options47.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser62 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues("hi!");
        java.lang.String str74 = commandLine69.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str76 = commandLine69.getOptionValue("arg");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        java.lang.String[] strArray79 = posixParser62.flatten(options68, strArray77, false);
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser46.parse(options47, strArray79, properties80);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String[] strArray83 = commandLine81.getArgs();
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options22, strArray84, properties85);
        boolean boolean88 = commandLine86.hasOption('4');
        java.util.List list89 = commandLine86.getArgList();
        org.apache.commons.cli.Options options90 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option92 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup93 = options90.getOptionGroup(option92);
        java.util.List list94 = option92.getValuesList();
        option92.setOptionalArg(true);
        commandLine86.addOption(option92);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str74, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNotNull(option92);
        org.junit.Assert.assertNull(optionGroup93);
        org.junit.Assert.assertNotNull(list94);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create('4');
        char char17 = option16.getValueSeparator();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        option16.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup23 = options14.getOptionGroup(option16);
        java.util.List list24 = options14.helpOptions();
        java.util.Collection collection25 = options14.getOptionGroups();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setDescription("");
        org.apache.commons.cli.Options options31 = options26.addOption(option28);
        java.util.Collection collection32 = options26.getOptionGroups();
        org.apache.commons.cli.Options options36 = options26.addOption("", false, "arg");
        java.util.Collection collection37 = options26.getOptionGroups();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        option40.setValueSeparator(' ');
        org.apache.commons.cli.OptionGroup optionGroup46 = options26.getOptionGroup(option40);
        option40.setRequired(false);
        org.apache.commons.cli.CommandLine commandLine49 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine49.getOptionValues("hi!");
        java.lang.String[] strArray52 = commandLine49.getArgs();
        boolean boolean53 = option40.equals((java.lang.Object) strArray52);
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options14, strArray52, true);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create('4');
        option58.setDescription("");
        org.apache.commons.cli.Options options61 = options56.addOption(option58);
        java.util.Collection collection62 = options56.getOptionGroups();
        org.apache.commons.cli.Options options66 = options56.addOption("", false, "arg");
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean69 = option68.hasOptionalArg();
        org.apache.commons.cli.Options options70 = options56.addOption(option68);
        boolean boolean72 = options56.hasOption("");
        java.util.Collection collection73 = options56.getOptionGroups();
        java.util.Collection collection74 = options56.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.util.Iterator iterator76 = commandLine75.iterator();
        boolean boolean78 = commandLine75.hasOption("[ option: 4  :: [ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ] ::  ]");
        java.lang.String str80 = commandLine75.getOptionValue('=');
        java.lang.String[] strArray81 = commandLine75.getArgs();
        org.apache.commons.cli.CommandLine commandLine83 = posixParser0.parse(options56, strArray81, true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(collection25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(collection74);
        org.junit.Assert.assertNotNull(iterator76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        commandLine62.addArg("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String str71 = commandLine62.getOptionValue("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        java.lang.String[] strArray72 = commandLine62.getArgs();
        java.lang.Object obj74 = commandLine62.getOptionObject("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String str65 = commandLine60.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str67 = commandLine60.getOptionValue("arg");
        java.lang.String[] strArray68 = commandLine60.getArgs();
        java.lang.String[] strArray70 = posixParser53.flatten(options59, strArray68, false);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup75 = options72.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser71.flatten(options72, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options59, strArray84, false);
        java.util.Iterator iterator89 = commandLine88.iterator();
        boolean boolean91 = commandLine88.hasOption("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: hi!", false);
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        boolean boolean49 = option45.hasOptionalArg();
        option40.setType((java.lang.Object) boolean49);
        java.lang.String str51 = option40.getArgName();
        java.lang.String str52 = option40.getValue();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        char char56 = option55.getValueSeparator();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create('4');
        option58.setDescription("");
        option55.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup62 = options53.getOptionGroup(option55);
        boolean boolean63 = option55.hasValueSeparator();
        option55.setDescription("");
        option55.setLongOpt("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        boolean boolean68 = option40.equals((java.lang.Object) option55);
        java.lang.String[] strArray69 = option40.getValues();
        java.util.ListIterator listIterator70 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option40, listIterator70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertTrue("'" + char56 + "' != '" + '\000' + "'", char56 == '\000');
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(strArray69);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.Object obj4 = commandLine0.getOptionObject('a');
        java.lang.String str7 = commandLine0.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        char char10 = option9.getValueSeparator();
        option9.setOptionalArg(false);
        java.lang.String str13 = option9.getValue();
        java.lang.String str14 = option9.getDescription();
        java.util.List list15 = option9.getValuesList();
        commandLine0.addOption(option9);
        char char17 = option9.getValueSeparator();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str21 = option19.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException23 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean24 = option19.equals((java.lang.Object) "hi!");
        option19.setLongOpt("[ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        org.apache.commons.cli.Options options32 = options27.addOption(option29);
        java.util.Collection collection33 = options27.getOptionGroups();
        org.apache.commons.cli.Options options37 = options27.addOption("", false, "arg");
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup41 = options38.getOptionGroup(option40);
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        char char44 = option43.getValueSeparator();
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        option46.setDescription("");
        option43.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup50 = options38.getOptionGroup(option43);
        boolean boolean51 = option43.hasArgName();
        org.apache.commons.cli.Options options52 = options27.addOption(option43);
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create('4');
        char char55 = option54.getValueSeparator();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('4');
        option57.setDescription("");
        option54.setType((java.lang.Object) "");
        boolean boolean61 = option54.isRequired();
        option54.setDescription("[ option: 4  :: null ]");
        org.apache.commons.cli.OptionGroup optionGroup64 = options27.getOptionGroup(option54);
        java.util.Collection collection65 = options27.getOptions();
        option19.setType((java.lang.Object) options27);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup70 = options67.getOptionGroup(option69);
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        char char73 = option72.getValueSeparator();
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create('4');
        option75.setDescription("");
        option72.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup79 = options67.getOptionGroup(option72);
        boolean boolean80 = option72.hasArgName();
        java.lang.String str81 = option72.getValue();
        org.apache.commons.cli.Options options82 = options27.addOption(option72);
        boolean boolean83 = option9.equals((java.lang.Object) options27);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str7, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\000' + "'", char10 == '\000');
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(collection33);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertTrue("'" + char44 + "' != '" + '\000' + "'", char44 == '\000');
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertTrue("'" + char55 + "' != '" + '\000' + "'", char55 == '\000');
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(collection65);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNull(optionGroup70);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertTrue("'" + char73 + "' != '" + '\000' + "'", char73 == '\000');
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertNull(optionGroup79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Option[] optionArray40 = commandLine39.getOptions();
        java.lang.String[] strArray42 = commandLine39.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray43 = commandLine39.getOptions();
        java.lang.String str46 = commandLine39.getOptionValue('=', "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        java.lang.String str48 = commandLine39.getOptionValue('#');
        boolean boolean50 = commandLine39.hasOption("[ option: 4 arg +ARG :: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(optionArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]" + "'", str46, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setDescription("");
        boolean boolean4 = option1.hasValueSeparator();
        java.util.List list5 = option1.getValuesList();
        int int6 = option1.getArgs();
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        option1.setType((java.lang.Object) commandLine7);
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('\000');
        commandLine7.addOption(option12);
        option12.setValueSeparator(' ');
        java.lang.String str16 = option12.getValue();
        java.lang.Object obj17 = option12.getType();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues("hi!");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options48.getOptions();
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine50.getOptionValues("hi!");
        java.lang.String[] strArray53 = commandLine50.getArgs();
        java.lang.String str55 = commandLine50.getOptionValue("hi!");
        boolean boolean57 = commandLine50.hasOption("");
        java.lang.String str60 = commandLine50.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray62 = commandLine50.getOptionValues('4');
        java.lang.String[] strArray63 = commandLine50.getArgs();
        java.lang.Object obj65 = commandLine50.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options48, strArray66, properties67);
        posixParser0.burstToken("[ option: 4 [ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]  :: null ]", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str60, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        posixParser0.burstToken("", true);
        posixParser0.burstToken("", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        posixParser0.burstToken("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]", false);
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option(" ", "", false, "org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.UnrecognizedOptionException unrecognizedOptionException22 = new org.apache.commons.cli.UnrecognizedOptionException("[ Options: [ short {} ] [ long {} ]");
        boolean boolean23 = option20.equals((java.lang.Object) unrecognizedOptionException22);
        java.util.ListIterator listIterator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option20, listIterator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean9 = commandLine0.hasOption("[ option: 4  :: null ]");
        java.lang.String[] strArray11 = commandLine0.getOptionValues("");
        java.lang.String str14 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str17 = commandLine0.getOptionValue('4', "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.List list24 = option20.getValuesList();
        option20.setValueSeparator(' ');
        option20.setValueSeparator('a');
        commandLine0.addOption(option20);
        option20.setArgs((int) (short) 100);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str14, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str17, "org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(list24);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup24 = options21.getOptionGroup(option23);
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        char char27 = option26.getValueSeparator();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('4');
        option29.setDescription("");
        option26.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup33 = options21.getOptionGroup(option26);
        java.lang.String[] strArray34 = null;
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options21, strArray34, properties35);
        org.apache.commons.cli.Option option38 = options21.getOption("[ option:    :: null ]");
        java.util.Collection collection39 = options21.getOptions();
        java.lang.String str40 = options21.toString();
        org.apache.commons.cli.OptionGroup optionGroup41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options42 = options21.addOptionGroup(optionGroup41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNull(optionGroup24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertNotNull(collection39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str40, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        java.lang.String str94 = commandLine91.getOptionValue("[ option: 4  ::  ]", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.Object obj96 = commandLine91.getOptionObject('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str94, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        option22.setDescription("");
        org.apache.commons.cli.Options options25 = options20.addOption(option22);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine26.getOptionValues("hi!");
        java.lang.String[] strArray29 = commandLine26.getArgs();
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser19.parse(options20, strArray29, properties30);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup36 = options33.getOptionGroup(option35);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        option38.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup45 = options33.getOptionGroup(option38);
        boolean boolean47 = options33.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('4');
        option51.setDescription("");
        org.apache.commons.cli.Options options54 = options49.addOption(option51);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine55.getOptionValues("hi!");
        java.lang.String str60 = commandLine55.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str62 = commandLine55.getOptionValue("arg");
        java.lang.String[] strArray63 = commandLine55.getArgs();
        java.lang.String[] strArray65 = posixParser48.flatten(options54, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser32.parse(options33, strArray65, properties66);
        java.util.List list68 = commandLine67.getArgList();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser0.flatten(options20, strArray69, false);
        org.apache.commons.cli.Options options76 = options20.addOption("", "[ option: 4 hi!  ::  :: [ Options: [ short {} ] [ long {} ] ]", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list77 = options76.getRequiredOptions();
        java.util.Collection collection78 = options76.getOptions();
        java.util.List list79 = options76.helpOptions();
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        org.apache.commons.cli.Options options85 = options80.addOption(option82);
        option82.setArgName("");
        java.lang.String str89 = option82.getValue((int) ' ');
        boolean boolean90 = option82.hasValueSeparator();
        org.apache.commons.cli.Options options91 = options76.addOption(option82);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + char39 + "' != '" + '\000' + "'", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str60, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertNotNull(collection78);
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(options91);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        commandLine62.addArg("[ Options: [ short {4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String str72 = commandLine62.getOptionValue("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
        java.lang.String str74 = commandLine62.getOptionValue('\000');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]" + "'", str72, "org.apache.commons.cli.MissingArgumentException: [ option:    :: null ]");
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("");
        java.lang.Object obj42 = commandLine35.getOptionObject(" ");
        boolean boolean44 = commandLine35.hasOption('=');
        java.lang.Object obj46 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray47 = commandLine35.getOptions();
        java.lang.Object obj49 = commandLine35.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(optionArray47);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        char char16 = option15.getValueSeparator();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        option15.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option15);
        java.util.List list23 = options13.helpOptions();
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup28 = options25.getOptionGroup(option27);
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine29.getOptionValues("hi!");
        java.lang.String str34 = commandLine29.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str36 = commandLine29.getOptionValue("arg");
        java.lang.String[] strArray37 = commandLine29.getArgs();
        java.lang.String[] strArray39 = posixParser24.flatten(options25, strArray37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues("hi!");
        java.lang.String str52 = commandLine47.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str54 = commandLine47.getOptionValue("arg");
        java.lang.String[] strArray55 = commandLine47.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser24.parse(options40, strArray55, properties56, false);
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options13, strArray55);
        org.apache.commons.cli.Options options60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray63 = commandLine61.getOptionValues("hi!");
        java.lang.Object obj65 = commandLine61.getOptionObject('a');
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create('4');
        option67.setDescription("");
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        boolean boolean76 = option72.hasOptionalArg();
        option67.setType((java.lang.Object) boolean76);
        java.lang.String str78 = option67.getArgName();
        java.lang.Object obj79 = option67.getType();
        java.lang.String[] strArray80 = option67.getValues();
        commandLine61.addOption(option67);
        java.lang.String[] strArray82 = commandLine61.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine83 = posixParser0.parse(options60, strArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\000' + "'", char16 == '\000');
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str34, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str52, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNull(strArray63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + false + "'", obj79, false);
        org.junit.Assert.assertNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        java.lang.String str64 = commandLine62.getOptionValue('\000');
        java.lang.Object obj66 = commandLine62.getOptionObject("[ option:    :: null ]");
        org.apache.commons.cli.Option[] optionArray67 = commandLine62.getOptions();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.lang.String[] strArray70 = commandLine62.getOptionValues("[ option: 4  :: null ]");
        java.lang.String str73 = commandLine62.getOptionValue("org.apache.commons.cli.ParseException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]");
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create('4');
        char char76 = option75.getValueSeparator();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create('4');
        option78.setDescription("");
        option75.setType((java.lang.Object) "");
        boolean boolean82 = option75.hasLongOpt();
        int int83 = option75.getArgs();
        option75.setArgName("");
        option75.setOptionalArg(false);
        boolean boolean88 = option75.hasValueSeparator();
        commandLine62.addOption(option75);
        java.lang.String[] strArray91 = commandLine62.getOptionValues('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]" + "'", str73, "org.apache.commons.cli.MissingArgumentException: [ option: 4  ::  ]");
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertTrue("'" + char76 + "' != '" + '\000' + "'", char76 == '\000');
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(strArray91);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray59 = commandLine57.getOptionValues("hi!");
        java.lang.String str62 = commandLine57.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str64 = commandLine57.getOptionValue("arg");
        java.lang.String[] strArray65 = commandLine57.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options51, strArray65, properties66);
        org.apache.commons.cli.OptionGroup optionGroup68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options69 = options51.addOptionGroup(optionGroup68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str62, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine8.getOptionValues("hi!");
        java.lang.String str13 = commandLine8.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("arg");
        java.lang.String[] strArray16 = commandLine8.getArgs();
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.parse(options1, strArray16, properties17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options22 = options1.addOption("[ option: 4  :: null :: [ option:   [ option: 4  ::  ]  :: null ] ]", false, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str13, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray7 = commandLine5.getOptionValues("hi!");
        java.lang.String str10 = commandLine5.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str12 = commandLine5.getOptionValue("arg");
        java.lang.String[] strArray13 = commandLine5.getArgs();
        java.lang.String[] strArray15 = posixParser0.flatten(options1, strArray13, true);
        org.apache.commons.cli.Options options16 = null;
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray26 = commandLine24.getOptionValues("hi!");
        java.lang.String str29 = commandLine24.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str31 = commandLine24.getOptionValue("arg");
        java.lang.String[] strArray32 = commandLine24.getArgs();
        java.lang.String[] strArray34 = posixParser17.flatten(options23, strArray32, false);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create('4');
        option37.setDescription("");
        org.apache.commons.cli.Options options40 = options35.addOption(option37);
        java.util.Collection collection41 = options35.getOptionGroups();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        option43.setLongOpt("hi!");
        boolean boolean48 = option43.hasArgName();
        org.apache.commons.cli.Options options49 = options35.addOption(option43);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine50.getOptionValues("hi!");
        java.lang.String[] strArray53 = commandLine50.getArgs();
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser17.parse(options35, strArray53, properties54, true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        java.util.Collection collection63 = options57.getOptionGroups();
        org.apache.commons.cli.Options options67 = options57.addOption("", false, "arg");
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup71 = options68.getOptionGroup(option70);
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        char char74 = option73.getValueSeparator();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setDescription("");
        option73.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup80 = options68.getOptionGroup(option73);
        boolean boolean81 = option73.hasArgName();
        org.apache.commons.cli.Options options82 = options57.addOption(option73);
        org.apache.commons.cli.CommandLine commandLine83 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray85 = commandLine83.getOptionValues("hi!");
        java.lang.String str88 = commandLine83.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str90 = commandLine83.getOptionValue("arg");
        java.lang.String[] strArray91 = commandLine83.getArgs();
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser17.parse(options57, strArray91, properties92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine95 = posixParser0.parse(options16, strArray91, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str10, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str29, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(collection41);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue("'" + char74 + "' != '" + '\000' + "'", char74 == '\000');
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str88, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        boolean boolean45 = commandLine39.hasOption(' ');
        java.lang.String str47 = commandLine39.getOptionValue('a');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        boolean boolean6 = commandLine0.hasOption("[ option: 4  :: null ]");
        boolean boolean8 = commandLine0.hasOption('=');
        java.util.List list9 = commandLine0.getArgList();
        java.lang.Object obj11 = commandLine0.getOptionObject("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        char char2 = option1.getValueSeparator();
        boolean boolean3 = option1.hasArg();
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create('4');
        option7.setDescription("");
        org.apache.commons.cli.Options options10 = options5.addOption(option7);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        org.apache.commons.cli.Options options17 = options12.addOption(option14);
        org.apache.commons.cli.CommandLine commandLine18 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine18.getOptionValues("hi!");
        java.lang.String[] strArray21 = commandLine18.getArgs();
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser11.parse(options12, strArray21, properties22);
        org.apache.commons.cli.CommandLine commandLine25 = posixParser4.parse(options10, strArray21, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup29 = options26.getOptionGroup(option28);
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        char char32 = option31.getValueSeparator();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create('4');
        option34.setDescription("");
        option31.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup38 = options26.getOptionGroup(option31);
        boolean boolean40 = options26.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        org.apache.commons.cli.Options options47 = options42.addOption(option44);
        org.apache.commons.cli.CommandLine commandLine48 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray50 = commandLine48.getOptionValues("hi!");
        java.lang.String[] strArray51 = commandLine48.getArgs();
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser41.parse(options42, strArray51, properties52);
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser4.parse(options26, strArray51, properties54, true);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        option60.setDescription("");
        org.apache.commons.cli.Options options63 = options58.addOption(option60);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray66 = commandLine64.getOptionValues("hi!");
        java.lang.String str69 = commandLine64.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str71 = commandLine64.getOptionValue("arg");
        java.lang.String[] strArray72 = commandLine64.getArgs();
        java.lang.String[] strArray74 = posixParser57.flatten(options63, strArray72, false);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup79 = options76.getOptionGroup(option78);
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine80.getOptionValues("hi!");
        java.lang.String str85 = commandLine80.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str87 = commandLine80.getOptionValue("arg");
        java.lang.String[] strArray88 = commandLine80.getArgs();
        java.lang.String[] strArray90 = posixParser75.flatten(options76, strArray88, true);
        org.apache.commons.cli.CommandLine commandLine92 = posixParser4.parse(options63, strArray88, false);
        boolean boolean93 = option1.equals((java.lang.Object) commandLine92);
        java.lang.String str94 = option1.getDescription();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\000' + "'", char2 == '\000');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\000' + "'", char32 == '\000');
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNotNull(options47);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNull(strArray66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str69, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertNull(optionGroup79);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str85, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        boolean boolean19 = options6.hasOption("arg");
        org.apache.commons.cli.OptionGroup optionGroup20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options21 = options6.addOptionGroup(optionGroup20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Option[] optionArray51 = commandLine50.getOptions();
        java.lang.Object obj53 = commandLine50.getOptionObject("arg");
        java.lang.String str56 = commandLine50.getOptionValue(' ', "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(optionArray51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!" + "'", str56, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        option1.setArgs((int) (short) 100);
        option1.setArgName("[ option: 4  :: null ]");
        java.lang.String str6 = option1.getLongOpt();
        java.lang.String str8 = option1.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.lang.String str14 = commandLine9.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str16 = commandLine9.getOptionValue("arg");
        java.lang.String[] strArray17 = commandLine9.getArgs();
        option1.setType((java.lang.Object) strArray17);
        boolean boolean19 = option1.hasOptionalArg();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str14, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.String str89 = commandLine86.getOptionValue("[ option: 4 hi!  ::  ]", "");
        java.util.List list90 = commandLine86.getArgList();
        java.lang.String[] strArray91 = commandLine86.getArgs();
        java.lang.String str93 = commandLine86.getOptionValue('=');
        boolean boolean95 = commandLine86.hasOption("[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(list90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option9.setLongOpt("hi!");
        option9.setArgName("arg");
        java.lang.String str16 = option9.toString();
        commandLine0.addOption(option9);
        commandLine0.addArg("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ], arg=[ option: arg  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ option: 4 hi!  ::  ]" + "'", str16, "[ option: 4 hi!  ::  ]");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.String[] strArray38 = commandLine35.getArgs();
        commandLine35.addArg("");
        java.lang.Object obj42 = commandLine35.getOptionObject(" ");
        boolean boolean44 = commandLine35.hasOption('=');
        java.lang.Object obj46 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray47 = commandLine35.getOptions();
        java.util.List list48 = commandLine35.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(optionArray47);
        org.junit.Assert.assertNotNull(list48);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        java.lang.Object obj14 = commandLine12.getOptionObject('=');
        java.lang.String str17 = commandLine12.getOptionValue("[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]", "[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]" + "'", str17, "[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]");
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue('\000');
        java.lang.Object obj7 = commandLine0.getOptionObject("");
        java.lang.String[] strArray9 = commandLine0.getOptionValues('\000');
        java.lang.String str11 = commandLine0.getOptionValue('\000');
        java.lang.Object obj13 = commandLine0.getOptionObject("[ option:    :: null ]");
        commandLine0.addArg("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        java.util.Collection collection7 = options1.getOptions();
        boolean boolean9 = options1.hasOption("arg");
        java.lang.String[] strArray12 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" };
        org.apache.commons.cli.CommandLine commandLine13 = posixParser0.parse(options1, strArray12);
        commandLine13.addArg("[ option: 4  :: null ::  ]");
        java.util.Iterator iterator16 = commandLine13.iterator();
        java.lang.Object obj18 = commandLine13.getOptionObject("[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        java.lang.Object obj20 = commandLine13.getOptionObject('#');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        option39.setDescription("");
        org.apache.commons.cli.Options options42 = options37.addOption(option39);
        option39.setArgs((int) '\000');
        org.apache.commons.cli.Options options45 = options22.addOption(option39);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup50 = options47.getOptionGroup(option49);
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        char char53 = option52.getValueSeparator();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        option52.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup59 = options47.getOptionGroup(option52);
        boolean boolean61 = options47.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser62 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option65 = org.apache.commons.cli.OptionBuilder.create('4');
        option65.setDescription("");
        org.apache.commons.cli.Options options68 = options63.addOption(option65);
        org.apache.commons.cli.CommandLine commandLine69 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine69.getOptionValues("hi!");
        java.lang.String str74 = commandLine69.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str76 = commandLine69.getOptionValue("arg");
        java.lang.String[] strArray77 = commandLine69.getArgs();
        java.lang.String[] strArray79 = posixParser62.flatten(options68, strArray77, false);
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser46.parse(options47, strArray79, properties80);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String[] strArray83 = commandLine81.getArgs();
        java.lang.String[] strArray84 = commandLine81.getArgs();
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options22, strArray84, properties85);
        java.lang.String str89 = commandLine86.getOptionValue('=', "");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(option65);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str74, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        char char16 = option15.getValueSeparator();
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('4');
        option18.setDescription("");
        option15.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option15);
        java.util.List list23 = options13.helpOptions();
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup28 = options25.getOptionGroup(option27);
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine29.getOptionValues("hi!");
        java.lang.String str34 = commandLine29.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str36 = commandLine29.getOptionValue("arg");
        java.lang.String[] strArray37 = commandLine29.getArgs();
        java.lang.String[] strArray39 = posixParser24.flatten(options25, strArray37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues("hi!");
        java.lang.String str52 = commandLine47.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str54 = commandLine47.getOptionValue("arg");
        java.lang.String[] strArray55 = commandLine47.getArgs();
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser24.parse(options40, strArray55, properties56, false);
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options13, strArray55);
        java.util.Collection collection60 = options13.getOptions();
        java.util.Collection collection61 = options13.getOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\000' + "'", char16 == '\000');
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str34, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str52, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(collection61);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.util.Iterator iterator4 = commandLine0.iterator();
        java.lang.String str7 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        boolean boolean9 = commandLine0.hasOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.util.List list10 = commandLine0.getArgList();
        org.apache.commons.cli.Option option12 = org.apache.commons.cli.OptionBuilder.create('4');
        option12.setDescription("");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("");
        org.apache.commons.cli.Options options20 = options15.addOption(option17);
        boolean boolean21 = option12.equals((java.lang.Object) option17);
        option17.setValueSeparator('#');
        boolean boolean24 = option17.hasArgs();
        java.lang.String[] strArray25 = option17.getValues();
        commandLine0.addOption(option17);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(option12);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strArray25);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option9.setLongOpt("hi!");
        option9.setArgName("arg");
        java.lang.String str16 = option9.toString();
        commandLine0.addOption(option9);
        java.lang.String[] strArray19 = commandLine0.getOptionValues(' ');
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ option: 4 hi!  ::  ]" + "'", str16, "[ option: 4 hi!  ::  ]");
        org.junit.Assert.assertNull(strArray19);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.Collection collection53 = options22.getOptionGroups();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Options options64 = options54.addOption("", false, "arg");
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option67 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup68 = options65.getOptionGroup(option67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('4');
        char char71 = option70.getValueSeparator();
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        option73.setDescription("");
        option70.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup77 = options65.getOptionGroup(option70);
        boolean boolean78 = option70.hasArgName();
        org.apache.commons.cli.Options options79 = options54.addOption(option70);
        org.apache.commons.cli.Options options80 = options22.addOption(option70);
        java.lang.String str81 = option70.getKey();
        java.lang.String str82 = option70.getKey();
        java.lang.String str83 = option70.getDescription();
        java.lang.String[] strArray84 = option70.getValues();
        option70.setValueSeparator('#');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(option67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue("'" + char71 + "' != '" + '\000' + "'", char71 == '\000');
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "4" + "'", str81, "4");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "4" + "'", str82, "4");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(strArray84);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        boolean boolean5 = commandLine0.hasOption("hi!");
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option8 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup9 = options6.getOptionGroup(option8);
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        char char12 = option11.getValueSeparator();
        org.apache.commons.cli.Option option14 = org.apache.commons.cli.OptionBuilder.create('4');
        option14.setDescription("");
        option11.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup18 = options6.getOptionGroup(option11);
        int int19 = option11.getId();
        commandLine0.addOption(option11);
        java.util.Iterator iterator21 = commandLine0.iterator();
        java.lang.String str24 = commandLine0.getOptionValue("", "[ option: 4  :: null ]");
        java.lang.String str27 = commandLine0.getOptionValue("[ option: 4  ::  :: [] ]", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertNull(optionGroup9);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertNotNull(option14);
        org.junit.Assert.assertNull(optionGroup18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option: 4  :: null ]" + "'", str24, "[ option: 4  :: null ]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str27, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingOptionException: hi!");
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.List list6 = options0.helpOptions();
        org.apache.commons.cli.Options options11 = options0.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "");
        org.apache.commons.cli.CommandLine commandLine12 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray14 = commandLine12.getOptionValues("hi!");
        java.lang.String[] strArray15 = commandLine12.getArgs();
        java.util.Iterator iterator16 = commandLine12.iterator();
        java.lang.String str18 = commandLine12.getOptionValue("[ option:    :: null ]");
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str22 = option20.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException24 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean25 = option20.equals((java.lang.Object) "hi!");
        option20.setValueSeparator('=');
        boolean boolean28 = option20.hasValueSeparator();
        java.lang.String str29 = option20.getArgName();
        commandLine12.addOption(option20);
        org.apache.commons.cli.OptionGroup optionGroup31 = options11.getOptionGroup(option20);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        option35.setDescription("");
        org.apache.commons.cli.Options options38 = options33.addOption(option35);
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.lang.String[] strArray49 = posixParser32.flatten(options38, strArray47, false);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        java.util.Collection collection56 = options50.getOptions();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        char char60 = option59.getValueSeparator();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option59.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup66 = options57.getOptionGroup(option59);
        option59.setOptionalArg(true);
        int int69 = option59.getId();
        org.apache.commons.cli.Options options70 = options50.addOption(option59);
        option59.setOptionalArg(false);
        java.lang.String str74 = option59.getValue("[ option: 4  :: null ::  ]");
        java.lang.String[] strArray75 = option59.getValues();
        option59.setValueSeparator('a');
        org.apache.commons.cli.OptionGroup optionGroup78 = options38.getOptionGroup(option59);
        org.apache.commons.cli.Options options79 = options11.addOption(option59);
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup83 = options80.getOptionGroup(option82);
        java.lang.Object obj84 = option82.getType();
        java.lang.String[] strArray85 = option82.getValues();
        org.apache.commons.cli.Options options86 = options79.addOption(option82);
        java.lang.String str88 = option82.getValue("");
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "arg" + "'", str22, "arg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(collection56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertTrue("'" + char60 + "' != '" + '\000' + "'", char60 == '\000');
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str74, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(strArray75);
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup83);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str84 = commandLine81.getOptionValue("[ option:  +ARG ::  ]");
        java.util.List list85 = commandLine81.getArgList();
        commandLine81.addArg("org.apache.commons.cli.MissingArgumentException: [ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.Object obj89 = commandLine81.getOptionObject('\000');
        java.util.List list90 = commandLine81.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(list85);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(list90);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        option28.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues("hi!");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option62.setLongOpt("hi!");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option:  +ARG ::  ]", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "[ option:    :: null ]" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        java.lang.String[] strArray98 = commandLine96.getOptionValues("");
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNull(strArray98);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray12 = commandLine0.getOptionValues('4');
        boolean boolean14 = commandLine0.hasOption('4');
        java.lang.Object obj16 = commandLine0.getOptionObject("4");
        java.lang.Object obj18 = commandLine0.getOptionObject("[ option: 4 hi!  ::  ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str10, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine37.getOptionValues("hi!");
        java.lang.String[] strArray40 = commandLine37.getArgs();
        java.lang.String[] strArray42 = posixParser0.flatten(options36, strArray40, false);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        java.util.Collection collection49 = options43.getOptionGroups();
        org.apache.commons.cli.Options options53 = options43.addOption("", false, "arg");
        java.util.List list54 = options53.getRequiredOptions();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options57 = options53.addOption(option56);
        java.util.Collection collection58 = options53.getOptionGroups();
        java.lang.String[] strArray59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options53, strArray59);
        boolean boolean62 = commandLine60.hasOption('#');
        java.lang.String str65 = commandLine60.getOptionValue('=', "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str65, "org.apache.commons.cli.UnrecognizedOptionException: ");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        java.util.List list77 = options40.helpOptions();
        java.util.Collection collection78 = options40.getOptionGroups();
        java.util.Collection collection79 = options40.getOptionGroups();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertNotNull(collection78);
        org.junit.Assert.assertNotNull(collection79);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.lang.String str23 = commandLine21.getOptionValue("[ option:  +ARG ::  ]");
        java.lang.Object obj25 = commandLine21.getOptionObject("");
        java.util.Iterator iterator26 = commandLine21.iterator();
        boolean boolean28 = commandLine21.hasOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        org.apache.commons.cli.Options options34 = options29.addOption(option31);
        java.util.Collection collection35 = options29.getOptions();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        char char39 = option38.getValueSeparator();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        option38.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup45 = options36.getOptionGroup(option38);
        option38.setOptionalArg(true);
        int int48 = option38.getId();
        org.apache.commons.cli.Options options49 = options29.addOption(option38);
        boolean boolean51 = options49.hasOption("");
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setArgs((int) (short) 100);
        option53.setArgName("[ option: 4  :: null ]");
        java.lang.String str58 = option53.getLongOpt();
        boolean boolean59 = option53.hasLongOpt();
        org.apache.commons.cli.Options options60 = options49.addOption(option53);
        java.lang.String str61 = option53.getLongOpt();
        option53.setLongOpt("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]");
        java.lang.String str64 = option53.toString();
        commandLine21.addOption(option53);
        java.lang.String str66 = option53.getOpt();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + char39 + "' != '" + '\000' + "'", char39 == '\000');
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ option: 4 [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]  :: null ]" + "'", str64, "[ option: 4 [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ] [ long {org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!=[ option: 4 org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!  ::  ]} ]  :: null ]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "4" + "'", str66, "4");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create('4');
        option53.setDescription("");
        org.apache.commons.cli.Options options56 = options51.addOption(option53);
        java.util.Collection collection57 = options51.getOptionGroups();
        java.util.Collection collection58 = options51.getOptionGroups();
        java.util.Collection collection59 = options51.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        org.apache.commons.cli.Options options66 = options61.addOption(option63);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray69 = commandLine67.getOptionValues("hi!");
        java.lang.String str72 = commandLine67.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str74 = commandLine67.getOptionValue("arg");
        java.lang.String[] strArray75 = commandLine67.getArgs();
        java.lang.String[] strArray77 = posixParser60.flatten(options66, strArray75, false);
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options51, strArray77, properties78);
        java.lang.String[] strArray81 = commandLine79.getOptionValues("");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str72, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNull(strArray81);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str84 = commandLine81.getOptionValue("[ option:  +ARG ::  ]");
        java.lang.String str86 = commandLine81.getOptionValue("4");
        java.lang.String[] strArray87 = commandLine81.getArgs();
        boolean boolean89 = commandLine81.hasOption('\000');
        boolean boolean91 = commandLine81.hasOption("[ option: 4  ::  :: [] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        char char41 = option40.getValueSeparator();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        option40.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option40);
        boolean boolean48 = option40.hasValueSeparator();
        commandLine35.addOption(option40);
        java.lang.String str50 = option40.toString();
        java.lang.String str51 = option40.getLongOpt();
        option40.setDescription("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        java.lang.String str54 = option40.getValue();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + char41 + "' != '" + '\000' + "'", char41 == '\000');
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option: 4  :: null ::  ]" + "'", str50, "[ option: 4  :: null ::  ]");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('4');
        option38.setDescription("");
        org.apache.commons.cli.Options options41 = options36.addOption(option38);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option44);
        option44.setOptionalArg(true);
        int int54 = option44.getId();
        org.apache.commons.cli.OptionGroup optionGroup55 = options41.getOptionGroup(option44);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup59 = options56.getOptionGroup(option58);
        boolean boolean60 = option58.hasLongOpt();
        boolean boolean61 = option58.isRequired();
        org.apache.commons.cli.Options options62 = options41.addOption(option58);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String str75 = commandLine70.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str77 = commandLine70.getOptionValue("arg");
        java.lang.String[] strArray78 = commandLine70.getArgs();
        java.lang.String[] strArray80 = posixParser63.flatten(options69, strArray78, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options62, strArray80, false);
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str86 = option84.getValue("arg");
        java.lang.String str87 = option84.getLongOpt();
        option84.setLongOpt("");
        option84.setArgName("");
        commandLine82.addOption(option84);
        java.lang.String[] strArray94 = commandLine82.getOptionValues('=');
        java.util.Iterator iterator95 = commandLine82.iterator();
        commandLine82.addArg("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str75, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "arg" + "'", str86, "arg");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(strArray94);
        org.junit.Assert.assertNotNull(iterator95);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        posixParser0.burstToken("", false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options28 = null;
        java.lang.String[] strArray33 = new java.lang.String[] { "[ Options: [ short {=[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    :: [ option: 4  ::  ] ]} ]", "[ option: 4  :: [ option:    :: [ option: 4 hi!  ::  ] ] ]", "org.apache.commons.cli.MissingArgumentException:  ", "[ Options: [ short { =[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ], 4=[ option: 4  ::  ]} ] [ long {=[ option:    +ARG :: org.apache.commons.cli.UnrecognizedOptionException: hi! ]} ]" };
        java.util.Properties properties34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options28, strArray33, properties34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.lang.String[] strArray41 = commandLine39.getOptionValues("");
        java.lang.String[] strArray43 = commandLine39.getOptionValues('a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass44 = strArray43.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(strArray43);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        java.util.Collection collection35 = options22.getOptions();
        java.lang.String[] strArray36 = null;
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options22, strArray36, properties37, false);
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = org.apache.commons.cli.OptionBuilder.create('4');
        option43.setDescription("");
        org.apache.commons.cli.Options options46 = options41.addOption(option43);
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray49 = commandLine47.getOptionValues("hi!");
        java.lang.String[] strArray50 = commandLine47.getArgs();
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser40.parse(options41, strArray50, properties51);
        boolean boolean54 = options41.hasOption(" ");
        java.lang.String[] strArray55 = null;
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser0.parse(options41, strArray55, properties56);
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create('4');
        char char61 = option60.getValueSeparator();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create('4');
        option63.setDescription("");
        option60.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup67 = options58.getOptionGroup(option60);
        java.util.Collection collection68 = options58.getOptionGroups();
        java.util.Collection collection69 = options58.getOptionGroups();
        java.lang.String str70 = options58.toString();
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine71.getOptionValues("hi!");
        java.lang.String[] strArray74 = commandLine71.getArgs();
        java.lang.String str76 = commandLine71.getOptionValue("hi!");
        java.lang.String[] strArray78 = commandLine71.getOptionValues('a');
        commandLine71.addArg("org.apache.commons.cli.MissingOptionException: ");
        java.lang.String[] strArray81 = commandLine71.getArgs();
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser0.parse(options58, strArray81, properties82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options87 = options58.addOption("[ Options: [ short {=[ option:  +ARG ::  ], 4=[ option: 4  ::  ]} ] [ long {} ]", false, "[ Options: [ short {=[ option:  +ARG ::  ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option43);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertTrue("'" + char61 + "' != '" + '\000' + "'", char61 == '\000');
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str70, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = org.apache.commons.cli.OptionBuilder.create('4');
        option15.setDescription("");
        org.apache.commons.cli.Options options18 = options13.addOption(option15);
        java.util.Collection collection19 = options13.getOptionGroups();
        org.apache.commons.cli.Options options23 = options13.addOption("", false, "arg");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", true, "");
        boolean boolean28 = option27.hasOptionalArg();
        option27.setOptionalArg(false);
        org.apache.commons.cli.OptionGroup optionGroup31 = options23.getOptionGroup(option27);
        java.util.Collection collection32 = options23.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        org.apache.commons.cli.Options options39 = options34.addOption(option36);
        java.util.Collection collection40 = options34.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine41.getOptionValues("hi!");
        java.lang.String str46 = commandLine41.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str48 = commandLine41.getOptionValue("arg");
        java.lang.String[] strArray49 = commandLine41.getArgs();
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser33.parse(options34, strArray49, properties50);
        java.lang.String[] strArray53 = posixParser0.flatten(options23, strArray49, true);
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        org.apache.commons.cli.Options options62 = options57.addOption(option59);
        java.util.Collection collection63 = options57.getOptionGroups();
        org.apache.commons.cli.Options options67 = options57.addOption("", false, "arg");
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup71 = options68.getOptionGroup(option70);
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create('4');
        char char74 = option73.getValueSeparator();
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create('4');
        option76.setDescription("");
        option73.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup80 = options68.getOptionGroup(option73);
        boolean boolean81 = option73.hasArgName();
        org.apache.commons.cli.Options options82 = options57.addOption(option73);
        org.apache.commons.cli.Option option84 = options82.getOption(" ");
        java.util.List list85 = options82.getRequiredOptions();
        java.lang.String[] strArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray88 = posixParser0.flatten(options82, strArray86, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option15);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str46, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue("'" + char74 + "' != '" + '\000' + "'", char74 == '\000');
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNull(option84);
        org.junit.Assert.assertNotNull(list85);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        boolean boolean9 = commandLine0.hasOption(' ');
        boolean boolean11 = commandLine0.hasOption("arg");
        java.lang.String str13 = commandLine0.getOptionValue("");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        boolean boolean37 = commandLine35.hasOption('4');
        boolean boolean39 = commandLine35.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.Object obj41 = commandLine35.getOptionObject("");
        boolean boolean43 = commandLine35.hasOption(' ');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup31 = options28.getOptionGroup(option30);
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create('4');
        char char34 = option33.getValueSeparator();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create('4');
        option36.setDescription("");
        option33.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup40 = options28.getOptionGroup(option33);
        boolean boolean42 = options28.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create('4');
        option46.setDescription("");
        org.apache.commons.cli.Options options49 = options44.addOption(option46);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine50.getOptionValues("hi!");
        java.lang.String str55 = commandLine50.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str57 = commandLine50.getOptionValue("arg");
        java.lang.String[] strArray58 = commandLine50.getArgs();
        java.lang.String[] strArray60 = posixParser43.flatten(options49, strArray58, false);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser27.parse(options28, strArray60, properties61);
        java.util.List list63 = commandLine62.getArgList();
        boolean boolean64 = option24.equals((java.lang.Object) list63);
        boolean boolean65 = option24.hasArgs();
        java.lang.String str66 = option24.getOpt();
        boolean boolean67 = option24.hasArgName();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertTrue("'" + char34 + "' != '" + '\000' + "'", char34 == '\000');
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str55, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "4" + "'", str66, "4");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.util.Iterator iterator3 = commandLine0.iterator();
        java.lang.String[] strArray5 = commandLine0.getOptionValues('a');
        java.lang.Object obj7 = commandLine0.getOptionObject('a');
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option9.setLongOpt("hi!");
        option9.setArgName("arg");
        java.lang.String str16 = option9.toString();
        commandLine0.addOption(option9);
        java.lang.String str19 = commandLine0.getOptionValue('4');
        java.util.List list20 = commandLine0.getArgList();
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(iterator3);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ option: 4 hi!  ::  ]" + "'", str16, "[ option: 4 hi!  ::  ]");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(list20);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        java.util.List list40 = commandLine39.getArgList();
        java.util.List list41 = commandLine39.getArgList();
        java.lang.String[] strArray43 = commandLine39.getOptionValues('=');
        java.lang.Object obj45 = commandLine39.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.Iterator iterator46 = commandLine39.iterator();
        java.util.Iterator iterator47 = commandLine39.iterator();
        java.util.List list48 = commandLine39.getArgList();
        java.lang.String str51 = commandLine39.getOptionValue('=', "[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(iterator46);
        org.junit.Assert.assertNotNull(iterator47);
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]" + "'", str51, "[ option: 4  :: null :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]");
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        char char2 = option1.getValueSeparator();
        boolean boolean3 = option1.hasArg();
        boolean boolean4 = option1.hasOptionalArg();
        java.lang.String str6 = option1.getValue(0);
        java.lang.String[] strArray7 = option1.getValues();
        int int8 = option1.getId();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine9.getOptionValues("hi!");
        java.lang.String[] strArray12 = commandLine9.getArgs();
        java.util.Iterator iterator13 = commandLine9.iterator();
        java.lang.String str16 = commandLine9.getOptionValue("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]", "arg");
        java.lang.Object obj18 = commandLine9.getOptionObject("[ option: 4  :: null ]");
        option1.setType((java.lang.Object) "[ option: 4  :: null ]");
        boolean boolean20 = option1.isRequired();
        boolean boolean21 = option1.hasArgs();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\000' + "'", char2 == '\000');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        java.util.Collection collection35 = options22.getOptions();
        java.lang.String[] strArray36 = null;
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options22, strArray36, properties37, false);
        java.lang.Class<?> wildcardClass40 = options22.getClass();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptionGroups();
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('4');
        option61.setDescription("");
        option61.setLongOpt("hi!");
        boolean boolean66 = option61.hasArgName();
        org.apache.commons.cli.Options options67 = options53.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('4');
        option71.setDescription("");
        org.apache.commons.cli.Options options74 = options69.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine75 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray77 = commandLine75.getOptionValues("hi!");
        java.lang.String str80 = commandLine75.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str82 = commandLine75.getOptionValue("arg");
        java.lang.String[] strArray83 = commandLine75.getArgs();
        java.lang.String[] strArray85 = posixParser68.flatten(options74, strArray83, false);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options53, strArray85);
        java.lang.Object obj88 = commandLine86.getOptionObject('a');
        java.lang.Object obj90 = commandLine86.getOptionObject("arg");
        java.lang.Object obj92 = commandLine86.getOptionObject('=');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNull(strArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str80, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: hi!", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String[] strArray84 = commandLine81.getOptionValues('=');
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "4");
        java.lang.String str89 = option87.getValue(97);
        commandLine81.addOption(option87);
        java.lang.String[] strArray91 = option87.getValues();
        boolean boolean92 = option87.hasLongOpt();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNull(strArray84);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String[] strArray10 = commandLine7.getArgs();
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser0.parse(options1, strArray10, properties11);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ] ]} ] [ long {} ]", true);
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup20 = options17.getOptionGroup(option19);
        org.apache.commons.cli.Option option22 = org.apache.commons.cli.OptionBuilder.create('4');
        char char23 = option22.getValueSeparator();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create('4');
        option25.setDescription("");
        option22.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup29 = options17.getOptionGroup(option22);
        boolean boolean31 = options17.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        option35.setDescription("");
        org.apache.commons.cli.Options options38 = options33.addOption(option35);
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.lang.String[] strArray49 = posixParser32.flatten(options38, strArray47, false);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser16.parse(options17, strArray49, properties50);
        java.lang.String str52 = options17.toString();
        org.apache.commons.cli.CommandLine commandLine53 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray55 = commandLine53.getOptionValues("hi!");
        java.lang.Object obj57 = commandLine53.getOptionObject('a');
        java.lang.String str60 = commandLine53.getOptionValue('\000', "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray61 = commandLine53.getArgs();
        java.lang.String[] strArray63 = posixParser0.flatten(options17, strArray61, false);
        posixParser0.burstToken("[ option: 4  :: null :: [ option: 4  ::  ] ]", true);
        posixParser0.burstToken("", true);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertNotNull(option22);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str52, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!" + "'", str60, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup43 = options40.getOptionGroup(option42);
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup46 = options40.getOptionGroup(option45);
        java.util.List list47 = options40.getRequiredOptions();
        java.util.Collection collection48 = options40.getOptions();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String str61 = commandLine56.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str63 = commandLine56.getOptionValue("arg");
        java.lang.String[] strArray64 = commandLine56.getArgs();
        java.lang.String[] strArray66 = posixParser49.flatten(options55, strArray64, false);
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser0.parse(options40, strArray64, properties67, true);
        java.lang.String str70 = options40.toString();
        java.lang.String str71 = options40.toString();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str70, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("4", false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        java.util.Collection collection45 = options39.getOptionGroups();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option47.setLongOpt("hi!");
        boolean boolean52 = option47.hasArgName();
        org.apache.commons.cli.Options options53 = options39.addOption(option47);
        java.util.List list54 = options53.helpOptions();
        org.apache.commons.cli.Options options59 = options53.addOption("", "[ option: 4  ::  ]", true, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine60.getOptionValues("hi!");
        java.lang.String[] strArray63 = commandLine60.getArgs();
        java.lang.String str65 = commandLine60.getOptionValue("hi!");
        boolean boolean67 = commandLine60.hasOption("");
        java.lang.String str70 = commandLine60.getOptionValue("[ option: 4  :: null ]", "org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String[] strArray72 = commandLine60.getOptionValues('4');
        java.lang.String[] strArray73 = commandLine60.getArgs();
        java.lang.Object obj75 = commandLine60.getOptionObject("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String[] strArray76 = commandLine60.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray76);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.apache.commons.cli.MissingOptionException: hi!" + "'", str70, "org.apache.commons.cli.MissingOptionException: hi!");
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine77);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.Object obj2 = commandLine0.getOptionObject('#');
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option4 = org.apache.commons.cli.OptionBuilder.create('4');
        option4.setDescription("");
        org.apache.commons.cli.Options options7 = options2.addOption(option4);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option11 = org.apache.commons.cli.OptionBuilder.create('4');
        option11.setDescription("");
        org.apache.commons.cli.Options options14 = options9.addOption(option11);
        org.apache.commons.cli.CommandLine commandLine15 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray17 = commandLine15.getOptionValues("hi!");
        java.lang.String[] strArray18 = commandLine15.getArgs();
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser8.parse(options9, strArray18, properties19);
        org.apache.commons.cli.CommandLine commandLine22 = posixParser1.parse(options7, strArray18, false);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup26 = options23.getOptionGroup(option25);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        char char29 = option28.getValueSeparator();
        org.apache.commons.cli.Option option31 = org.apache.commons.cli.OptionBuilder.create('4');
        option31.setDescription("");
        option28.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup35 = options23.getOptionGroup(option28);
        boolean boolean37 = options23.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        option41.setDescription("");
        org.apache.commons.cli.Options options44 = options39.addOption(option41);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine45.getOptionValues("hi!");
        java.lang.String[] strArray48 = commandLine45.getArgs();
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser38.parse(options39, strArray48, properties49);
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser1.parse(options23, strArray48, properties51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        option56.setDescription("");
        org.apache.commons.cli.Options options59 = options54.addOption(option56);
        java.util.Collection collection60 = options54.getOptionGroups();
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('4');
        option62.setDescription("");
        option62.setLongOpt("hi!");
        boolean boolean67 = option62.hasArgName();
        org.apache.commons.cli.Options options68 = options54.addOption(option62);
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create('4');
        option72.setDescription("");
        org.apache.commons.cli.Options options75 = options70.addOption(option72);
        org.apache.commons.cli.CommandLine commandLine76 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine76.getOptionValues("hi!");
        java.lang.String str81 = commandLine76.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str83 = commandLine76.getOptionValue("arg");
        java.lang.String[] strArray84 = commandLine76.getArgs();
        java.lang.String[] strArray86 = posixParser69.flatten(options75, strArray84, false);
        org.apache.commons.cli.CommandLine commandLine87 = posixParser1.parse(options54, strArray86);
        java.lang.String[] strArray93 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "[ option:  +ARG ::  ]", "hi!", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", "[ option:    :: null ]" };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options54, strArray93, properties94, false);
        org.apache.commons.cli.Option option98 = options54.getOption("[ option: 4  :: null ::  ]");
        java.util.Collection collection99 = options54.getOptions();
        org.junit.Assert.assertNotNull(option4);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNull(optionGroup35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str81, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNull(option98);
        org.junit.Assert.assertNotNull(collection99);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup42 = options39.getOptionGroup(option41);
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        char char45 = option44.getValueSeparator();
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('4');
        option47.setDescription("");
        option44.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup51 = options39.getOptionGroup(option44);
        java.util.List list52 = options39.getRequiredOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options39, strArray53, true);
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("arg", false, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.util.ListIterator listIterator60 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option59, listIterator60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertNull(optionGroup42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNotNull(commandLine55);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        java.util.List list53 = commandLine52.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(list53);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str85 = commandLine81.getOptionValue('#', "[ option: 4  :: null ]");
        java.lang.String[] strArray86 = commandLine81.getArgs();
        commandLine81.addArg("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!");
        boolean boolean90 = commandLine81.hasOption('#');
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ option: 4  :: null ]" + "'", str85, "[ option: 4  :: null ]");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        boolean boolean37 = commandLine35.hasOption('4');
        boolean boolean39 = commandLine35.hasOption("");
        java.lang.String[] strArray41 = commandLine35.getOptionValues("[ option: 4  :: null ::  ]");
        commandLine35.addArg("[ option: 4  :: null ::  ]");
        boolean boolean45 = commandLine35.hasOption("[ option:   [ Options: [ short {=[ option:   :: arg ],  =[ option:    :: [ option: 4  ::  ] ], 4=[ option: 4  :: null ], arg=[ option: arg  :: null ]} ] [ long {} ]  :: null ]");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create('4');
        option23.setDescription("");
        org.apache.commons.cli.Options options26 = options21.addOption(option23);
        java.util.Collection collection27 = options21.getOptionGroups();
        org.apache.commons.cli.Options options31 = options21.addOption("", false, "arg");
        java.util.List list32 = options31.getRequiredOptions();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options35 = options31.addOption(option34);
        boolean boolean37 = options31.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        java.util.Collection collection38 = options31.getOptionGroups();
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine39.getOptionValues("hi!");
        java.lang.String str44 = commandLine39.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str46 = commandLine39.getOptionValue("arg");
        java.lang.String[] strArray47 = commandLine39.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options31, strArray47, properties48, true);
        org.apache.commons.cli.Option[] optionArray51 = commandLine50.getOptions();
        java.lang.Object obj53 = commandLine50.getOptionObject("arg");
        java.util.List list54 = commandLine50.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str44, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(optionArray51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(list54);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        java.util.Collection collection22 = options6.getOptions();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create('4');
        char char25 = option24.getValueSeparator();
        org.apache.commons.cli.Options options26 = options6.addOption(option24);
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create('4');
        option28.setArgs((int) (short) 100);
        option28.setArgName("[ option: 4  :: null ]");
        java.lang.String str33 = option28.getLongOpt();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup37 = options34.getOptionGroup(option36);
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup40 = options34.getOptionGroup(option39);
        option28.setType((java.lang.Object) options34);
        org.apache.commons.cli.Options options42 = options6.addOption(option28);
        org.apache.commons.cli.Option option44 = options42.getOption("[ option: 4  :: null ::  ]");
        org.apache.commons.cli.Options options49 = options42.addOption("", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi!", false, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!");
        java.util.List list50 = options49.helpOptions();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNull(optionGroup40);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNull(option44);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(list50);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option10 = org.apache.commons.cli.OptionBuilder.create('4');
        option10.setDescription("");
        org.apache.commons.cli.Options options13 = options8.addOption(option10);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray16 = commandLine14.getOptionValues("hi!");
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser7.parse(options8, strArray17, properties18);
        org.apache.commons.cli.CommandLine commandLine21 = posixParser0.parse(options6, strArray17, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup25 = options22.getOptionGroup(option24);
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('4');
        char char28 = option27.getValueSeparator();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('4');
        option30.setDescription("");
        option27.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup34 = options22.getOptionGroup(option27);
        boolean boolean36 = options22.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create('4');
        option40.setDescription("");
        org.apache.commons.cli.Options options43 = options38.addOption(option40);
        org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine44.getOptionValues("hi!");
        java.lang.String[] strArray47 = commandLine44.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser37.parse(options38, strArray47, properties48);
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options22, strArray47, properties50, true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setDescription("");
        org.apache.commons.cli.Options options58 = options53.addOption(option55);
        java.util.Collection collection59 = options53.getOptions();
        java.lang.String[] strArray60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options53, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create('4');
        option66.setDescription("");
        org.apache.commons.cli.Options options69 = options64.addOption(option66);
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine70.getOptionValues("hi!");
        java.lang.String[] strArray73 = commandLine70.getArgs();
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser63.parse(options64, strArray73, properties74);
        java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options64, strArray78, properties79, true);
        java.util.List list82 = commandLine81.getArgList();
        java.lang.String str84 = commandLine81.getOptionValue('=');
        java.lang.String[] strArray86 = commandLine81.getOptionValues(" ");
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option10);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(strArray86);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup39 = options36.getOptionGroup(option38);
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create('4');
        char char42 = option41.getValueSeparator();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create('4');
        option44.setDescription("");
        option41.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup48 = options36.getOptionGroup(option41);
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean51 = option50.isRequired();
        org.apache.commons.cli.Options options52 = options36.addOption(option50);
        java.util.List list53 = options52.getRequiredOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('4');
        option55.setArgs((int) (short) 100);
        option55.setArgName("[ option: 4  :: null ]");
        java.lang.String str60 = option55.getLongOpt();
        java.lang.String str62 = option55.getValue((int) (short) -1);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine63.getOptionValues("hi!");
        java.lang.String str68 = commandLine63.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str70 = commandLine63.getOptionValue("arg");
        java.lang.String[] strArray71 = commandLine63.getArgs();
        option55.setType((java.lang.Object) strArray71);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options52, strArray71, properties73);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.UnrecognizedOptionException: hi!", false);
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str68, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray2 = commandLine0.getOptionValues("hi!");
        java.lang.String[] strArray3 = commandLine0.getArgs();
        java.lang.String str5 = commandLine0.getOptionValue("hi!");
        boolean boolean7 = commandLine0.hasOption("");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: hi!");
        boolean boolean11 = commandLine0.hasOption("[ Options: [ short {4=[ option: 4  ::  ]} ] [ long {} ]");
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str15 = option13.getValue("");
        commandLine0.addOption(option13);
        java.util.List list17 = commandLine0.getArgList();
        commandLine0.addArg("org.apache.commons.cli.MissingOptionException: hi!");
        java.lang.String str22 = commandLine0.getOptionValue("org.apache.commons.cli.MissingOptionException: [ option: 4  :: null ]", "[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        java.lang.String str24 = commandLine0.getOptionValue("[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        java.lang.Object obj26 = commandLine0.getOptionObject("[ option:  +ARG :: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: hi! ]");
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]" + "'", str22, "[ Options: [ short {4=[ option: 4  ::  :: [ option: arg [ option: 4  :: null ] +ARG :: 4 ] ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup4 = options1.getOptionGroup(option3);
        org.apache.commons.cli.Option option6 = org.apache.commons.cli.OptionBuilder.create('4');
        char char7 = option6.getValueSeparator();
        org.apache.commons.cli.Option option9 = org.apache.commons.cli.OptionBuilder.create('4');
        option9.setDescription("");
        option6.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup13 = options1.getOptionGroup(option6);
        boolean boolean15 = options1.hasOption("org.apache.commons.cli.MissingOptionException: hi!");
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('4');
        option19.setDescription("");
        org.apache.commons.cli.Options options22 = options17.addOption(option19);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine23.getOptionValues("hi!");
        java.lang.String str28 = commandLine23.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str30 = commandLine23.getOptionValue("arg");
        java.lang.String[] strArray31 = commandLine23.getArgs();
        java.lang.String[] strArray33 = posixParser16.flatten(options22, strArray31, false);
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.parse(options1, strArray33, properties34);
        posixParser0.burstToken("[ option: 4  :: null ::  ]", true);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  :: null ]} ] [ long {} ]", false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create('4');
        option45.setDescription("");
        org.apache.commons.cli.Options options48 = options43.addOption(option45);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        option52.setDescription("");
        org.apache.commons.cli.Options options55 = options50.addOption(option52);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine56.getOptionValues("hi!");
        java.lang.String[] strArray59 = commandLine56.getArgs();
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser49.parse(options50, strArray59, properties60);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser42.parse(options48, strArray59, false);
        java.util.Collection collection64 = options48.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('4');
        option68.setDescription("");
        org.apache.commons.cli.Options options71 = options66.addOption(option68);
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine72.getOptionValues("hi!");
        java.lang.String str77 = commandLine72.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str79 = commandLine72.getOptionValue("arg");
        java.lang.String[] strArray80 = commandLine72.getArgs();
        java.lang.String[] strArray82 = posixParser65.flatten(options71, strArray80, false);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options48, strArray80, false);
        java.lang.Object obj86 = commandLine84.getOptionObject("[ option: 4  ::  ]");
        java.lang.Object obj88 = commandLine84.getOptionObject('=');
        java.util.List list89 = commandLine84.getArgList();
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertNotNull(option6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNull(optionGroup13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str28, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str77, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(list89);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = org.apache.commons.cli.OptionBuilder.create('4');
        option3.setDescription("");
        org.apache.commons.cli.Options options6 = options1.addOption(option3);
        org.apache.commons.cli.CommandLine commandLine7 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray9 = commandLine7.getOptionValues("hi!");
        java.lang.String str12 = commandLine7.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str14 = commandLine7.getOptionValue("arg");
        java.lang.String[] strArray15 = commandLine7.getArgs();
        java.lang.String[] strArray17 = posixParser0.flatten(options6, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('4');
        option20.setDescription("");
        org.apache.commons.cli.Options options23 = options18.addOption(option20);
        java.util.Collection collection24 = options18.getOptionGroups();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create('4');
        option26.setDescription("");
        option26.setLongOpt("hi!");
        boolean boolean31 = option26.hasArgName();
        org.apache.commons.cli.Options options32 = options18.addOption(option26);
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine33.getOptionValues("hi!");
        java.lang.String[] strArray36 = commandLine33.getArgs();
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser0.parse(options18, strArray36, properties37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('4');
        option42.setDescription("");
        org.apache.commons.cli.Options options45 = options40.addOption(option42);
        java.util.Collection collection46 = options40.getOptionGroups();
        org.apache.commons.cli.Options options50 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = org.apache.commons.cli.OptionBuilder.create(' ');
        org.apache.commons.cli.OptionGroup optionGroup54 = options51.getOptionGroup(option53);
        org.apache.commons.cli.Option option56 = org.apache.commons.cli.OptionBuilder.create('4');
        char char57 = option56.getValueSeparator();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create('4');
        option59.setDescription("");
        option56.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup63 = options51.getOptionGroup(option56);
        boolean boolean64 = option56.hasArgName();
        org.apache.commons.cli.Options options65 = options40.addOption(option56);
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine66.getOptionValues("hi!");
        java.lang.String str71 = commandLine66.getOptionValue("hi!", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        java.lang.String str73 = commandLine66.getOptionValue("arg");
        java.lang.String[] strArray74 = commandLine66.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options40, strArray74, properties75);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('4');
        char char80 = option79.getValueSeparator();
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create('4');
        option82.setDescription("");
        option79.setType((java.lang.Object) "");
        org.apache.commons.cli.OptionGroup optionGroup86 = options77.getOptionGroup(option79);
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options77, strArray89, properties90);
        org.apache.commons.cli.Options options92 = null;
        java.lang.String[] strArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine95 = posixParser0.parse(options92, strArray93, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(option3);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str12, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(option56);
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + '\000' + "'", char57 == '\000');
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertNull(optionGroup63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ], 4=[ option: 4  ::  ]} ] [ long {} ]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertNull(optionGroup86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create('4');
        option2.setDescription("");
        org.apache.commons.cli.Options options5 = options0.addOption(option2);
        java.util.Collection collection6 = options0.getOptionGroups();
        org.apache.commons.cli.Options options10 = options0.addOption("", false, "arg");
        java.util.List list11 = options10.getRequiredOptions();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("arg");
        org.apache.commons.cli.Options options14 = options10.addOption(option13);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create('4');
        option17.setDescription("");
        org.apache.commons.cli.Options options20 = options15.addOption(option17);
        java.util.List list21 = options15.helpOptions();
        org.apache.commons.cli.Options options26 = options15.addOption("arg", "org.apache.commons.cli.UnrecognizedOptionException: hi!", false, "");
        org.apache.commons.cli.CommandLine commandLine27 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray29 = commandLine27.getOptionValues("hi!");
        java.lang.String[] strArray30 = commandLine27.getArgs();
        java.util.Iterator iterator31 = commandLine27.iterator();
        java.lang.String str33 = commandLine27.getOptionValue("[ option:    :: null ]");
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('4');
        java.lang.String str37 = option35.getValue("arg");
        org.apache.commons.cli.MissingOptionException missingOptionException39 = new org.apache.commons.cli.MissingOptionException("hi!");
        boolean boolean40 = option35.equals((java.lang.Object) "hi!");
        option35.setValueSeparator('=');
        boolean boolean43 = option35.hasValueSeparator();
        java.lang.String str44 = option35.getArgName();
        commandLine27.addOption(option35);
        org.apache.commons.cli.OptionGroup optionGroup46 = options26.getOptionGroup(option35);
        int int47 = option35.getArgs();
        java.lang.String str48 = option35.getDescription();
        org.apache.commons.cli.Options options49 = options10.addOption(option35);
        java.util.List list50 = options49.helpOptions();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(collection6);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "arg" + "'", str37, "arg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg");
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(list50);
    }
}
