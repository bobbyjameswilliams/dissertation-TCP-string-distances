package org.apache.commons.cli;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Class<?> wildcardClass15 = posixParser0.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create("");
        option16.setLongOpt("hi!");
        java.lang.String str19 = option16.getOpt();
        java.util.ListIterator listIterator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option16, listIterator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.Class<?> wildcardClass11 = commandLine8.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options53 = options2.addOption("[ option:   +ARG ::  ]", "", true, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.OptionGroup optionGroup17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options18 = options2.addOptionGroup(optionGroup17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String str12 = commandLine8.getOptionValue("[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj14 = commandLine8.getOptionObject("org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create("");
        org.apache.commons.cli.Options options24 = options15.addOption(option23);
        java.util.ListIterator listIterator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option23, listIterator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertNotNull(options24);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        java.lang.Class<?> wildcardClass53 = posixParser0.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options55 = options49.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser65.parse(options66, strArray71, properties72);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine90 = posixParser74.parse(options76, strArray89);
        java.lang.String[] strArray92 = posixParser56.flatten(options66, strArray89, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser32.parse(options49, strArray92, properties93, false);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options19, strArray92, properties96);
        boolean boolean99 = commandLine97.hasOption("[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String str12 = commandLine8.getOptionValue("[ Options: [ short {} ] [ long {} ]");
        commandLine8.addArg("[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder17 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options2);
        java.util.Collection collection18 = options2.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options23 = options2.addOption("org.apache.commons.cli.ParseException: ", "", true, "org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(optionBuilder17);
        org.junit.Assert.assertNotNull(collection18);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options49 = options45.addOption("org.apache.commons.cli.ParseException: ", true, "[ Options: [ short {} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str23 = option21.getValue("");
        option21.setValueSeparator('4');
        java.util.ListIterator listIterator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option21, listIterator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray1 = commandLine0.getArgs();
        java.lang.String str4 = commandLine0.getOptionValue('4', "a");
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "a" + "'", str4, "a");
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.Option option35 = options3.getOption("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(option35);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str2 = commandLine0.getOptionValue('#');
        java.lang.String str4 = commandLine0.getOptionValue("hi!");
        java.lang.String str6 = commandLine0.getOptionValue(' ');
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser53.parse(options55, strArray64, properties65, true);
        org.apache.commons.cli.Option option69 = options55.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('a');
        option71.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup74 = options55.getOptionGroup(option71);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = posixParser0.flatten(options55, strArray81, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options90 = options55.addOption("org.apache.commons.cli.ParseException: ", "org.apache.commons.cli.MissingOptionException: ", false, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(option69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        java.util.List list46 = options10.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(list46);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.util.Iterator iterator23 = commandLine14.iterator();
        boolean boolean25 = commandLine14.hasOption('\000');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = options2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options27 = options2.addOption("[ option:   :: null ]", "", true, "[ option:   :: null ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        java.lang.String[] strArray50 = commandLine49.getArgs();
        org.apache.commons.cli.Option[] optionArray51 = commandLine49.getOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(optionArray51);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        boolean boolean14 = commandLine8.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str20 = option19.toString();
        boolean boolean22 = option19.equals((java.lang.Object) 100L);
        char char23 = option19.getValueSeparator();
        commandLine8.addOption(option19);
        java.lang.String str27 = commandLine8.getOptionValue("", "hi!");
        org.apache.commons.cli.OptionBuilder optionBuilder28 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) str27);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option:   +ARG ::  ]" + "'", str20, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(optionBuilder28);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options49 = options45.addOption("org.apache.commons.cli.MissingArgumentException: a", true, "org.apache.commons.cli.MissingOptionException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String[] strArray18 = commandLine16.getArgs();
        java.lang.Object obj20 = commandLine16.getOptionObject('4');
        java.lang.String str23 = commandLine16.getOptionValue("org.apache.commons.cli.MissingArgumentException: hi!", "");
        java.lang.String[] strArray25 = commandLine16.getOptionValues('4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(strArray25);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        option1.setOptionalArg(false);
        boolean boolean4 = option1.hasLongOpt();
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String str7 = commandLine5.getOptionValue('#');
        option1.setType((java.lang.Object) '#');
        java.lang.String str9 = option1.getDescription();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.Options options34 = null;
        java.lang.String[] strArray35 = null;
        java.util.Properties properties36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine38 = posixParser0.parse(options34, strArray35, properties36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options55 = options49.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser65.parse(options66, strArray71, properties72);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine90 = posixParser74.parse(options76, strArray89);
        java.lang.String[] strArray92 = posixParser56.flatten(options66, strArray89, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser32.parse(options49, strArray92, properties93, false);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options19, strArray92, properties96);
        java.lang.String[] strArray98 = commandLine97.getArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(strArray98);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String str19 = commandLine16.getOptionValue('a');
        java.util.Iterator iterator20 = commandLine16.iterator();
        java.lang.Object obj22 = commandLine16.getOptionObject('\000');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create("");
        option35.setLongOpt("hi!");
        int int38 = option35.getArgs();
        option35.setRequired(false);
        java.util.ListIterator listIterator41 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option35, listIterator41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('a');
        option19.setDescription("");
        option19.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str24 = option19.getDescription();
        org.apache.commons.cli.Options options25 = options2.addOption(option19);
        java.util.List list26 = options2.helpOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:   +ARG ::  ]" + "'", str24, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options55 = options49.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser65.parse(options66, strArray71, properties72);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine90 = posixParser74.parse(options76, strArray89);
        java.lang.String[] strArray92 = posixParser56.flatten(options66, strArray89, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser32.parse(options49, strArray92, properties93, false);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options19, strArray92, properties96);
        java.util.List list98 = options19.helpOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(list98);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        java.util.Collection collection9 = options1.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("a");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        option20.setArgName("hi!");
        commandLine0.addOption(option20);
        java.lang.Object obj26 = commandLine0.getOptionObject('a');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options41 = options10.addOption("[ Options: [ short {} ] [ long {} ]", true, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.Options options49 = options11.addOption("", "arg", true, "");
        org.apache.commons.cli.Option option51 = options11.getOption("a");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNull(option51);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        posixParser0.burstToken("[ option:   +ARG ::  ]", false);
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str41 = option39.getValue("");
        java.lang.String str42 = option39.getKey();
        java.util.ListIterator listIterator43 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option39, listIterator43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        posixParser0.burstToken("arg", false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('a');
        option19.setDescription("");
        option19.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str24 = option19.getDescription();
        org.apache.commons.cli.Options options25 = options2.addOption(option19);
        boolean boolean26 = option19.hasValueSeparator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:   +ARG ::  ]" + "'", str24, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        boolean boolean27 = commandLine14.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list28 = commandLine14.getArgList();
        java.util.List list29 = commandLine14.getArgList();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(list29);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        boolean boolean38 = options10.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Options options42 = options10.addOption("", true, "hi!");
        boolean boolean44 = options10.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options49 = options10.addOption("org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: a", true, "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options55 = options49.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser65.parse(options66, strArray71, properties72);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine90 = posixParser74.parse(options76, strArray89);
        java.lang.String[] strArray92 = posixParser56.flatten(options66, strArray89, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser32.parse(options49, strArray92, properties93, false);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options19, strArray92, properties96);
        java.lang.String[] strArray99 = commandLine97.getOptionValues('a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNull(strArray99);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        java.lang.String str58 = commandLine55.getOptionValue('a', "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.OptionGroup optionGroup39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options40 = options10.addOptionGroup(optionGroup39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        boolean boolean21 = commandLine14.hasOption("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        boolean boolean21 = commandLine14.hasOption('4');
        java.lang.String[] strArray23 = commandLine14.getOptionValues("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strArray23);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder15 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(optionBuilder15);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        boolean boolean27 = commandLine14.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list28 = commandLine14.getArgList();
        java.lang.String[] strArray30 = commandLine14.getOptionValues("hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(strArray30);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.util.Iterator iterator23 = commandLine14.iterator();
        org.apache.commons.cli.Option[] optionArray24 = commandLine14.getOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(optionArray24);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        org.apache.commons.cli.Option option50 = options2.getOption("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray1 = commandLine0.getArgs();
        org.apache.commons.cli.Option[] optionArray2 = commandLine0.getOptions();
        java.lang.Object obj4 = commandLine0.getOptionObject("org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(optionArray2);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        java.lang.String[] strArray27 = commandLine14.getOptionValues("org.apache.commons.cli.MissingOptionException: ");
        java.lang.String str29 = commandLine14.getOptionValue("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        boolean boolean14 = commandLine8.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str20 = option19.toString();
        boolean boolean22 = option19.equals((java.lang.Object) 100L);
        char char23 = option19.getValueSeparator();
        commandLine8.addOption(option19);
        boolean boolean26 = commandLine8.hasOption("org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option:   +ARG ::  ]" + "'", str20, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        boolean boolean27 = commandLine14.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list28 = commandLine14.getArgList();
        boolean boolean30 = commandLine14.hasOption('4');
        boolean boolean32 = commandLine14.hasOption("a");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        org.apache.commons.cli.Option[] optionArray50 = commandLine49.getOptions();
        java.lang.Object obj52 = commandLine49.getOptionObject('4');
        java.lang.Object obj54 = commandLine49.getOptionObject('4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(optionArray50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Option option17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options18 = options2.addOption(option17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String[] strArray18 = commandLine16.getArgs();
        java.lang.Object obj20 = commandLine16.getOptionObject('4');
        java.lang.String str22 = commandLine16.getOptionValue('#');
        org.apache.commons.cli.Option[] optionArray23 = commandLine16.getOptions();
        boolean boolean25 = commandLine16.hasOption(' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(optionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder17 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options2);
        org.apache.commons.cli.Option option19 = options2.getOption("a");
        org.apache.commons.cli.Option option21 = options2.getOption("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(optionBuilder17);
        org.junit.Assert.assertNull(option19);
        org.junit.Assert.assertNull(option21);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser53.parse(options55, strArray64, properties65, true);
        org.apache.commons.cli.Option option69 = options55.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('a');
        option71.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup74 = options55.getOptionGroup(option71);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = posixParser0.flatten(options55, strArray81, true);
        java.util.List list86 = options55.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(option69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(list86);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('a');
        option1.setRequired(false);
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser4.parse(options5, strArray10, properties11);
        org.apache.commons.cli.PosixParser posixParser13 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser13.parse(options14, strArray19, properties20);
        org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser23 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser23.parse(options24, strArray29, properties30);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine38 = posixParser22.parse(options24, strArray37);
        java.lang.String[] strArray40 = posixParser4.flatten(options14, strArray37, true);
        java.util.List list41 = options14.getRequiredOptions();
        java.util.Collection collection42 = options14.getOptions();
        org.apache.commons.cli.Option option44 = org.apache.commons.cli.OptionBuilder.create("");
        option44.setLongOpt("hi!");
        int int47 = option44.getArgs();
        java.lang.String str48 = option44.getLongOpt();
        org.apache.commons.cli.Options options49 = options14.addOption(option44);
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser51.parse(options52, strArray57, properties58);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser50.parse(options52, strArray61, properties62, true);
        org.apache.commons.cli.Option option66 = options52.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('a');
        option68.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup71 = options52.getOptionGroup(option68);
        java.lang.String str72 = option68.getKey();
        option68.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options75 = options49.addOption(option68);
        option1.setType((java.lang.Object) options49);
        int int77 = option1.getId();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertNotNull(option44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNull(option66);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "a" + "'", str72, "a");
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        java.lang.String[] strArray3 = commandLine0.getOptionValues("org.apache.commons.cli.MissingArgumentException: a");
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertNull(strArray3);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        boolean boolean21 = commandLine14.hasOption('4');
        java.lang.Object obj23 = commandLine14.getOptionObject('#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser47.parse(options48, strArray53, properties54);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser46.parse(options48, strArray57, properties58, true);
        org.apache.commons.cli.Option option62 = options48.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('a');
        option64.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup67 = options48.getOptionGroup(option64);
        java.lang.String str68 = option64.getKey();
        option64.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options71 = options45.addOption(option64);
        org.apache.commons.cli.OptionGroup optionGroup72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options71.addOptionGroup(optionGroup72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNull(option62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "a" + "'", str68, "a");
        org.junit.Assert.assertNotNull(options71);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('a');
        option19.setDescription("");
        option19.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str24 = option19.getDescription();
        org.apache.commons.cli.Options options25 = options2.addOption(option19);
        boolean boolean27 = options25.hasOption("org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:   +ARG ::  ]" + "'", str24, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("a");
        java.lang.Object obj16 = commandLine0.getOptionObject('a');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.Option[] optionArray9 = commandLine8.getOptions();
        java.util.List list10 = commandLine8.getArgList();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(optionArray9);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        boolean boolean21 = commandLine14.hasOption('4');
        commandLine14.addArg("org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('a');
        option19.setDescription("");
        option19.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str24 = option19.getDescription();
        org.apache.commons.cli.Options options25 = options2.addOption(option19);
        boolean boolean27 = options2.hasOption("org.apache.commons.cli.MissingArgumentException: a");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:   +ARG ::  ]" + "'", str24, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder17 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options2);
        java.util.Collection collection18 = options2.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options23 = options2.addOption("org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]", "org.apache.commons.cli.MissingArgumentException: a", true, "org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(optionBuilder17);
        org.junit.Assert.assertNotNull(collection18);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        org.apache.commons.cli.Options options60 = options36.addOption("", "org.apache.commons.cli.MissingOptionException: arg", false, "a");
        org.apache.commons.cli.OptionGroup optionGroup61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options62 = options60.addOptionGroup(optionGroup61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(options60);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser34.parse(options35, strArray40, properties41);
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser53.parse(options54, strArray59, properties60);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine68 = posixParser52.parse(options54, strArray67);
        java.lang.String[] strArray70 = posixParser34.flatten(options44, strArray67, true);
        java.util.List list71 = options44.getRequiredOptions();
        java.util.Collection collection72 = options44.getOptions();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create("");
        option74.setLongOpt("hi!");
        int int77 = option74.getArgs();
        java.lang.String str78 = option74.getLongOpt();
        org.apache.commons.cli.Options options79 = options44.addOption(option74);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('a');
        option81.setDescription("");
        option81.setLongOpt("");
        org.apache.commons.cli.OptionGroup optionGroup86 = options79.getOptionGroup(option81);
        java.util.ListIterator listIterator87 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option81, listIterator87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertNull(optionGroup86);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.lang.Class<?> wildcardClass17 = commandLine16.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.OptionGroup optionGroup18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options19 = options2.addOptionGroup(optionGroup18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        boolean boolean14 = commandLine8.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str20 = option19.toString();
        boolean boolean22 = option19.equals((java.lang.Object) 100L);
        char char23 = option19.getValueSeparator();
        commandLine8.addOption(option19);
        java.lang.String str27 = commandLine8.getOptionValue("", "hi!");
        boolean boolean29 = commandLine8.hasOption("org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option:   +ARG ::  ]" + "'", str20, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('a');
        option35.setDescription("");
        option35.setLongOpt("");
        boolean boolean40 = option35.isRequired();
        java.lang.String str41 = option35.getKey();
        commandLine33.addOption(option35);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "a" + "'", str41, "a");
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        java.lang.String str16 = commandLine0.getOptionValue("a");
        java.lang.Object obj18 = commandLine0.getOptionObject(' ');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        java.lang.String str37 = commandLine34.getOptionValue("org.apache.commons.cli.MissingOptionException: ", "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str37, "org.apache.commons.cli.MissingArgumentException: hi!");
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        posixParser0.burstToken("hi!", false);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options73 = options67.addOption(option72);
        java.lang.String[] strArray80 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.ParseException: ", "hi!", "", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", "[ Options: [ short {} ] [ long {} ]" };
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options73, strArray80, properties81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options87 = options73.addOption("org.apache.commons.cli.MissingOptionException: ", "[ option:   +ARG ::  ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        boolean boolean2 = commandLine0.hasOption('4');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = option18.getKey();
        option18.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.lang.String str25 = option18.getKey();
        int int26 = option18.getArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "a" + "'", str22, "a");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "a" + "'", str25, "a");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        posixParser0.burstToken("hi!", false);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.CommandLine commandLine68 = new org.apache.commons.cli.CommandLine();
        java.lang.String str71 = commandLine68.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray72 = commandLine68.getArgs();
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser0.parse(options67, strArray72, properties73, true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine75);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create("");
        option19.setLongOpt("hi!");
        option19.setOptionalArg(true);
        commandLine14.addOption(option19);
        option19.setRequired(true);
        // The following exception was thrown during execution in test generation
        try {
            option19.addValue("[ option:   :: null ]");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option19);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        java.util.List list35 = options17.getRequiredOptions();
        org.apache.commons.cli.OptionGroup optionGroup36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options37 = options17.addOptionGroup(optionGroup36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(list35);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        boolean boolean46 = option40.hasLongOpt();
        // The following exception was thrown during execution in test generation
        try {
            int int47 = option40.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.Collection collection17 = options2.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(collection17);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create("");
        option19.setLongOpt("hi!");
        option19.setOptionalArg(true);
        commandLine14.addOption(option19);
        option19.setRequired(true);
        option19.setOptionalArg(false);
        java.lang.String str29 = option19.getArgName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str21 = commandLine14.getOptionValue("hi!");
        java.lang.String[] strArray23 = commandLine14.getOptionValues('4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strArray23);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        boolean boolean13 = option9.hasArg();
        option9.setOptionalArg(false);
        // The following exception was thrown during execution in test generation
        try {
            option9.addValue("a");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String str19 = commandLine16.getOptionValue('a');
        java.lang.String str21 = commandLine16.getOptionValue("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        org.apache.commons.cli.Options options25 = options15.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser26.parse(options27, strArray32, properties33);
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser36.parse(options37, strArray42, properties43);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser35.parse(options37, strArray46, properties47, true);
        org.apache.commons.cli.Option option51 = options37.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder52 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options37);
        java.util.Collection collection53 = options37.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser55.parse(options56, strArray61, properties62);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser54.parse(options56, strArray65, properties66, true);
        java.lang.String[] strArray70 = posixParser26.flatten(options37, strArray65, false);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options25, strArray65, properties71);
        org.apache.commons.cli.Option option77 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str78 = option77.toString();
        int int79 = option77.getArgs();
        option77.setLongOpt("");
        option77.addValue("");
        java.lang.String str84 = option77.getArgName();
        java.lang.String str85 = option77.getValue();
        org.apache.commons.cli.Options options86 = options25.addOption(option77);
        java.lang.String str87 = options86.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNull(option51);
        org.junit.Assert.assertNotNull(optionBuilder52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ option:   +ARG ::  ]" + "'", str78, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]" + "'", str87, "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.util.List list23 = commandLine14.getArgList();
        java.lang.String str26 = commandLine14.getOptionValue("arg", "[ option:   :: null ]");
        java.util.Iterator iterator27 = commandLine14.iterator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ option:   :: null ]" + "'", str26, "[ option:   :: null ]");
        org.junit.Assert.assertNotNull(iterator27);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String str13 = commandLine8.getOptionValue('#', "hi!");
        java.lang.String[] strArray14 = commandLine8.getArgs();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        java.lang.String[] strArray57 = commandLine55.getOptionValues("org.apache.commons.cli.ParseException: ");
        java.lang.Object obj59 = commandLine55.getOptionObject('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        org.apache.commons.cli.Options options25 = options15.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser26.parse(options27, strArray32, properties33);
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser36.parse(options37, strArray42, properties43);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser35.parse(options37, strArray46, properties47, true);
        org.apache.commons.cli.Option option51 = options37.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder52 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options37);
        java.util.Collection collection53 = options37.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser55.parse(options56, strArray61, properties62);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser54.parse(options56, strArray65, properties66, true);
        java.lang.String[] strArray70 = posixParser26.flatten(options37, strArray65, false);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options25, strArray65, properties71);
        org.apache.commons.cli.Option option77 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str78 = option77.toString();
        int int79 = option77.getArgs();
        option77.setLongOpt("");
        option77.addValue("");
        java.lang.String str84 = option77.getArgName();
        java.lang.String str85 = option77.getValue();
        org.apache.commons.cli.Options options86 = options25.addOption(option77);
        java.util.Collection collection87 = options86.getOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNull(option51);
        org.junit.Assert.assertNotNull(optionBuilder52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ option:   +ARG ::  ]" + "'", str78, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertNotNull(collection87);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.Collection collection37 = options10.getOptionGroups();
        org.apache.commons.cli.OptionGroup optionGroup38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options39 = options10.addOptionGroup(optionGroup38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(collection37);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = options1.getOption("");
        org.apache.commons.cli.Option option5 = options1.getOption("hi!");
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine15 = posixParser7.parse(options8, strArray13, properties14);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine22 = posixParser6.parse(options8, strArray21);
        org.apache.commons.cli.PosixParser posixParser23 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser23.parse(options25, strArray34, properties35, true);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options40, strArray45, properties46);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine54 = posixParser38.parse(options40, strArray53);
        org.apache.commons.cli.CommandLine commandLine55 = posixParser6.parse(options25, strArray53);
        posixParser6.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser59 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser60.parse(options61, strArray66, properties67);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser59.parse(options61, strArray70, properties71, true);
        org.apache.commons.cli.Option option75 = options61.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('a');
        option77.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup80 = options61.getOptionGroup(option77);
        org.apache.commons.cli.PosixParser posixParser81 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser81.parse(options82, strArray87, properties88);
        java.lang.String[] strArray91 = posixParser6.flatten(options61, strArray87, true);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options1, strArray91, properties92);
        java.util.Collection collection94 = options1.getOptionGroups();
        org.junit.Assert.assertNull(option3);
        org.junit.Assert.assertNull(option5);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNull(option75);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNotNull(collection94);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.Options options45 = null;
        java.lang.String[] strArray46 = null;
        java.util.Properties properties47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options45, strArray46, properties47, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj24 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray26 = commandLine14.getOptionValues('a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(strArray26);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        java.lang.String str56 = options36.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str56, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        boolean boolean46 = options11.hasOption("org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = option18.getKey();
        java.lang.String str23 = option18.getKey();
        java.lang.String str24 = option18.getArgName();
        java.lang.String str25 = option18.getArgName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "a" + "'", str22, "a");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "a" + "'", str23, "a");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "arg" + "'", str24, "arg");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        commandLine55.addArg("");
        java.lang.String[] strArray59 = commandLine55.getOptionValues("org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(strArray59);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('a');
        option19.setDescription("");
        option19.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str24 = option19.getDescription();
        org.apache.commons.cli.Options options25 = options2.addOption(option19);
        java.lang.String str26 = option19.getOpt();
        option19.setArgs((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:   +ARG ::  ]" + "'", str24, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "a" + "'", str26, "a");
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        option1.setOptionalArg(false);
        boolean boolean4 = option1.hasLongOpt();
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String str7 = commandLine5.getOptionValue('#');
        option1.setType((java.lang.Object) '#');
        option1.setDescription("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        int int11 = option1.getArgs();
        option1.setArgs((int) (short) 100);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = options2.toString();
        org.apache.commons.cli.Option option24 = options2.getOption("hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(option24);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser53.parse(options55, strArray64, properties65, true);
        org.apache.commons.cli.Option option69 = options55.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('a');
        option71.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup74 = options55.getOptionGroup(option71);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = posixParser0.flatten(options55, strArray81, true);
        java.util.Collection collection86 = options55.getOptions();
        java.util.Collection collection87 = options55.getOptionGroups();
        org.apache.commons.cli.Option option89 = options55.getOption("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.apache.commons.cli.Option option91 = options55.getOption("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(option69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(collection86);
        org.junit.Assert.assertNotNull(collection87);
        org.junit.Assert.assertNull(option89);
        org.junit.Assert.assertNull(option91);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        org.apache.commons.cli.Options options25 = options15.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser26.parse(options27, strArray32, properties33);
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser36.parse(options37, strArray42, properties43);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser35.parse(options37, strArray46, properties47, true);
        org.apache.commons.cli.Option option51 = options37.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder52 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options37);
        java.util.Collection collection53 = options37.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser55.parse(options56, strArray61, properties62);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser54.parse(options56, strArray65, properties66, true);
        java.lang.String[] strArray70 = posixParser26.flatten(options37, strArray65, false);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options25, strArray65, properties71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options77 = options25.addOption("org.apache.commons.cli.UnrecognizedOptionException: arg", "[ option:   +ARG ::  ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNull(option51);
        org.junit.Assert.assertNotNull(optionBuilder52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine72);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        java.lang.String str9 = options1.toString();
        org.apache.commons.cli.Options options14 = options1.addOption("", "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]", true, "hi!");
        java.lang.String str15 = options1.toString();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str9, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[ Options: [ short {=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ] [ long {org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ]" + "'", str15, "[ Options: [ short {=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ] [ long {org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ]");
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options55 = options49.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser65.parse(options66, strArray71, properties72);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine90 = posixParser74.parse(options76, strArray89);
        java.lang.String[] strArray92 = posixParser56.flatten(options66, strArray89, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser32.parse(options49, strArray92, properties93, false);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options19, strArray92, properties96);
        org.apache.commons.cli.Option option99 = options19.getOption("org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNull(option99);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String str12 = commandLine8.getOptionValue("[ Options: [ short {} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue(' ', "[ option:   +ARG ::  ]");
        java.lang.String str17 = commandLine8.getOptionValue("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[ option:   +ARG ::  ]" + "'", str15, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        java.lang.String[] strArray14 = commandLine8.getOptionValues('a');
        boolean boolean16 = commandLine8.hasOption("[ option:   :: null ]");
        java.lang.Object obj18 = commandLine8.getOptionObject("org.apache.commons.cli.MissingArgumentException: ");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String[] strArray18 = commandLine16.getArgs();
        java.lang.String str20 = commandLine16.getOptionValue("org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.util.Collection collection49 = options2.getOptionGroups();
        java.util.Collection collection50 = options2.getOptions();
        java.util.Collection collection51 = options2.getOptionGroups();
        java.util.List list52 = options2.getRequiredOptions();
        java.lang.Class<?> wildcardClass53 = options2.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(collection50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        java.lang.String str16 = commandLine0.getOptionValue("a");
        java.lang.Object obj18 = commandLine0.getOptionObject('a');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        boolean boolean46 = option40.isRequired();
        boolean boolean47 = option40.hasArgs();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options51 = options45.addOption(option50);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser53.parse(options55, strArray68);
        org.apache.commons.cli.PosixParser posixParser70 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser71.parse(options72, strArray77, properties78);
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser70.parse(options72, strArray81, properties82, true);
        org.apache.commons.cli.CommandLine commandLine85 = posixParser52.parse(options55, strArray81);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options45, strArray81);
        java.util.Collection collection87 = options45.getOptions();
        java.util.Collection collection88 = options45.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options92 = options45.addOption("[ Options: [ short {=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ] [ long {org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ]", true, "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(collection87);
        org.junit.Assert.assertNotNull(collection88);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser47.parse(options48, strArray53, properties54);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser46.parse(options48, strArray57, properties58, true);
        org.apache.commons.cli.Option option62 = options48.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('a');
        option64.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup67 = options48.getOptionGroup(option64);
        java.lang.String str68 = option64.getKey();
        option64.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options71 = options45.addOption(option64);
        boolean boolean72 = option64.hasValueSeparator();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNull(option62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "a" + "'", str68, "a");
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.Option option9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options10 = options1.addOption(option9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.util.List list22 = options2.getRequiredOptions();
        java.util.List list23 = options2.getRequiredOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options28 = options2.addOption("org.apache.commons.cli.MissingArgumentException: ", "org.apache.commons.cli.MissingOptionException: arg", false, "org.apache.commons.cli.MissingArgumentException: a");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(list23);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('a');
        option19.setDescription("");
        option19.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str24 = option19.getDescription();
        org.apache.commons.cli.Options options25 = options2.addOption(option19);
        option19.setArgName("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:   +ARG ::  ]" + "'", str24, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options25);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String[] strArray18 = commandLine16.getArgs();
        java.lang.Object obj20 = commandLine16.getOptionObject('4');
        java.lang.String str22 = commandLine16.getOptionValue('#');
        java.lang.Object obj24 = commandLine16.getOptionObject("org.apache.commons.cli.MissingArgumentException: a");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        org.apache.commons.cli.Option[] optionArray26 = commandLine14.getOptions();
        commandLine14.addArg("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNotNull(optionArray26);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        org.apache.commons.cli.Option[] optionArray2 = commandLine0.getOptions();
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertNotNull(optionArray2);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('a');
        option19.setDescription("");
        option19.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str24 = option19.getDescription();
        org.apache.commons.cli.Options options25 = options2.addOption(option19);
        org.apache.commons.cli.Option option27 = options2.getOption("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:   +ARG ::  ]" + "'", str24, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNull(option27);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser53.parse(options55, strArray64, properties65, true);
        org.apache.commons.cli.Option option69 = options55.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('a');
        option71.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup74 = options55.getOptionGroup(option71);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = posixParser0.flatten(options55, strArray81, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: ", false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(option69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        org.apache.commons.cli.OptionGroup optionGroup50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options51 = options19.addOptionGroup(optionGroup50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        java.lang.String str4 = commandLine0.getOptionValue("", "hi!");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str10 = option9.toString();
        boolean boolean12 = option9.equals((java.lang.Object) 100L);
        option9.setDescription("");
        option9.addValue("");
        option9.setArgName("org.apache.commons.cli.ParseException: ");
        boolean boolean19 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.String str21 = option9.getOpt();
        boolean boolean22 = option9.hasArgs();
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ option:   +ARG ::  ]" + "'", str10, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        posixParser0.burstToken("a", false);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        java.lang.String str65 = options57.toString();
        org.apache.commons.cli.Options options70 = options57.addOption("", "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser72 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser72.parse(options73, strArray78, properties79);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine85 = posixParser71.parse(options73, strArray82, properties83, true);
        java.lang.Object obj87 = commandLine85.getOptionObject(' ');
        java.lang.String[] strArray88 = commandLine85.getArgs();
        java.lang.String str90 = commandLine85.getOptionValue(' ');
        java.lang.String[] strArray91 = commandLine85.getArgs();
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options70, strArray91, properties92);
        boolean boolean95 = commandLine93.hasOption("");
        java.lang.String[] strArray97 = commandLine93.getOptionValues("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str65, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(strArray97);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.util.Collection collection49 = options2.getOptionGroups();
        java.util.Collection collection50 = options2.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options54 = options2.addOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(collection50);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.Option option35 = options3.getOption("org.apache.commons.cli.ParseException: a");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(option35);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        boolean boolean21 = commandLine14.hasOption('4');
        org.apache.commons.cli.OptionBuilder optionBuilder22 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) '4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(optionBuilder22);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.lang.Class<?> wildcardClass37 = strArray36.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        java.lang.String str36 = commandLine33.getOptionValue("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.lang.String[] strArray37 = commandLine33.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: " + "'", str36, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options55 = options49.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser65.parse(options66, strArray71, properties72);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine90 = posixParser74.parse(options76, strArray89);
        java.lang.String[] strArray92 = posixParser56.flatten(options66, strArray89, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser32.parse(options49, strArray92, properties93, false);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options19, strArray92, properties96);
        java.lang.String str99 = commandLine97.getOptionValue('4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        org.apache.commons.cli.Option[] optionArray26 = commandLine14.getOptions();
        java.lang.String[] strArray27 = commandLine14.getArgs();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('a');
        option29.setDescription("");
        boolean boolean32 = option29.hasArgName();
        commandLine14.addOption(option29);
        java.util.List list34 = commandLine14.getArgList();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(list34);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser47.parse(options48, strArray53, properties54);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser46.parse(options48, strArray57, properties58, true);
        org.apache.commons.cli.Option option62 = options48.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('a');
        option64.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup67 = options48.getOptionGroup(option64);
        java.lang.String str68 = option64.getKey();
        option64.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options71 = options45.addOption(option64);
        org.apache.commons.cli.Option option73 = options45.getOption("");
        java.lang.String str74 = options45.toString();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNull(option62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "a" + "'", str68, "a");
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:  hi!  :: null ], a=[ option: a  ::  ]} ] [ long {hi!=[ option:  hi!  :: null ]} ]" + "'", str74, "[ Options: [ short {=[ option:  hi!  :: null ], a=[ option: a  ::  ]} ] [ long {hi!=[ option:  hi!  :: null ]} ]");
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine25 = posixParser9.parse(options11, strArray24);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options32 = options26.addOption(option31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser42.parse(options43, strArray48, properties49);
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser52.parse(options53, strArray58, properties59);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser51.parse(options53, strArray66);
        java.lang.String[] strArray69 = posixParser33.flatten(options43, strArray66, true);
        java.util.Properties properties70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser9.parse(options26, strArray69, properties70, false);
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser74.parse(options75, strArray80, properties81);
        java.lang.String[] strArray88 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine89 = posixParser73.parse(options75, strArray88);
        java.lang.String[] strArray91 = posixParser0.flatten(options26, strArray88, false);
        org.apache.commons.cli.OptionGroup optionGroup92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options93 = options26.addOptionGroup(optionGroup92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(strArray91);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        option1.setType((java.lang.Object) option6);
        option6.setArgName("[ option:   +ARG ::  ]");
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser11.parse(options12, strArray17, properties18);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser10.parse(options12, strArray21, properties22, true);
        java.lang.Object obj26 = commandLine24.getOptionObject(' ');
        java.lang.String[] strArray27 = commandLine24.getArgs();
        java.lang.String str29 = commandLine24.getOptionValue(' ');
        java.lang.String str32 = commandLine24.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.util.List list33 = commandLine24.getArgList();
        java.lang.String str36 = commandLine24.getOptionValue("arg", "[ option:   :: null ]");
        option6.setType((java.lang.Object) str36);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[ option:   :: null ]" + "'", str36, "[ option:   :: null ]");
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser47.parse(options48, strArray53, properties54);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser46.parse(options48, strArray57, properties58, true);
        org.apache.commons.cli.Option option62 = options48.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('a');
        option64.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup67 = options48.getOptionGroup(option64);
        java.lang.String str68 = option64.getKey();
        option64.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options71 = options45.addOption(option64);
        org.apache.commons.cli.Option option73 = options45.getOption("");
        option73.setArgName("");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNull(option62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "a" + "'", str68, "a");
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(option73);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String str13 = commandLine8.getOptionValue('#', "hi!");
        java.lang.String str15 = commandLine8.getOptionValue("hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options55 = options49.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser65.parse(options66, strArray71, properties72);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine90 = posixParser74.parse(options76, strArray89);
        java.lang.String[] strArray92 = posixParser56.flatten(options66, strArray89, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser32.parse(options49, strArray92, properties93, false);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options19, strArray92, properties96);
        boolean boolean99 = commandLine97.hasOption('\000');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.Object obj12 = commandLine8.getOptionObject("org.apache.commons.cli.MissingArgumentException: a");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine25 = posixParser9.parse(options11, strArray24);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options32 = options26.addOption(option31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser42.parse(options43, strArray48, properties49);
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser52.parse(options53, strArray58, properties59);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser51.parse(options53, strArray66);
        java.lang.String[] strArray69 = posixParser33.flatten(options43, strArray66, true);
        java.util.Properties properties70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser9.parse(options26, strArray69, properties70, false);
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser74.parse(options75, strArray80, properties81);
        java.lang.String[] strArray88 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine89 = posixParser73.parse(options75, strArray88);
        java.lang.String[] strArray91 = posixParser0.flatten(options26, strArray88, false);
        java.util.Collection collection92 = options26.getOptions();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(collection92);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser53.parse(options55, strArray64, properties65, true);
        org.apache.commons.cli.Option option69 = options55.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('a');
        option71.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup74 = options55.getOptionGroup(option71);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = posixParser0.flatten(options55, strArray81, true);
        java.util.Collection collection86 = options55.getOptions();
        java.lang.String str87 = options55.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(option69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(collection86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str87, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        posixParser0.burstToken("a", false);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        java.lang.String str65 = options57.toString();
        org.apache.commons.cli.Options options70 = options57.addOption("", "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser72 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser72.parse(options73, strArray78, properties79);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine85 = posixParser71.parse(options73, strArray82, properties83, true);
        java.lang.Object obj87 = commandLine85.getOptionObject(' ');
        java.lang.String[] strArray88 = commandLine85.getArgs();
        java.lang.String str90 = commandLine85.getOptionValue(' ');
        java.lang.String[] strArray91 = commandLine85.getArgs();
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options70, strArray91, properties92);
        java.lang.String str96 = commandLine93.getOptionValue(' ', "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str65, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]" + "'", str96, "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        posixParser0.burstToken("[ option:   +ARG ::  ]", false);
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "a", false, "[ option:   :: null ]");
        boolean boolean43 = option42.hasOptionalArg();
        java.util.ListIterator listIterator44 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option42, listIterator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        java.lang.String[] strArray14 = commandLine8.getOptionValues('a');
        boolean boolean16 = commandLine8.hasOption("[ option:   :: null ]");
        java.util.List list17 = commandLine8.getArgList();
        java.util.List list18 = commandLine8.getArgList();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(list18);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        commandLine55.addArg("");
        boolean boolean59 = commandLine55.hasOption('4');
        java.lang.Object obj61 = commandLine55.getOptionObject("hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        option9.setValueSeparator('a');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser15.parse(options16, strArray21, properties22);
        java.lang.String str24 = options16.toString();
        org.apache.commons.cli.PosixParser posixParser25 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser25.parse(options26, strArray31, properties32);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser34.parse(options35, strArray40, properties41);
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser44.parse(options45, strArray50, properties51);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine59 = posixParser43.parse(options45, strArray58);
        java.lang.String[] strArray61 = posixParser25.flatten(options35, strArray58, true);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options16, strArray61, false);
        boolean boolean65 = commandLine63.hasOption("[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str24, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        java.lang.String str9 = options1.toString();
        org.apache.commons.cli.Options options14 = options1.addOption("", "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser15.parse(options16, strArray21, properties22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser34.parse(options35, strArray40, properties41);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine49 = posixParser33.parse(options35, strArray48);
        java.lang.String[] strArray51 = posixParser15.flatten(options25, strArray48, true);
        java.util.List list52 = options25.getRequiredOptions();
        java.util.Collection collection53 = options25.getOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create("");
        option55.setLongOpt("hi!");
        int int58 = option55.getArgs();
        java.lang.String str59 = option55.getLongOpt();
        org.apache.commons.cli.Options options60 = options25.addOption(option55);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = options61.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        option55.setType((java.lang.Object) "org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.OptionGroup optionGroup65 = options14.getOptionGroup(option55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options70 = options14.addOption("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]", "hi!", true, "org.apache.commons.cli.UnrecognizedOptionException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str9, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNull(option63);
        org.junit.Assert.assertNull(optionGroup65);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        java.lang.String str36 = commandLine33.getOptionValue("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.util.Iterator iterator37 = commandLine33.iterator();
        java.lang.String str39 = commandLine33.getOptionValue("hi!");
        java.lang.String str41 = commandLine33.getOptionValue("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: " + "'", str36, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(iterator37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.util.Collection collection49 = options2.getOptionGroups();
        java.util.Collection collection50 = options2.getOptions();
        org.apache.commons.cli.Options options54 = options2.addOption("", false, "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(collection50);
        org.junit.Assert.assertNotNull(options54);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.util.List list4 = commandLine0.getArgList();
        java.lang.String str6 = commandLine0.getOptionValue("a");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        java.lang.String[] strArray50 = commandLine49.getArgs();
        java.lang.Object obj52 = commandLine49.getOptionObject('4');
        java.lang.String[] strArray54 = commandLine49.getOptionValues('#');
        java.lang.String[] strArray56 = commandLine49.getOptionValues('\000');
        commandLine49.addArg("a");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNull(strArray56);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        option1.setType((java.lang.Object) option6);
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine24 = posixParser8.parse(options10, strArray23);
        java.util.List list25 = commandLine24.getArgList();
        java.lang.String[] strArray26 = commandLine24.getArgs();
        java.lang.Object obj28 = commandLine24.getOptionObject('4');
        option1.setType(obj28);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.util.Iterator iterator23 = commandLine14.iterator();
        boolean boolean25 = commandLine14.hasOption('a');
        java.lang.String str27 = commandLine14.getOptionValue("org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        posixParser0.burstToken("[ option:   +ARG ::  ]", false);
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options41 = null;
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        org.apache.commons.cli.PosixParser posixParser59 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser60.parse(options61, strArray66, properties67);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser59.parse(options61, strArray70, properties71, true);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine90 = posixParser74.parse(options76, strArray89);
        org.apache.commons.cli.CommandLine commandLine91 = posixParser42.parse(options61, strArray89);
        java.lang.String[] strArray92 = commandLine91.getArgs();
        java.util.Properties properties93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine94 = posixParser0.parse(options41, strArray92, properties93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(strArray92);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String str12 = commandLine8.getOptionValue("[ Options: [ short {} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: arg", "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]" + "'", str15, "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        posixParser0.burstToken("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]", true);
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser41.parse(options42, strArray47, properties48);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser40.parse(options42, strArray51, properties52, true);
        org.apache.commons.cli.Option option56 = options42.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create('a');
        option58.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup61 = options42.getOptionGroup(option58);
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String str64 = commandLine62.getOptionValue('#');
        java.lang.String str66 = commandLine62.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.util.List list67 = commandLine62.getArgList();
        java.lang.String[] strArray68 = commandLine62.getArgs();
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine71 = posixParser0.parse(options42, strArray68, properties69, false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNull(option56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine71);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        boolean boolean13 = option9.hasArg();
        option9.setOptionalArg(false);
        option9.setRequired(false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        boolean boolean27 = commandLine14.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list28 = commandLine14.getArgList();
        boolean boolean30 = commandLine14.hasOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        posixParser0.burstToken("[ option:   +ARG ::  ]", false);
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create('a');
        option42.setDescription("");
        int int45 = option42.getId();
        java.lang.String str46 = option42.getKey();
        java.util.ListIterator listIterator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option42, listIterator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "a" + "'", str46, "a");
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        org.apache.commons.cli.Option[] optionArray56 = commandLine55.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(optionArray56);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser47.parse(options48, strArray53, properties54);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser46.parse(options48, strArray57, properties58, true);
        org.apache.commons.cli.Option option62 = options48.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('a');
        option64.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup67 = options48.getOptionGroup(option64);
        java.lang.String str68 = option64.getKey();
        option64.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options71 = options45.addOption(option64);
        option64.setArgs((int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNull(option62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "a" + "'", str68, "a");
        org.junit.Assert.assertNotNull(options71);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        org.apache.commons.cli.Options options50 = null;
        java.lang.String[] strArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray53 = posixParser0.flatten(options50, strArray51, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean2 = option1.hasArg();
        java.lang.String str4 = option1.getValue("org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser6.parse(options7, strArray12, properties13);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine21 = posixParser5.parse(options7, strArray20);
        org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser23 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser23.parse(options24, strArray29, properties30);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser22.parse(options24, strArray33, properties34, true);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = posixParser38.parse(options39, strArray44, properties45);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine53 = posixParser37.parse(options39, strArray52);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser5.parse(options24, strArray52);
        org.apache.commons.cli.Option[] optionArray55 = commandLine54.getOptions();
        java.lang.String str57 = commandLine54.getOptionValue(' ');
        option1.setType((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]" + "'", str4, "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(optionArray55);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        posixParser0.burstToken("a", false);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser57.parse(options58, strArray63, properties64);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser56.parse(options58, strArray67, properties68, true);
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser72 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser72.parse(options73, strArray78, properties79);
        java.lang.String[] strArray86 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine87 = posixParser71.parse(options73, strArray86);
        java.lang.String[] strArray88 = null;
        java.util.Properties properties89 = null;
        org.apache.commons.cli.CommandLine commandLine90 = posixParser56.parse(options73, strArray88, properties89);
        java.util.List list91 = options73.getRequiredOptions();
        java.util.List list92 = options73.getRequiredOptions();
        java.lang.String[] strArray93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser0.parse(options73, strArray93, true);
        java.lang.String str96 = options73.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(list91);
        org.junit.Assert.assertNotNull(list92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str96, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String[] strArray18 = commandLine16.getArgs();
        java.lang.Object obj20 = commandLine16.getOptionObject('4');
        java.lang.String str22 = commandLine16.getOptionValue('#');
        org.apache.commons.cli.Option[] optionArray23 = commandLine16.getOptions();
        java.lang.String[] strArray25 = commandLine16.getOptionValues("");
        java.lang.Object obj27 = commandLine16.getOptionObject(' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(optionArray23);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = options1.getOption("");
        org.apache.commons.cli.Option option5 = options1.getOption("hi!");
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine15 = posixParser7.parse(options8, strArray13, properties14);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine22 = posixParser6.parse(options8, strArray21);
        org.apache.commons.cli.PosixParser posixParser23 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser23.parse(options25, strArray34, properties35, true);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options40, strArray45, properties46);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine54 = posixParser38.parse(options40, strArray53);
        org.apache.commons.cli.CommandLine commandLine55 = posixParser6.parse(options25, strArray53);
        posixParser6.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser59 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser60.parse(options61, strArray66, properties67);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser59.parse(options61, strArray70, properties71, true);
        org.apache.commons.cli.Option option75 = options61.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('a');
        option77.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup80 = options61.getOptionGroup(option77);
        org.apache.commons.cli.PosixParser posixParser81 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser81.parse(options82, strArray87, properties88);
        java.lang.String[] strArray91 = posixParser6.flatten(options61, strArray87, true);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options1, strArray91, properties92);
        java.lang.String[] strArray95 = commandLine93.getOptionValues('4');
        org.junit.Assert.assertNull(option3);
        org.junit.Assert.assertNull(option5);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNull(option75);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNull(strArray95);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option[] optionArray15 = commandLine14.getOptions();
        java.lang.String[] strArray16 = commandLine14.getArgs();
        boolean boolean18 = commandLine14.hasOption('4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(optionArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        org.apache.commons.cli.Options options25 = options15.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create('a');
        option27.setDescription("");
        option27.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str33 = option27.getValue("a");
        org.apache.commons.cli.Options options34 = options15.addOption(option27);
        org.apache.commons.cli.Option option36 = options34.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.util.List list38 = commandLine37.getArgList();
        java.lang.String str41 = commandLine37.getOptionValue("", "hi!");
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str47 = option46.toString();
        boolean boolean49 = option46.equals((java.lang.Object) 100L);
        option46.setDescription("");
        option46.addValue("");
        option46.setArgName("org.apache.commons.cli.ParseException: ");
        boolean boolean56 = option46.hasArgName();
        commandLine37.addOption(option46);
        java.lang.String[] strArray59 = commandLine37.getOptionValues("");
        java.lang.String[] strArray61 = posixParser0.flatten(options34, strArray59, false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "a" + "'", str33, "a");
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNull(option36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[ option:   +ARG ::  ]" + "'", str47, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        java.lang.String str4 = commandLine0.getOptionValue("", "hi!");
        boolean boolean6 = commandLine0.hasOption(' ');
        java.lang.String str8 = commandLine0.getOptionValue('#');
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String[] strArray19 = commandLine14.getOptionValues("[ option:   +ARG ::  ]");
        boolean boolean21 = commandLine14.hasOption('\000');
        java.lang.String[] strArray23 = commandLine14.getOptionValues("[ option:    :: [ option:   +ARG ::  ] ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strArray23);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.util.List list49 = options2.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser51.parse(options52, strArray57, properties58);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser50.parse(options52, strArray61, properties62, true);
        org.apache.commons.cli.Option option66 = options52.getOption("[ option:   +ARG ::  ]");
        java.lang.String str67 = options52.toString();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create('a');
        option69.setDescription("");
        option69.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str74 = option69.getDescription();
        org.apache.commons.cli.Options options75 = options52.addOption(option69);
        java.lang.String str76 = option69.getOpt();
        org.apache.commons.cli.Options options77 = options2.addOption(option69);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNull(option66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str67, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ option:   +ARG ::  ]" + "'", str74, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "a" + "'", str76, "a");
        org.junit.Assert.assertNotNull(options77);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        boolean boolean46 = options11.hasOption("[ option:   +ARG ::  ]");
        java.util.Collection collection47 = options11.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(collection47);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray4 = commandLine0.getArgs();
        java.lang.String str6 = commandLine0.getOptionValue('\000');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        java.lang.String str9 = options1.toString();
        org.apache.commons.cli.OptionGroup optionGroup10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options11 = options1.addOptionGroup(optionGroup10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str9, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.Options options49 = options11.addOption("", "arg", true, "");
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str55 = option54.toString();
        boolean boolean57 = option54.equals((java.lang.Object) 100L);
        option54.setDescription("");
        option54.setRequired(true);
        java.lang.Object obj62 = null;
        boolean boolean63 = option54.equals(obj62);
        org.apache.commons.cli.OptionGroup optionGroup64 = options11.getOptionGroup(option54);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[ option:   +ARG ::  ]" + "'", str55, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(optionGroup64);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser28.parse(options29, strArray34, properties35);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine43 = posixParser27.parse(options29, strArray42);
        java.lang.String[] strArray45 = posixParser9.flatten(options19, strArray42, true);
        java.util.Collection collection46 = options19.getOptionGroups();
        boolean boolean48 = options19.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options51, strArray56, properties57);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser49.parse(options51, strArray60, properties61, true);
        java.lang.Object obj65 = commandLine63.getOptionObject(' ');
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options19, strArray66, properties67);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options75 = options69.addOption(option74);
        org.apache.commons.cli.Options options79 = options69.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('a');
        option81.setDescription("");
        option81.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str87 = option81.getValue("a");
        org.apache.commons.cli.Options options88 = options69.addOption(option81);
        java.lang.String[] strArray89 = null;
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options88, strArray89);
        java.lang.String[] strArray92 = commandLine90.getOptionValues('4');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "a" + "'", str87, "a");
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNull(strArray92);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.Collection collection37 = options10.getOptionGroups();
        boolean boolean39 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.util.Collection collection40 = options10.getOptions();
        java.util.Collection collection41 = options10.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertNotNull(collection41);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options25 = options2.addOption("[ Options: [ short {=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ] [ long {org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ]", false, "org.apache.commons.cli.MissingArgumentException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        org.apache.commons.cli.Option[] optionArray50 = commandLine49.getOptions();
        java.lang.String str52 = commandLine49.getOptionValue("org.apache.commons.cli.ParseException: ");
        java.lang.String str55 = commandLine49.getOptionValue("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]", "org.apache.commons.cli.MissingOptionException: ");
        java.lang.String str57 = commandLine49.getOptionValue('a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(optionArray50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.cli.MissingOptionException: " + "'", str55, "org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        posixParser0.burstToken("hi!", false);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options73 = options67.addOption(option72);
        java.lang.String[] strArray80 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.ParseException: ", "hi!", "", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", "[ Options: [ short {} ] [ long {} ]" };
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options73, strArray80, properties81);
        java.lang.String str83 = options73.toString();
        org.apache.commons.cli.Option option85 = options73.getOption("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        java.lang.String str86 = options73.toString();
        java.util.Collection collection87 = options73.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]" + "'", str83, "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNull(option85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]" + "'", str86, "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNotNull(collection87);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        org.apache.commons.cli.Options options25 = options15.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser26.parse(options27, strArray32, properties33);
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser36.parse(options37, strArray42, properties43);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser35.parse(options37, strArray46, properties47, true);
        org.apache.commons.cli.Option option51 = options37.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder52 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options37);
        java.util.Collection collection53 = options37.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser55.parse(options56, strArray61, properties62);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser54.parse(options56, strArray65, properties66, true);
        java.lang.String[] strArray70 = posixParser26.flatten(options37, strArray65, false);
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options25, strArray65, properties71);
        org.apache.commons.cli.Option option77 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str78 = option77.toString();
        int int79 = option77.getArgs();
        option77.setLongOpt("");
        option77.addValue("");
        java.lang.String str84 = option77.getArgName();
        java.lang.String str85 = option77.getValue();
        org.apache.commons.cli.Options options86 = options25.addOption(option77);
        java.lang.String str87 = option77.getDescription();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNull(option51);
        org.junit.Assert.assertNotNull(optionBuilder52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ option:   +ARG ::  ]" + "'", str78, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser47.parse(options48, strArray53, properties54);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser46.parse(options48, strArray57, properties58, true);
        org.apache.commons.cli.Option option62 = options48.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('a');
        option64.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup67 = options48.getOptionGroup(option64);
        java.lang.String str68 = option64.getKey();
        option64.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options71 = options45.addOption(option64);
        java.lang.Object obj72 = option64.getType();
        char char73 = option64.getValueSeparator();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNull(option62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "a" + "'", str68, "a");
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + char73 + "' != '" + '\000' + "'", char73 == '\000');
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('a');
        boolean boolean2 = option1.hasArg();
        option1.setRequired(true);
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String str7 = commandLine5.getOptionValue('#');
        java.lang.String str9 = commandLine5.getOptionValue("hi!");
        boolean boolean10 = option1.equals((java.lang.Object) str9);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser11.parse(options12, strArray17, properties18);
        org.apache.commons.cli.PosixParser posixParser20 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = posixParser20.parse(options21, strArray26, properties27);
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser30.parse(options31, strArray36, properties37);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine45 = posixParser29.parse(options31, strArray44);
        java.lang.String[] strArray47 = posixParser11.flatten(options21, strArray44, true);
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser1.parse(options3, strArray44, properties48);
        java.util.Collection collection50 = options3.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser51.parse(options52, strArray57, properties58);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options3, strArray57);
        org.apache.commons.cli.OptionBuilder optionBuilder61 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) posixParser0);
        posixParser0.burstToken("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]", true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(collection50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(optionBuilder61);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.util.Collection collection49 = options2.getOptionGroups();
        java.util.List list50 = options2.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(list50);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser47.parse(options48, strArray53, properties54);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser46.parse(options48, strArray57, properties58, true);
        org.apache.commons.cli.Option option62 = options48.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('a');
        option64.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup67 = options48.getOptionGroup(option64);
        java.lang.String str68 = option64.getKey();
        option64.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options71 = options45.addOption(option64);
        org.apache.commons.cli.OptionGroup optionGroup72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options45.addOptionGroup(optionGroup72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNull(option62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "a" + "'", str68, "a");
        org.junit.Assert.assertNotNull(options71);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        java.util.List list35 = options17.getRequiredOptions();
        java.util.List list36 = options17.getRequiredOptions();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create("");
        option38.setLongOpt("hi!");
        int int41 = option38.getArgs();
        java.lang.String str42 = option38.getLongOpt();
        org.apache.commons.cli.OptionBuilder optionBuilder43 = org.apache.commons.cli.OptionBuilder.hasOptionalArgs();
        option38.setType((java.lang.Object) optionBuilder43);
        java.lang.String str45 = option38.getDescription();
        java.lang.Object obj46 = option38.getType();
        java.lang.String str47 = option38.getOpt();
        org.apache.commons.cli.Options options48 = options17.addOption(option38);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(optionBuilder43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(options48);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser28.parse(options29, strArray34, properties35);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine43 = posixParser27.parse(options29, strArray42);
        java.lang.String[] strArray45 = posixParser9.flatten(options19, strArray42, true);
        java.util.Collection collection46 = options19.getOptionGroups();
        boolean boolean48 = options19.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options51, strArray56, properties57);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser49.parse(options51, strArray60, properties61, true);
        java.lang.Object obj65 = commandLine63.getOptionObject(' ');
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options19, strArray66, properties67);
        org.apache.commons.cli.Option[] optionArray69 = commandLine68.getOptions();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionArray69);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        boolean boolean13 = option9.hasArg();
        option9.setOptionalArg(false);
        option9.setDescription("a");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('a');
        option47.setDescription("");
        option47.setLongOpt("");
        org.apache.commons.cli.OptionGroup optionGroup52 = options45.getOptionGroup(option47);
        java.lang.String str53 = option47.getLongOpt();
        boolean boolean54 = option47.hasArgs();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        boolean boolean38 = options10.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str39 = options10.toString();
        java.util.List list40 = options10.getRequiredOptions();
        java.util.List list41 = options10.helpOptions();
        java.util.List list42 = options10.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(list42);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        posixParser0.burstToken("[ option:   +ARG ::  ]", false);
        posixParser0.burstToken("", true);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: arg", false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = option18.getKey();
        option18.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        boolean boolean25 = option18.hasLongOpt();
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str31 = option30.toString();
        int int32 = option30.getArgs();
        java.lang.String str33 = option30.getOpt();
        boolean boolean34 = option30.hasLongOpt();
        java.lang.String[] strArray35 = option30.getValues();
        option18.setType((java.lang.Object) strArray35);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "a" + "'", str22, "a");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ option:   +ARG ::  ]" + "'", str31, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strArray35);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        boolean boolean18 = commandLine14.hasOption("[ option:   +ARG ::  ]");
        java.lang.String[] strArray19 = commandLine14.getArgs();
        org.apache.commons.cli.Option option20 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine14.addOption(option20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray19);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str3 = option1.getValue("");
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser6.parse(options7, strArray12, properties13);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine21 = posixParser5.parse(options7, strArray20);
        org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser23 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser23.parse(options24, strArray29, properties30);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser22.parse(options24, strArray33, properties34, true);
        org.apache.commons.cli.CommandLine commandLine37 = posixParser4.parse(options7, strArray33);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options40, strArray45, properties46);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser38.parse(options40, strArray49, properties50, true);
        org.apache.commons.cli.Option option54 = options40.getOption("[ option:   +ARG ::  ]");
        java.lang.String str55 = options40.toString();
        java.lang.String[] strArray56 = null;
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser4.parse(options40, strArray56, properties57, true);
        commandLine59.addArg("");
        boolean boolean63 = commandLine59.hasOption('4');
        java.lang.String[] strArray65 = commandLine59.getOptionValues("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a");
        java.lang.String[] strArray66 = commandLine59.getArgs();
        boolean boolean67 = option1.equals((java.lang.Object) commandLine59);
        java.lang.String str68 = option1.getValue();
        option1.setRequired(false);
        java.lang.String str71 = option1.toString();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNull(option54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str55, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ option:   :: null ]" + "'", str71, "[ option:   :: null ]");
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        java.lang.String str9 = options1.toString();
        org.apache.commons.cli.Options options14 = options1.addOption("", "org.apache.commons.cli.MissingArgumentException: ", false, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.Collection collection15 = options1.getOptions();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str9, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(collection15);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        java.lang.String str35 = commandLine33.getOptionValue('4');
        java.lang.String str37 = commandLine33.getOptionValue("org.apache.commons.cli.ParseException: ");
        java.lang.String str39 = commandLine33.getOptionValue('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String[] strArray39 = option38.getValues();
        commandLine33.addOption(option38);
        java.lang.String[] strArray42 = commandLine33.getOptionValues('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNull(strArray42);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str2 = commandLine0.getOptionValue('#');
        java.lang.String str4 = commandLine0.getOptionValue("hi!");
        java.lang.String str7 = commandLine0.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: arg", "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]" + "'", str7, "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        java.lang.String str36 = commandLine33.getOptionValue("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.lang.String str38 = commandLine33.getOptionValue("org.apache.commons.cli.MissingArgumentException: a");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: " + "'", str36, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser28.parse(options29, strArray34, properties35);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine43 = posixParser27.parse(options29, strArray42);
        java.lang.String[] strArray45 = posixParser9.flatten(options19, strArray42, true);
        java.util.Collection collection46 = options19.getOptionGroups();
        boolean boolean48 = options19.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options51, strArray56, properties57);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser49.parse(options51, strArray60, properties61, true);
        java.lang.Object obj65 = commandLine63.getOptionObject(' ');
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options19, strArray66, properties67);
        org.apache.commons.cli.Option option70 = org.apache.commons.cli.OptionBuilder.create('a');
        option70.setDescription("");
        option70.setLongOpt("");
        boolean boolean75 = option70.isRequired();
        boolean boolean76 = option70.hasArg();
        java.util.ListIterator listIterator77 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option70, listIterator77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(option70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        java.lang.String str65 = commandLine63.getOptionValue("");
        java.lang.String str68 = commandLine63.getOptionValue("org.apache.commons.cli.MissingArgumentException: a", "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str68, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options51 = options45.addOption(option50);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser53.parse(options55, strArray68);
        org.apache.commons.cli.PosixParser posixParser70 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser71.parse(options72, strArray77, properties78);
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser70.parse(options72, strArray81, properties82, true);
        org.apache.commons.cli.CommandLine commandLine85 = posixParser52.parse(options55, strArray81);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options45, strArray81);
        java.util.Collection collection87 = options45.getOptions();
        org.apache.commons.cli.Option option88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.OptionGroup optionGroup89 = options45.getOptionGroup(option88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(collection87);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        boolean boolean18 = commandLine14.hasOption("[ option:   +ARG ::  ]");
        java.lang.String[] strArray19 = commandLine14.getArgs();
        boolean boolean21 = commandLine14.hasOption('a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        boolean boolean21 = commandLine14.hasOption('4');
        org.apache.commons.cli.Option option23 = org.apache.commons.cli.OptionBuilder.create("");
        option23.setOptionalArg(false);
        boolean boolean26 = option23.hasLongOpt();
        boolean boolean27 = option23.hasArgs();
        commandLine14.addOption(option23);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(option23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        boolean boolean65 = commandLine63.hasOption('\000');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.Option option33 = options19.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create('a');
        option35.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup38 = options19.getOptionGroup(option35);
        java.lang.String str39 = option35.getKey();
        java.lang.String str40 = option35.getKey();
        option35.setDescription("hi!");
        java.util.ListIterator listIterator43 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option35, listIterator43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNull(option33);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "a" + "'", str39, "a");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "a" + "'", str40, "a");
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        boolean boolean19 = options2.hasOption("hi!");
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String[] strArray25 = option24.getValues();
        boolean boolean26 = option24.hasArgName();
        option24.setLongOpt("org.apache.commons.cli.ParseException: ");
        option24.setOptionalArg(true);
        org.apache.commons.cli.Options options31 = options2.addOption(option24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options36 = options2.addOption("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]", true, "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(options31);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj5 = commandLine0.getOptionObject('a');
        java.lang.String str8 = commandLine0.getOptionValue('#', "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String str12 = commandLine9.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options19 = options13.addOption(option18);
        boolean boolean20 = option18.hasArgName();
        commandLine9.addOption(option18);
        java.lang.Object obj23 = commandLine9.getOptionObject("a");
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.List list61 = options34.getRequiredOptions();
        java.util.Collection collection62 = options34.getOptions();
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create("");
        option64.setLongOpt("hi!");
        int int67 = option64.getArgs();
        java.lang.String str68 = option64.getLongOpt();
        org.apache.commons.cli.Options options69 = options34.addOption(option64);
        org.apache.commons.cli.PosixParser posixParser70 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser71.parse(options72, strArray77, properties78);
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser70.parse(options72, strArray81, properties82, true);
        org.apache.commons.cli.Option option86 = options72.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option88 = org.apache.commons.cli.OptionBuilder.create('a');
        option88.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup91 = options72.getOptionGroup(option88);
        java.lang.String str92 = option88.getKey();
        option88.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options95 = options69.addOption(option88);
        commandLine9.addOption(option88);
        commandLine0.addOption(option88);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]" + "'", str8, "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(option86);
        org.junit.Assert.assertNotNull(option88);
        org.junit.Assert.assertNull(optionGroup91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "a" + "'", str92, "a");
        org.junit.Assert.assertNotNull(options95);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        java.util.List list9 = options1.helpOptions();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(list9);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj5 = commandLine0.getOptionObject('a');
        java.lang.Object obj7 = commandLine0.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: arg");
        java.lang.Object obj9 = commandLine0.getOptionObject('4');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser53.parse(options55, strArray64, properties65, true);
        org.apache.commons.cli.Option option69 = options55.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('a');
        option71.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup74 = options55.getOptionGroup(option71);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = posixParser0.flatten(options55, strArray81, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options90 = options55.addOption("org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]", "org.apache.commons.cli.MissingArgumentException: ", true, "arg");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(option69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser3 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser3.parse(options4, strArray9, properties10);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine16 = posixParser2.parse(options4, strArray13, properties14, true);
        org.apache.commons.cli.Option option18 = options4.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option20 = org.apache.commons.cli.OptionBuilder.create('a');
        option20.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup23 = options4.getOptionGroup(option20);
        java.lang.String str24 = option20.getKey();
        java.lang.String str25 = option20.getKey();
        java.lang.String str26 = option20.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options0.getOptionGroup(option20);
        java.util.Collection collection28 = options0.getOptionGroups();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNull(option18);
        org.junit.Assert.assertNotNull(option20);
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "a" + "'", str24, "a");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "a" + "'", str25, "a");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(collection28);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        org.apache.commons.cli.Options options60 = options36.addOption("", "org.apache.commons.cli.MissingOptionException: arg", false, "a");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options64 = options60.addOption("[ option:  arg  :: [ Options: [ short {} ] [ long {} ] ]", false, "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(options60);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        option1.setLongOpt("hi!");
        int int4 = option1.getArgs();
        java.lang.String str5 = option1.getLongOpt();
        org.apache.commons.cli.OptionBuilder optionBuilder6 = org.apache.commons.cli.OptionBuilder.hasOptionalArgs();
        option1.setType((java.lang.Object) optionBuilder6);
        option1.setValueSeparator('\000');
        boolean boolean10 = option1.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser12.parse(options13, strArray18, properties19);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser11.parse(options13, strArray22, properties23, true);
        org.apache.commons.cli.Option option27 = options13.getOption("[ option:   +ARG ::  ]");
        java.lang.String str28 = options13.toString();
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create('a');
        option30.setDescription("");
        option30.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str35 = option30.getDescription();
        org.apache.commons.cli.Options options36 = options13.addOption(option30);
        java.lang.String str37 = option30.getOpt();
        boolean boolean38 = option1.equals((java.lang.Object) option30);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(optionBuilder6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNull(option27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[ option:   +ARG ::  ]" + "'", str35, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "a" + "'", str37, "a");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        boolean boolean16 = commandLine14.hasOption("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = option18.getKey();
        option18.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.lang.String str25 = option18.getKey();
        java.lang.String str26 = option18.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "a" + "'", str22, "a");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "a" + "'", str25, "a");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ option: a  ::  ]" + "'", str26, "[ option: a  ::  ]");
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        java.lang.String str36 = commandLine33.getOptionValue("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.util.Iterator iterator37 = commandLine33.iterator();
        java.lang.String[] strArray39 = commandLine33.getOptionValues('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: " + "'", str36, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(iterator37);
        org.junit.Assert.assertNull(strArray39);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        boolean boolean12 = commandLine8.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.OptionBuilder optionBuilder13 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine8);
        java.lang.String[] strArray14 = commandLine8.getArgs();
        commandLine8.addArg("org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(optionBuilder13);
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.util.List list22 = option18.getValuesList();
        char char23 = option18.getValueSeparator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String[] strArray19 = commandLine14.getOptionValues("[ option:   +ARG ::  ]");
        boolean boolean21 = commandLine14.hasOption('\000');
        boolean boolean23 = commandLine14.hasOption("[ Options: [ short {=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ] [ long {org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ]");
        boolean boolean25 = commandLine14.hasOption("[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser28.parse(options29, strArray34, properties35);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine43 = posixParser27.parse(options29, strArray42);
        java.lang.String[] strArray45 = posixParser9.flatten(options19, strArray42, true);
        java.util.Collection collection46 = options19.getOptionGroups();
        boolean boolean48 = options19.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options51, strArray56, properties57);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser49.parse(options51, strArray60, properties61, true);
        java.lang.Object obj65 = commandLine63.getOptionObject(' ');
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options19, strArray66, properties67);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options75 = options69.addOption(option74);
        org.apache.commons.cli.Options options79 = options69.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create('a');
        option81.setDescription("");
        option81.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str87 = option81.getValue("a");
        org.apache.commons.cli.Options options88 = options69.addOption(option81);
        java.lang.String[] strArray89 = null;
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options88, strArray89);
        org.apache.commons.cli.Option option92 = options88.getOption("");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "a" + "'", str87, "a");
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(option92);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        java.lang.String str65 = commandLine63.getOptionValue("org.apache.commons.cli.ParseException: ");
        java.util.Iterator iterator66 = commandLine63.iterator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(iterator66);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        boolean boolean38 = options10.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str39 = options10.toString();
        org.apache.commons.cli.OptionGroup optionGroup40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options41 = options10.addOptionGroup(optionGroup40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String str19 = commandLine16.getOptionValue('a');
        java.lang.String[] strArray21 = commandLine16.getOptionValues('#');
        commandLine16.addArg("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strArray21);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray4 = commandLine0.getArgs();
        org.apache.commons.cli.OptionBuilder optionBuilder5 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine0);
        commandLine0.addArg("a");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(optionBuilder5);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String[] strArray18 = commandLine16.getArgs();
        java.util.Iterator iterator19 = commandLine16.iterator();
        boolean boolean21 = commandLine16.hasOption("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        java.lang.String str24 = commandLine16.getOptionValue("[ option:    :: [ option:   +ARG ::  ] ]", "org.apache.commons.cli.MissingOptionException: arg");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.apache.commons.cli.MissingOptionException: arg" + "'", str24, "org.apache.commons.cli.MissingOptionException: arg");
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        java.lang.String[] strArray14 = commandLine8.getOptionValues('a');
        boolean boolean16 = commandLine8.hasOption("[ option:   :: null ]");
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str22 = option21.toString();
        boolean boolean24 = option21.equals((java.lang.Object) 100L);
        boolean boolean25 = option21.hasLongOpt();
        commandLine8.addOption(option21);
        java.lang.String str29 = commandLine8.getOptionValue('4', "org.apache.commons.cli.MissingOptionException: ");
        java.lang.String[] strArray31 = commandLine8.getOptionValues('#');
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ option:   +ARG ::  ]" + "'", str22, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.apache.commons.cli.MissingOptionException: " + "'", str29, "org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNull(strArray31);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str2 = commandLine0.getOptionValue('#');
        java.lang.String str4 = commandLine0.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.util.List list5 = commandLine0.getArgList();
        java.lang.String str8 = commandLine0.getOptionValue("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]", "org.apache.commons.cli.ParseException: a");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.cli.ParseException: a" + "'", str8, "org.apache.commons.cli.ParseException: a");
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        java.lang.String[] strArray16 = commandLine0.getOptionValues('4');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(strArray16);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray1 = commandLine0.getArgs();
        java.lang.String str3 = commandLine0.getOptionValue('#');
        java.lang.String str5 = commandLine0.getOptionValue('a');
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.util.List list4 = commandLine0.getArgList();
        java.lang.Object obj6 = commandLine0.getOptionObject('4');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser46.parse(options47, strArray52, properties53);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser45.parse(options47, strArray56, properties57, true);
        org.apache.commons.cli.Option option61 = options47.getOption("[ option:   +ARG ::  ]");
        java.lang.String str62 = options47.toString();
        boolean boolean64 = options47.hasOption("hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "org.apache.commons.cli.ParseException: ", "[ option:   :: null ]", "org.apache.commons.cli.MissingOptionException: ", "arg", "org.apache.commons.cli.MissingOptionException: " };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser0.parse(options47, strArray71, properties72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options78 = options47.addOption("org.apache.commons.cli.ParseException: a", "org.apache.commons.cli.ParseException: a", true, "[ option: a  ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNull(option61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str62, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String str19 = commandLine16.getOptionValue('a');
        java.util.Iterator iterator20 = commandLine16.iterator();
        java.lang.String str22 = commandLine16.getOptionValue("");
        java.util.Iterator iterator23 = commandLine16.iterator();
        java.lang.Object obj25 = commandLine16.getOptionObject('\000');
        commandLine16.addArg("[ option:    :: [ option:   +ARG ::  ] ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        boolean boolean14 = commandLine8.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str20 = option19.toString();
        boolean boolean22 = option19.equals((java.lang.Object) 100L);
        char char23 = option19.getValueSeparator();
        commandLine8.addOption(option19);
        java.lang.String str26 = commandLine8.getOptionValue("[ option:   +ARG ::  ]");
        java.lang.String str28 = commandLine8.getOptionValue('a');
        java.lang.Object obj30 = commandLine8.getOptionObject("org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option:   +ARG ::  ]" + "'", str20, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        posixParser0.burstToken("[ option:   +ARG ::  ]", false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options40, strArray45, properties46);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser38.parse(options40, strArray49, properties50, true);
        org.apache.commons.cli.Option option54 = options40.getOption("[ option:   +ARG ::  ]");
        java.lang.String str55 = options40.toString();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('a');
        option57.setDescription("");
        option57.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str62 = option57.getDescription();
        org.apache.commons.cli.Options options63 = options40.addOption(option57);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser65.parse(options66, strArray71, properties72);
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser64.parse(options66, strArray75, properties76, true);
        java.lang.Object obj80 = commandLine78.getOptionObject(' ');
        java.lang.String[] strArray81 = commandLine78.getArgs();
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options63, strArray81);
        java.lang.String str85 = commandLine82.getOptionValue('a', "[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNull(option54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str55, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ option:   +ARG ::  ]" + "'", str62, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ option:   :: null ]" + "'", str85, "[ option:   :: null ]");
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("a");
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser15.parse(options16, strArray21, properties22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser34.parse(options35, strArray40, properties41);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine49 = posixParser33.parse(options35, strArray48);
        java.lang.String[] strArray51 = posixParser15.flatten(options25, strArray48, true);
        java.util.List list52 = options25.getRequiredOptions();
        java.util.Collection collection53 = options25.getOptions();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create("");
        option55.setLongOpt("hi!");
        int int58 = option55.getArgs();
        java.lang.String str59 = option55.getLongOpt();
        org.apache.commons.cli.Options options60 = options25.addOption(option55);
        org.apache.commons.cli.PosixParser posixParser61 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser62 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser62.parse(options63, strArray68, properties69);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser61.parse(options63, strArray72, properties73, true);
        org.apache.commons.cli.Option option77 = options63.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option79 = org.apache.commons.cli.OptionBuilder.create('a');
        option79.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup82 = options63.getOptionGroup(option79);
        java.lang.String str83 = option79.getKey();
        option79.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options86 = options60.addOption(option79);
        commandLine0.addOption(option79);
        org.apache.commons.cli.CommandLine commandLine88 = new org.apache.commons.cli.CommandLine();
        java.lang.String str91 = commandLine88.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj93 = commandLine88.getOptionObject('a');
        java.lang.String str95 = commandLine88.getOptionValue('4');
        java.lang.String[] strArray97 = commandLine88.getOptionValues("[ option:   +ARG ::  ]");
        boolean boolean98 = option79.equals((java.lang.Object) "[ option:   +ARG ::  ]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNull(option77);
        org.junit.Assert.assertNotNull(option79);
        org.junit.Assert.assertNull(optionGroup82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str91, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNull(strArray97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        java.lang.String str65 = commandLine63.getOptionValue("");
        java.util.List list66 = commandLine63.getArgList();
        java.lang.String[] strArray67 = commandLine63.getArgs();
        java.util.List list68 = commandLine63.getArgList();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(list68);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = options0.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.Collection collection3 = options0.getOptionGroups();
        java.util.Collection collection4 = options0.getOptions();
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine13 = posixParser5.parse(options6, strArray11, properties12);
        java.lang.String str14 = options6.toString();
        org.apache.commons.cli.Options options19 = options6.addOption("", "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser20 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = posixParser20.parse(options21, strArray26, properties27);
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options40, strArray45, properties46);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine54 = posixParser38.parse(options40, strArray53);
        java.lang.String[] strArray56 = posixParser20.flatten(options30, strArray53, true);
        java.util.List list57 = options30.getRequiredOptions();
        java.util.Collection collection58 = options30.getOptions();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create("");
        option60.setLongOpt("hi!");
        int int63 = option60.getArgs();
        java.lang.String str64 = option60.getLongOpt();
        org.apache.commons.cli.Options options65 = options30.addOption(option60);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = options66.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        option60.setType((java.lang.Object) "org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.OptionGroup optionGroup70 = options19.getOptionGroup(option60);
        org.apache.commons.cli.Options options71 = options0.addOption(option60);
        java.lang.String str72 = option60.toString();
        org.junit.Assert.assertNull(option2);
        org.junit.Assert.assertNotNull(collection3);
        org.junit.Assert.assertNotNull(collection4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str14, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNull(option68);
        org.junit.Assert.assertNull(optionGroup70);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ option:  hi!  :: null :: org.apache.commons.cli.MissingArgumentException: hi! ]" + "'", str72, "[ option:  hi!  :: null :: org.apache.commons.cli.MissingArgumentException: hi! ]");
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        java.lang.String[] strArray14 = commandLine8.getOptionValues('a');
        boolean boolean16 = commandLine8.hasOption("[ option:   :: null ]");
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str22 = option21.toString();
        boolean boolean24 = option21.equals((java.lang.Object) 100L);
        boolean boolean25 = option21.hasLongOpt();
        commandLine8.addOption(option21);
        option21.setArgs(97);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ option:   +ARG ::  ]" + "'", str22, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        posixParser0.burstToken("a", false);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        java.lang.String str16 = options15.toString();
        java.util.Collection collection17 = options15.getOptionGroups();
        java.util.List list18 = options15.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser20 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = posixParser20.parse(options21, strArray26, properties27);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine35 = posixParser19.parse(options21, strArray34);
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser0.parse(options15, strArray34, properties36);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str16, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection17);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(commandLine37);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        boolean boolean19 = options2.hasOption("hi!");
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String[] strArray25 = option24.getValues();
        boolean boolean26 = option24.hasArgName();
        option24.setLongOpt("org.apache.commons.cli.ParseException: ");
        option24.setOptionalArg(true);
        org.apache.commons.cli.Options options31 = options2.addOption(option24);
        java.util.Collection collection32 = options2.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNotNull(collection32);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        posixParser0.burstToken("[ option:   +ARG ::  ]", false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options40, strArray45, properties46);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser38.parse(options40, strArray49, properties50, true);
        org.apache.commons.cli.Option option54 = options40.getOption("[ option:   +ARG ::  ]");
        java.lang.String str55 = options40.toString();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create('a');
        option57.setDescription("");
        option57.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str62 = option57.getDescription();
        org.apache.commons.cli.Options options63 = options40.addOption(option57);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser65.parse(options66, strArray71, properties72);
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser64.parse(options66, strArray75, properties76, true);
        java.lang.Object obj80 = commandLine78.getOptionObject(' ');
        java.lang.String[] strArray81 = commandLine78.getArgs();
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options63, strArray81);
        java.util.Collection collection83 = options63.getOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNull(option54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str55, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ option:   +ARG ::  ]" + "'", str62, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(collection83);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        commandLine55.addArg("");
        boolean boolean59 = commandLine55.hasOption('4');
        java.lang.String[] strArray61 = commandLine55.getOptionValues("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a");
        java.lang.String[] strArray62 = commandLine55.getArgs();
        java.lang.String str64 = commandLine55.getOptionValue('a');
        java.lang.Object obj66 = commandLine55.getOptionObject(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str6 = option4.getValue("");
        boolean boolean7 = option4.hasOptionalArg();
        option4.setArgName("org.apache.commons.cli.MissingOptionException: arg");
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser11.parse(options12, strArray17, properties18);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine26 = posixParser10.parse(options12, strArray25);
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser28.parse(options29, strArray34, properties35);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser27.parse(options29, strArray38, properties39, true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        org.apache.commons.cli.CommandLine commandLine59 = posixParser10.parse(options29, strArray57);
        boolean boolean60 = option4.equals((java.lang.Object) posixParser10);
        posixParser10.burstToken("[ option:  arg  :: [ Options: [ short {} ] [ long {} ] ]", false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        posixParser0.burstToken("hi!", false);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options73 = options67.addOption(option72);
        java.lang.String[] strArray80 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.ParseException: ", "hi!", "", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", "[ Options: [ short {} ] [ long {} ]" };
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options73, strArray80, properties81);
        java.lang.String str83 = options73.toString();
        java.util.List list84 = options73.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]" + "'", str83, "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNotNull(list84);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("a");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        option20.setArgName("hi!");
        commandLine0.addOption(option20);
        java.lang.String str25 = option20.toString();
        boolean boolean26 = option20.hasArgName();
        boolean boolean27 = option20.hasValueSeparator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ option:    :: [ option:   +ARG ::  ] ]" + "'", str25, "[ option:    :: [ option:   +ARG ::  ] ]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        posixParser0.burstToken("hi!", false);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options73 = options67.addOption(option72);
        java.lang.String[] strArray80 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.ParseException: ", "hi!", "", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", "[ Options: [ short {} ] [ long {} ]" };
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options73, strArray80, properties81);
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        java.lang.String str84 = options83.toString();
        java.util.Collection collection85 = options83.getOptionGroups();
        java.util.List list86 = options83.getRequiredOptions();
        java.lang.String[] strArray87 = null;
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options83, strArray87);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str84, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection85);
        org.junit.Assert.assertNotNull(list86);
        org.junit.Assert.assertNotNull(commandLine88);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        org.apache.commons.cli.OptionBuilder optionBuilder13 = org.apache.commons.cli.OptionBuilder.hasArgs();
        java.lang.Class<?> wildcardClass14 = optionBuilder13.getClass();
        boolean boolean15 = option9.equals((java.lang.Object) wildcardClass14);
        java.lang.String str16 = option9.getArgName();
        option9.setArgName("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(optionBuilder13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create("");
        option19.setLongOpt("hi!");
        option19.setOptionalArg(true);
        commandLine14.addOption(option19);
        option19.setDescription("arg");
        java.lang.String str27 = option19.getArgName();
        option19.setValueSeparator('\000');
        boolean boolean30 = option19.hasValueSeparator();
        java.util.List list31 = option19.getValuesList();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(list31);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        commandLine55.addArg("");
        boolean boolean59 = commandLine55.hasOption('4');
        java.lang.String[] strArray61 = commandLine55.getOptionValues("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a");
        java.lang.String[] strArray62 = commandLine55.getArgs();
        java.lang.String[] strArray64 = commandLine55.getOptionValues(' ');
        java.lang.String str66 = commandLine55.getOptionValue('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        org.apache.commons.cli.Options options60 = options36.addOption("", "org.apache.commons.cli.MissingOptionException: arg", false, "a");
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str66 = option65.toString();
        boolean boolean68 = option65.equals((java.lang.Object) 100L);
        option65.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup71 = options36.getOptionGroup(option65);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[ option:   +ARG ::  ]" + "'", str66, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(optionGroup71);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create("");
        option19.setLongOpt("hi!");
        option19.setOptionalArg(true);
        commandLine14.addOption(option19);
        option19.setDescription("arg");
        java.lang.String str27 = option19.getArgName();
        java.util.List list28 = option19.getValuesList();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.util.List list22 = options2.getRequiredOptions();
        org.apache.commons.cli.OptionGroup optionGroup23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options24 = options2.addOptionGroup(optionGroup23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertNotNull(list22);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        org.apache.commons.cli.Option[] optionArray50 = commandLine49.getOptions();
        java.lang.String str52 = commandLine49.getOptionValue("org.apache.commons.cli.ParseException: ");
        java.lang.Object obj54 = commandLine49.getOptionObject('4');
        java.lang.String str56 = commandLine49.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(optionArray50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.Collection collection37 = options10.getOptionGroups();
        java.util.List list38 = options10.helpOptions();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(list38);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder17 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options2);
        org.apache.commons.cli.Option option19 = options2.getOption("a");
        org.apache.commons.cli.Option option21 = options2.getOption("[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
        org.apache.commons.cli.Option option23 = options2.getOption("[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(optionBuilder17);
        org.junit.Assert.assertNull(option19);
        org.junit.Assert.assertNull(option21);
        org.junit.Assert.assertNull(option23);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        java.lang.String str36 = commandLine33.getOptionValue("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.util.Iterator iterator37 = commandLine33.iterator();
        boolean boolean39 = commandLine33.hasOption("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        boolean boolean41 = commandLine33.hasOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.util.Iterator iterator42 = commandLine33.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: " + "'", str36, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(iterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(iterator42);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.Option option47 = options45.getOption("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options52 = options45.addOption("[ option: a  ::  ]", "org.apache.commons.cli.UnrecognizedOptionException: ", false, "[ Options: [ short {} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNull(option47);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray4 = commandLine0.getArgs();
        org.apache.commons.cli.OptionBuilder optionBuilder5 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine0);
        java.util.Iterator iterator6 = commandLine0.iterator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(optionBuilder5);
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.util.Iterator iterator23 = commandLine14.iterator();
        java.lang.String str26 = commandLine14.getOptionValue('a', "");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser53.parse(options55, strArray64, properties65, true);
        org.apache.commons.cli.Option option69 = options55.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('a');
        option71.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup74 = options55.getOptionGroup(option71);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = posixParser0.flatten(options55, strArray81, true);
        org.apache.commons.cli.Options options86 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option88 = options86.getOption("");
        org.apache.commons.cli.PosixParser posixParser89 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options90 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray95 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser89.parse(options90, strArray95, properties96);
        java.lang.String[] strArray99 = posixParser0.flatten(options86, strArray95, false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(option69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNull(option88);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(strArray99);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        posixParser0.burstToken("hi!", false);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options73 = options67.addOption(option72);
        java.lang.String[] strArray80 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.ParseException: ", "hi!", "", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", "[ Options: [ short {} ] [ long {} ]" };
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options73, strArray80, properties81);
        posixParser0.burstToken("arg", false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        option1.setOptionalArg(false);
        boolean boolean4 = option1.hasLongOpt();
        org.apache.commons.cli.CommandLine commandLine5 = new org.apache.commons.cli.CommandLine();
        java.lang.String str7 = commandLine5.getOptionValue('#');
        option1.setType((java.lang.Object) '#');
        java.lang.String str9 = option1.getLongOpt();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.List list47 = options20.getRequiredOptions();
        java.util.Collection collection48 = options20.getOptions();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create("");
        option50.setLongOpt("hi!");
        int int53 = option50.getArgs();
        java.lang.String str54 = option50.getLongOpt();
        org.apache.commons.cli.Options options55 = options20.addOption(option50);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option58 = options56.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        option50.setType((java.lang.Object) "org.apache.commons.cli.MissingArgumentException: hi!");
        option50.setArgs(1);
        boolean boolean62 = option1.equals((java.lang.Object) 1);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNull(option58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        boolean boolean19 = options2.hasOption("hi!");
        java.util.Collection collection20 = options2.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(collection20);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        boolean boolean13 = option9.hasArgs();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        org.apache.commons.cli.OptionBuilder optionBuilder13 = org.apache.commons.cli.OptionBuilder.hasArgs();
        java.lang.Class<?> wildcardClass14 = optionBuilder13.getClass();
        boolean boolean15 = option9.equals((java.lang.Object) wildcardClass14);
        option9.setRequired(true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(optionBuilder13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        boolean boolean18 = commandLine14.hasOption("[ option:   +ARG ::  ]");
        java.lang.String[] strArray19 = commandLine14.getArgs();
        java.util.Iterator iterator20 = commandLine14.iterator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(iterator20);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.String[] strArray13 = option9.getValues();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strArray13);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser47.parse(options48, strArray53, properties54);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser46.parse(options48, strArray57, properties58, true);
        org.apache.commons.cli.Option option62 = options48.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create('a');
        option64.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup67 = options48.getOptionGroup(option64);
        java.lang.String str68 = option64.getKey();
        option64.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options71 = options45.addOption(option64);
        java.util.List list72 = options45.getRequiredOptions();
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options79 = options73.addOption(option78);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create("");
        org.apache.commons.cli.Options options82 = options73.addOption(option81);
        option81.setRequired(false);
        org.apache.commons.cli.OptionGroup optionGroup85 = options45.getOptionGroup(option81);
        org.apache.commons.cli.Option option87 = options45.getOption("org.apache.commons.cli.MissingArgumentException: a");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-2) + "'", int43 == (-2));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNull(option62);
        org.junit.Assert.assertNotNull(option64);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "a" + "'", str68, "a");
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertNull(option87);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        boolean boolean18 = commandLine14.hasOption("[ option:   +ARG ::  ]");
        java.lang.Object obj20 = commandLine14.getOptionObject("[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        posixParser0.burstToken("[ option:   +ARG ::  ]", false);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: arg", false);
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str44 = option42.getValue("");
        java.lang.String str45 = option42.toString();
        java.lang.String str46 = option42.getKey();
        int int47 = option42.getArgs();
        java.util.ListIterator listIterator48 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option42, listIterator48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ option:   :: null ]" + "'", str45, "[ option:   :: null ]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        org.apache.commons.cli.Option[] optionArray50 = commandLine49.getOptions();
        java.lang.String str52 = commandLine49.getOptionValue(' ');
        java.lang.String str55 = commandLine49.getOptionValue("org.apache.commons.cli.MissingOptionException: arg", "");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(optionArray50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        commandLine55.addArg("");
        boolean boolean59 = commandLine55.hasOption('4');
        java.lang.String[] strArray61 = commandLine55.getOptionValues("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a");
        java.lang.String[] strArray62 = commandLine55.getArgs();
        java.lang.String str64 = commandLine55.getOptionValue('a');
        boolean boolean66 = commandLine55.hasOption(' ');
        commandLine55.addArg("hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder17 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options2);
        org.apache.commons.cli.OptionGroup optionGroup18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options19 = options2.addOptionGroup(optionGroup18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(optionBuilder17);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        org.apache.commons.cli.Option[] optionArray26 = commandLine14.getOptions();
        java.lang.String[] strArray27 = commandLine14.getArgs();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('a');
        option29.setDescription("");
        boolean boolean32 = option29.hasArgName();
        commandLine14.addOption(option29);
        boolean boolean34 = option29.hasArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str3 = option1.getValue("");
        java.lang.String str4 = option1.toString();
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser6.parse(options7, strArray12, properties13);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine21 = posixParser5.parse(options7, strArray20);
        java.util.List list22 = commandLine21.getArgList();
        java.lang.String str24 = commandLine21.getOptionValue('a');
        java.util.Iterator iterator25 = commandLine21.iterator();
        java.lang.String str27 = commandLine21.getOptionValue("");
        boolean boolean28 = option1.equals((java.lang.Object) commandLine21);
        boolean boolean30 = commandLine21.hasOption('4');
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[ option:   :: null ]" + "'", str4, "[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        java.lang.String str65 = commandLine63.getOptionValue("");
        boolean boolean67 = commandLine63.hasOption("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj5 = commandLine0.getOptionObject('a');
        java.lang.Object obj7 = commandLine0.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: arg");
        boolean boolean9 = commandLine0.hasOption("[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str5 = option4.toString();
        int int6 = option4.getArgs();
        option4.setLongOpt("");
        option4.setDescription("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a");
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser12.parse(options13, strArray18, properties19);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine27 = posixParser11.parse(options13, strArray26);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options34 = options28.addOption(option33);
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser44.parse(options45, strArray50, properties51);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser53.parse(options55, strArray68);
        java.lang.String[] strArray71 = posixParser35.flatten(options45, strArray68, true);
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser11.parse(options28, strArray71, properties72, false);
        posixParser11.burstToken("hi!", false);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option83 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options84 = options78.addOption(option83);
        java.lang.String[] strArray91 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.ParseException: ", "hi!", "", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", "[ Options: [ short {} ] [ long {} ]" };
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser11.parse(options84, strArray91, properties92);
        java.lang.String str94 = options84.toString();
        option4.setType((java.lang.Object) str94);
        java.lang.String str96 = option4.getValue();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ option:   +ARG ::  ]" + "'", str5, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]" + "'", str94, "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser11.parse(options12, strArray17, properties18);
        org.apache.commons.cli.PosixParser posixParser20 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = posixParser20.parse(options21, strArray26, properties27);
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser30.parse(options31, strArray36, properties37);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine45 = posixParser29.parse(options31, strArray44);
        java.lang.String[] strArray47 = posixParser11.flatten(options21, strArray44, true);
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser1.parse(options3, strArray44, properties48);
        java.util.Collection collection50 = options3.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser51.parse(options52, strArray57, properties58);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options3, strArray57);
        java.lang.String str62 = commandLine60.getOptionValue(' ');
        commandLine60.addArg("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(collection50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        boolean boolean27 = commandLine14.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.Object obj29 = commandLine14.getOptionObject("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        java.lang.String str32 = commandLine14.getOptionValue('4', "hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.util.Iterator iterator49 = commandLine48.iterator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(iterator49);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        boolean boolean38 = options10.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.Collection collection39 = options10.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection39);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create("");
        option19.setLongOpt("hi!");
        option19.setOptionalArg(true);
        commandLine14.addOption(option19);
        option19.setRequired(true);
        java.lang.String str27 = option19.getArgName();
        boolean boolean28 = option19.hasArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        java.util.Collection collection50 = options19.getOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(collection50);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        java.lang.String str16 = commandLine0.getOptionValue("a");
        java.lang.String str18 = commandLine0.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser11.parse(options12, strArray17, properties18);
        org.apache.commons.cli.PosixParser posixParser20 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine28 = posixParser20.parse(options21, strArray26, properties27);
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser30.parse(options31, strArray36, properties37);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine45 = posixParser29.parse(options31, strArray44);
        java.lang.String[] strArray47 = posixParser11.flatten(options21, strArray44, true);
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser1.parse(options3, strArray44, properties48);
        java.util.Collection collection50 = options3.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser51.parse(options52, strArray57, properties58);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options3, strArray57);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options67 = options61.addOption(option66);
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        org.apache.commons.cli.Options options70 = options61.addOption(option69);
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options61, strArray71, properties72, true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(collection50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNotNull(commandLine74);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        java.lang.Object obj27 = commandLine14.getOptionObject('\000');
        java.lang.String str29 = commandLine14.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: arg");
        java.lang.String str31 = commandLine14.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        option1.setType((java.lang.Object) option6);
        option6.setArgName("[ option:   +ARG ::  ]");
        boolean boolean10 = option6.hasOptionalArg();
        org.apache.commons.cli.CommandLine commandLine11 = new org.apache.commons.cli.CommandLine();
        java.lang.String str14 = commandLine11.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        boolean boolean22 = option20.hasArgName();
        commandLine11.addOption(option20);
        java.lang.Object obj25 = commandLine11.getOptionObject("a");
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser26.parse(options27, strArray32, properties33);
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser45.parse(options46, strArray51, properties52);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine60 = posixParser44.parse(options46, strArray59);
        java.lang.String[] strArray62 = posixParser26.flatten(options36, strArray59, true);
        java.util.List list63 = options36.getRequiredOptions();
        java.util.Collection collection64 = options36.getOptions();
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create("");
        option66.setLongOpt("hi!");
        int int69 = option66.getArgs();
        java.lang.String str70 = option66.getLongOpt();
        org.apache.commons.cli.Options options71 = options36.addOption(option66);
        org.apache.commons.cli.PosixParser posixParser72 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options74 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser73.parse(options74, strArray79, properties80);
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.util.Properties properties84 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser72.parse(options74, strArray83, properties84, true);
        org.apache.commons.cli.Option option88 = options74.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option90 = org.apache.commons.cli.OptionBuilder.create('a');
        option90.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup93 = options74.getOptionGroup(option90);
        java.lang.String str94 = option90.getKey();
        option90.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        org.apache.commons.cli.Options options97 = options71.addOption(option90);
        commandLine11.addOption(option90);
        boolean boolean99 = option6.equals((java.lang.Object) option90);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str14, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(option88);
        org.junit.Assert.assertNotNull(option90);
        org.junit.Assert.assertNull(optionGroup93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "a" + "'", str94, "a");
        org.junit.Assert.assertNotNull(options97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        commandLine0.addArg("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: arg");
        java.lang.String str7 = commandLine0.getOptionValue('4');
        java.lang.String str10 = commandLine0.getOptionValue("arg", "[ option: a  ::  ]");
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ option: a  ::  ]" + "'", str10, "[ option: a  ::  ]");
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        boolean boolean46 = options11.hasOption("[ option:   +ARG ::  ]");
        boolean boolean48 = options11.hasOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        org.apache.commons.cli.Options options60 = options36.addOption("", "org.apache.commons.cli.MissingOptionException: arg", false, "a");
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('a');
        option62.setDescription("");
        java.lang.Object obj65 = option62.getType();
        char char66 = option62.getValueSeparator();
        option62.setLongOpt("");
        option62.setArgName("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray71 = option62.getValues();
        org.apache.commons.cli.Options options72 = options36.addOption(option62);
        java.util.List list73 = options72.helpOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options78 = options72.addOption("[ option: a  ::  ]", "org.apache.commons.cli.ParseException: a", false, "org.apache.commons.cli.ParseException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + char66 + "' != '" + '\000' + "'", char66 == '\000');
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(list73);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        posixParser0.burstToken("[ option:  arg  :: [ Options: [ short {} ] [ long {} ] ]", false);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingArgumentException: hi!", true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str5 = option4.toString();
        boolean boolean7 = option4.equals((java.lang.Object) 100L);
        boolean boolean8 = option4.hasArgs();
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String str11 = commandLine9.getOptionValue('#');
        java.lang.String str13 = commandLine9.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.lang.String str16 = commandLine9.getOptionValue('\000', "a");
        boolean boolean17 = option4.equals((java.lang.Object) commandLine9);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ option:   +ARG ::  ]" + "'", str5, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "a" + "'", str16, "a");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('a');
        option47.setDescription("");
        option47.setLongOpt("");
        org.apache.commons.cli.OptionGroup optionGroup52 = options45.getOptionGroup(option47);
        java.lang.String str53 = option47.getKey();
        java.lang.String str54 = option47.getOpt();
        java.lang.String str55 = option47.getOpt();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "a" + "'", str53, "a");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "a" + "'", str54, "a");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "a" + "'", str55, "a");
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        boolean boolean21 = commandLine14.hasOption('4');
        java.lang.String[] strArray22 = commandLine14.getArgs();
        java.lang.String[] strArray23 = commandLine14.getArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        java.lang.String str9 = options1.toString();
        org.apache.commons.cli.Options options14 = options1.addOption("", "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]", true, "hi!");
        org.apache.commons.cli.Options options19 = options1.addOption("", "org.apache.commons.cli.MissingOptionException: ", true, "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        java.util.List list20 = options1.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str9, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(list20);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        java.lang.String str4 = commandLine0.getOptionValue("", "hi!");
        boolean boolean6 = commandLine0.hasOption(' ');
        boolean boolean8 = commandLine0.hasOption("org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        org.apache.commons.cli.OptionGroup optionGroup22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options23 = options2.addOptionGroup(optionGroup22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        java.lang.String str35 = commandLine33.getOptionValue('4');
        java.lang.String str37 = commandLine33.getOptionValue("org.apache.commons.cli.ParseException: ");
        java.lang.String str39 = commandLine33.getOptionValue('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String[] strArray20 = commandLine14.getArgs();
        java.lang.String[] strArray22 = commandLine14.getOptionValues("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(strArray22);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj5 = commandLine0.getOptionObject('a');
        java.lang.String str7 = commandLine0.getOptionValue("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.Options options49 = options11.addOption("", "arg", true, "");
        java.util.Collection collection50 = options49.getOptionGroups();
        java.lang.Class<?> wildcardClass51 = options49.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(collection50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options55 = options49.addOption(option54);
        org.apache.commons.cli.Options options59 = options49.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('a');
        option61.setDescription("");
        option61.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str67 = option61.getValue("a");
        org.apache.commons.cli.Options options68 = options49.addOption(option61);
        java.lang.String str69 = options68.toString();
        java.lang.String[] strArray70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options68, strArray70, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options77 = options68.addOption("org.apache.commons.cli.ParseException: a", "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]", true, "[ Options: [ short {=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ] [ long {org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "a" + "'", str67, "a");
        org.junit.Assert.assertNotNull(options68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]" + "'", str69, "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNotNull(commandLine72);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        posixParser0.burstToken("hi!", false);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options73 = options67.addOption(option72);
        java.lang.String[] strArray80 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.ParseException: ", "hi!", "", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", "[ Options: [ short {} ] [ long {} ]" };
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser0.parse(options73, strArray80, properties81);
        java.lang.String str83 = options73.toString();
        org.apache.commons.cli.Option option85 = options73.getOption("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        java.util.Collection collection86 = options73.getOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]" + "'", str83, "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNull(option85);
        org.junit.Assert.assertNotNull(collection86);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.lang.String str50 = commandLine48.getOptionValue(' ');
        java.lang.String str52 = commandLine48.getOptionValue("org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str21 = commandLine14.getOptionValue("hi!");
        java.lang.String str23 = commandLine14.getOptionValue(' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String[] strArray19 = commandLine14.getOptionValues("[ option:   +ARG ::  ]");
        boolean boolean21 = commandLine14.hasOption("org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        commandLine14.addArg("org.apache.commons.cli.UnrecognizedOptionException: arg");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        boolean boolean5 = commandLine0.hasOption('#');
        org.apache.commons.cli.Option option7 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str9 = option7.getValue("");
        java.lang.String str10 = option7.getOpt();
        boolean boolean11 = option7.hasOptionalArg();
        java.util.List list12 = option7.getValuesList();
        option7.setRequired(true);
        commandLine0.addOption(option7);
        boolean boolean17 = commandLine0.hasOption('a');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(option7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        boolean boolean14 = commandLine8.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str20 = option19.toString();
        boolean boolean22 = option19.equals((java.lang.Object) 100L);
        char char23 = option19.getValueSeparator();
        commandLine8.addOption(option19);
        java.lang.String str26 = option19.getValue("hi!");
        java.lang.String str27 = option19.getArgName();
        org.apache.commons.cli.OptionBuilder optionBuilder28 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) str27);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option:   +ARG ::  ]" + "'", str20, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(optionBuilder28);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("a");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        option20.setArgName("hi!");
        commandLine0.addOption(option20);
        java.lang.String str25 = option20.toString();
        boolean boolean26 = option20.hasArgName();
        boolean boolean27 = option20.hasArgs();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ option:    :: [ option:   +ARG ::  ] ]" + "'", str25, "[ option:    :: [ option:   +ARG ::  ] ]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str3 = option1.getValue("");
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser6.parse(options7, strArray12, properties13);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine21 = posixParser5.parse(options7, strArray20);
        org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser23 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser23.parse(options24, strArray29, properties30);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser22.parse(options24, strArray33, properties34, true);
        org.apache.commons.cli.CommandLine commandLine37 = posixParser4.parse(options7, strArray33);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options40, strArray45, properties46);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser38.parse(options40, strArray49, properties50, true);
        org.apache.commons.cli.Option option54 = options40.getOption("[ option:   +ARG ::  ]");
        java.lang.String str55 = options40.toString();
        java.lang.String[] strArray56 = null;
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser4.parse(options40, strArray56, properties57, true);
        commandLine59.addArg("");
        boolean boolean63 = commandLine59.hasOption('4');
        java.lang.String[] strArray65 = commandLine59.getOptionValues("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a");
        java.lang.String[] strArray66 = commandLine59.getArgs();
        boolean boolean67 = option1.equals((java.lang.Object) commandLine59);
        commandLine59.addArg("org.apache.commons.cli.MissingOptionException: ");
        java.lang.String str72 = commandLine59.getOptionValue('#', "arg");
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNull(option54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str55, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "arg" + "'", str72, "arg");
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        java.lang.String[] strArray27 = commandLine14.getOptionValues("org.apache.commons.cli.MissingOptionException: ");
        java.lang.String[] strArray28 = commandLine14.getArgs();
        boolean boolean30 = commandLine14.hasOption(' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options55 = options49.addOption(option54);
        org.apache.commons.cli.Options options59 = options49.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create('a');
        option61.setDescription("");
        option61.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str67 = option61.getValue("a");
        org.apache.commons.cli.Options options68 = options49.addOption(option61);
        java.lang.String str69 = options68.toString();
        java.lang.String[] strArray70 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser0.parse(options68, strArray70, true);
        java.lang.Object obj74 = commandLine72.getOptionObject('4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "a" + "'", str67, "a");
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]" + "'", str69, "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser53.parse(options55, strArray64, properties65, true);
        org.apache.commons.cli.Option option69 = options55.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('a');
        option71.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup74 = options55.getOptionGroup(option71);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = posixParser0.flatten(options55, strArray81, true);
        java.util.Collection collection86 = options55.getOptions();
        java.util.Collection collection87 = options55.getOptionGroups();
        org.apache.commons.cli.Option option89 = options55.getOption("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options94 = options55.addOption("[ option:  arg  :: [ Options: [ short {} ] [ long {} ] ]", "", false, "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(option69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(collection86);
        org.junit.Assert.assertNotNull(collection87);
        org.junit.Assert.assertNull(option89);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options51 = options45.addOption(option50);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser53.parse(options55, strArray68);
        org.apache.commons.cli.PosixParser posixParser70 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser71.parse(options72, strArray77, properties78);
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser70.parse(options72, strArray81, properties82, true);
        org.apache.commons.cli.CommandLine commandLine85 = posixParser52.parse(options55, strArray81);
        org.apache.commons.cli.CommandLine commandLine86 = posixParser0.parse(options45, strArray81);
        java.lang.String str88 = commandLine86.getOptionValue("[ option:    :: [ option:   +ARG ::  ] ]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        boolean boolean19 = options2.hasOption("hi!");
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String[] strArray25 = option24.getValues();
        boolean boolean26 = option24.hasArgName();
        option24.setLongOpt("org.apache.commons.cli.ParseException: ");
        option24.setOptionalArg(true);
        org.apache.commons.cli.Options options31 = options2.addOption(option24);
        java.lang.String str32 = option24.getOpt();
        boolean boolean33 = option24.hasLongOpt();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = posixParser38.parse(options39, strArray44, properties45);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser37.parse(options39, strArray48, properties49, true);
        org.apache.commons.cli.Option option53 = options39.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options39);
        org.apache.commons.cli.Option option56 = options39.getOption("a");
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser57.parse(options58, strArray63, properties64);
        org.apache.commons.cli.PosixParser posixParser66 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser66.parse(options67, strArray72, properties73);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser76 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser76.parse(options77, strArray82, properties83);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine91 = posixParser75.parse(options77, strArray90);
        java.lang.String[] strArray93 = posixParser57.flatten(options67, strArray90, true);
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser0.parse(options39, strArray90, properties94);
        posixParser0.burstToken("[ option: a  ::  ]", false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNull(option53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNull(option56);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine95);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("a");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        option20.setArgName("hi!");
        commandLine0.addOption(option20);
        java.lang.String str25 = option20.toString();
        boolean boolean26 = option20.hasArgName();
        boolean boolean27 = option20.hasLongOpt();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ option:    :: [ option:   +ARG ::  ] ]" + "'", str25, "[ option:    :: [ option:   +ARG ::  ] ]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser28.parse(options29, strArray34, properties35);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine43 = posixParser27.parse(options29, strArray42);
        java.lang.String[] strArray45 = posixParser9.flatten(options19, strArray42, true);
        java.util.Collection collection46 = options19.getOptionGroups();
        boolean boolean48 = options19.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options51, strArray56, properties57);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser49.parse(options51, strArray60, properties61, true);
        java.lang.Object obj65 = commandLine63.getOptionObject(' ');
        java.lang.String[] strArray66 = commandLine63.getArgs();
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser0.parse(options19, strArray66, properties67);
        boolean boolean70 = commandLine68.hasOption("");
        java.util.Iterator iterator71 = commandLine68.iterator();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iterator71);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: ", true);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties44 = null;
        org.apache.commons.cli.CommandLine commandLine45 = posixParser37.parse(options38, strArray43, properties44);
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser46.parse(options47, strArray52, properties53);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine71 = posixParser55.parse(options57, strArray70);
        java.lang.String[] strArray73 = posixParser37.flatten(options47, strArray70, true);
        java.util.List list74 = options47.getRequiredOptions();
        java.util.Collection collection75 = options47.getOptions();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create("");
        option77.setLongOpt("hi!");
        int int80 = option77.getArgs();
        java.lang.String str81 = option77.getLongOpt();
        org.apache.commons.cli.Options options82 = options47.addOption(option77);
        boolean boolean83 = option77.isRequired();
        java.lang.String str84 = option77.getDescription();
        java.util.ListIterator listIterator85 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option77, listIterator85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(collection75);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNotNull(options82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        java.lang.String[] strArray27 = commandLine14.getOptionValues("org.apache.commons.cli.MissingOptionException: ");
        commandLine14.addArg("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNull(strArray27);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('a');
        option19.setDescription("");
        option19.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str24 = option19.getDescription();
        org.apache.commons.cli.Options options25 = options2.addOption(option19);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options32 = options26.addOption(option31);
        boolean boolean33 = option31.hasArgName();
        java.lang.String str34 = option31.getValue();
        org.apache.commons.cli.Options options35 = options2.addOption(option31);
        option31.setLongOpt("org.apache.commons.cli.MissingArgumentException: a");
        option31.setRequired(true);
        boolean boolean40 = option31.hasArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:   +ARG ::  ]" + "'", str24, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String[] strArray19 = commandLine14.getOptionValues("[ option:   +ARG ::  ]");
        java.lang.Object obj21 = commandLine14.getOptionObject("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str51 = option49.getValue("");
        int int52 = option49.getArgs();
        java.lang.String str54 = option49.getValue(0);
        java.lang.String str55 = option49.getKey();
        java.lang.String str56 = option49.getKey();
        org.apache.commons.cli.Options options57 = options11.addOption(option49);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(options57);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        boolean boolean38 = options10.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Options options42 = options10.addOption("", true, "hi!");
        boolean boolean44 = options10.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option46 = org.apache.commons.cli.OptionBuilder.create("");
        option46.setLongOpt("hi!");
        int int49 = option46.getArgs();
        java.lang.String str50 = option46.getLongOpt();
        org.apache.commons.cli.OptionBuilder optionBuilder51 = org.apache.commons.cli.OptionBuilder.hasOptionalArgs();
        option46.setType((java.lang.Object) optionBuilder51);
        java.util.List list53 = option46.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup54 = options10.getOptionGroup(option46);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(option46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(optionBuilder51);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNull(optionGroup54);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        org.apache.commons.cli.Options options60 = options36.addOption("", "org.apache.commons.cli.MissingOptionException: arg", false, "a");
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('a');
        option62.setDescription("");
        java.lang.Object obj65 = option62.getType();
        char char66 = option62.getValueSeparator();
        option62.setLongOpt("");
        option62.setArgName("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray71 = option62.getValues();
        org.apache.commons.cli.Options options72 = options36.addOption(option62);
        option62.setValueSeparator('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + char66 + "' != '" + '\000' + "'", char66 == '\000');
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertNotNull(options72);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        boolean boolean21 = commandLine14.hasOption('4');
        java.util.List list22 = commandLine14.getArgList();
        java.lang.String str25 = commandLine14.getOptionValue('a', "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        java.lang.String str27 = commandLine14.getOptionValue('\000');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]" + "'", str25, "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String[] strArray18 = commandLine16.getArgs();
        java.lang.Object obj20 = commandLine16.getOptionObject('4');
        java.lang.String str22 = commandLine16.getOptionValue('#');
        org.apache.commons.cli.Option[] optionArray23 = commandLine16.getOptions();
        java.lang.String str26 = commandLine16.getOptionValue('a', "a");
        java.lang.Object obj28 = commandLine16.getOptionObject("[ option:    :: [ option:   +ARG ::  ] ]");
        boolean boolean30 = commandLine16.hasOption('a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(optionArray23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "a" + "'", str26, "a");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options10 = options4.addOption(option9);
        boolean boolean11 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.Object obj14 = commandLine0.getOptionObject("a");
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options21 = options15.addOption(option20);
        option20.setArgName("hi!");
        commandLine0.addOption(option20);
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str31 = option29.getValue("");
        int int32 = option29.getArgs();
        java.lang.String str34 = option29.getValue(0);
        java.lang.Object obj35 = option29.getType();
        commandLine0.addOption(option29);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option38.getValue("");
        java.lang.String str41 = option38.getOpt();
        boolean boolean42 = option38.hasOptionalArg();
        java.util.List list43 = option38.getValuesList();
        option38.setRequired(true);
        boolean boolean46 = option38.hasArg();
        commandLine0.addOption(option38);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.Collection collection37 = options10.getOptions();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(collection37);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.util.List list22 = options2.getRequiredOptions();
        boolean boolean24 = options2.hasOption("org.apache.commons.cli.MissingArgumentException: ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options29 = options2.addOption("hi!", "", false, "org.apache.commons.cli.MissingOptionException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '!'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        java.lang.String str4 = commandLine0.getOptionValue("", "hi!");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str10 = option9.toString();
        boolean boolean12 = option9.equals((java.lang.Object) 100L);
        option9.setDescription("");
        option9.addValue("");
        option9.setArgName("org.apache.commons.cli.ParseException: ");
        boolean boolean19 = option9.hasArgName();
        commandLine0.addOption(option9);
        java.lang.String str21 = option9.getOpt();
        int int22 = option9.getArgs();
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ option:   +ARG ::  ]" + "'", str10, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        boolean boolean18 = commandLine14.hasOption("[ option:   +ARG ::  ]");
        java.lang.String[] strArray20 = commandLine14.getOptionValues('\000');
        java.util.List list21 = commandLine14.getArgList();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strArray20);
        org.junit.Assert.assertNotNull(list21);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create("");
        option19.setLongOpt("hi!");
        option19.setOptionalArg(true);
        commandLine14.addOption(option19);
        option19.setRequired(true);
        option19.setOptionalArg(false);
        option19.setRequired(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option19);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String[] strArray18 = commandLine16.getArgs();
        java.lang.Object obj20 = commandLine16.getOptionObject('4');
        java.lang.String str22 = commandLine16.getOptionValue('#');
        java.lang.String str24 = commandLine16.getOptionValue('4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        java.lang.String[] strArray50 = commandLine49.getArgs();
        java.lang.Object obj52 = commandLine49.getOptionObject('4');
        java.lang.String[] strArray54 = commandLine49.getOptionValues('#');
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.util.List list56 = commandLine55.getArgList();
        java.lang.String str59 = commandLine55.getOptionValue("", "hi!");
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str65 = option64.toString();
        boolean boolean67 = option64.equals((java.lang.Object) 100L);
        option64.setDescription("");
        option64.addValue("");
        option64.setArgName("org.apache.commons.cli.ParseException: ");
        boolean boolean74 = option64.hasArgName();
        commandLine55.addOption(option64);
        java.lang.String str76 = option64.getOpt();
        boolean boolean77 = option64.hasOptionalArg();
        option64.setArgName("org.apache.commons.cli.MissingArgumentException: a");
        commandLine49.addOption(option64);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ option:   +ARG ::  ]" + "'", str65, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options70 = options64.addOption(option69);
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create("");
        org.apache.commons.cli.Options options73 = options64.addOption(option72);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = new java.lang.String[] { "" };
        java.util.Properties properties86 = null;
        org.apache.commons.cli.CommandLine commandLine88 = posixParser74.parse(options76, strArray85, properties86, true);
        java.util.Properties properties89 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options64, strArray85, properties89, true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(commandLine91);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option3 = options1.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.Collection collection4 = options1.getOptionGroups();
        java.util.Collection collection5 = options1.getOptions();
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser6.parse(options7, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray26, properties27, true);
        org.apache.commons.cli.Option option31 = options17.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder32 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        java.util.Collection collection33 = options17.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        java.lang.String[] strArray50 = posixParser6.flatten(options17, strArray45, false);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option56 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options57 = options51.addOption(option56);
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser59 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser60 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser60.parse(options61, strArray66, properties67);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine75 = posixParser59.parse(options61, strArray74);
        org.apache.commons.cli.PosixParser posixParser76 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser77 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties84 = null;
        org.apache.commons.cli.CommandLine commandLine85 = posixParser77.parse(options78, strArray83, properties84);
        java.lang.String[] strArray87 = new java.lang.String[] { "" };
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine90 = posixParser76.parse(options78, strArray87, properties88, true);
        org.apache.commons.cli.CommandLine commandLine91 = posixParser58.parse(options61, strArray87);
        org.apache.commons.cli.CommandLine commandLine92 = posixParser6.parse(options51, strArray87);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser0.parse(options1, strArray87, properties93, true);
        org.junit.Assert.assertNull(option3);
        org.junit.Assert.assertNotNull(collection4);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNull(option31);
        org.junit.Assert.assertNotNull(optionBuilder32);
        org.junit.Assert.assertNotNull(collection33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(commandLine95);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.lang.String str49 = options2.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        boolean boolean38 = options10.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Options options42 = options10.addOption("", true, "hi!");
        java.util.List list43 = options10.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(list43);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('a');
        option19.setDescription("");
        option19.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str24 = option19.getDescription();
        org.apache.commons.cli.Options options25 = options2.addOption(option19);
        java.lang.String str26 = option19.getOpt();
        java.lang.String str27 = option19.getArgName();
        boolean boolean28 = option19.hasArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:   +ARG ::  ]" + "'", str24, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "a" + "'", str26, "a");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        boolean boolean21 = commandLine14.hasOption('4');
        java.lang.String[] strArray22 = commandLine14.getArgs();
        java.lang.String[] strArray24 = commandLine14.getOptionValues("hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(strArray24);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        java.lang.String str4 = commandLine0.getOptionValue("", "hi!");
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str10 = option9.toString();
        boolean boolean12 = option9.equals((java.lang.Object) 100L);
        option9.setDescription("");
        option9.addValue("");
        option9.setArgName("org.apache.commons.cli.ParseException: ");
        boolean boolean19 = option9.hasArgName();
        commandLine0.addOption(option9);
        boolean boolean21 = option9.hasArgName();
        boolean boolean22 = option9.hasArgs();
        option9.setLongOpt("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a");
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ option:   +ARG ::  ]" + "'", str10, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser15.parse(options16, strArray21, properties22);
        java.lang.String str24 = options16.toString();
        org.apache.commons.cli.PosixParser posixParser25 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser25.parse(options26, strArray31, properties32);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser34.parse(options35, strArray40, properties41);
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser44.parse(options45, strArray50, properties51);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine59 = posixParser43.parse(options45, strArray58);
        java.lang.String[] strArray61 = posixParser25.flatten(options35, strArray58, true);
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options16, strArray61, false);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options64, strArray65, true);
        org.apache.commons.cli.Option option68 = null;
        // The following exception was thrown during execution in test generation
        try {
            commandLine67.addOption(option68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str24, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(commandLine67);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        boolean boolean38 = options10.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str39 = options10.toString();
        java.util.List list40 = options10.getRequiredOptions();
        org.apache.commons.cli.OptionGroup optionGroup41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options42 = options10.addOptionGroup(optionGroup41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list40);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        boolean boolean18 = commandLine14.hasOption("[ option:   +ARG ::  ]");
        java.lang.String[] strArray19 = commandLine14.getArgs();
        org.apache.commons.cli.Option[] optionArray20 = commandLine14.getOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(optionArray20);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        java.util.Collection collection34 = options3.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options38 = options3.addOption("org.apache.commons.cli.MissingOptionException: [ option:   +ARG ::  ]", true, "org.apache.commons.cli.MissingOptionException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection34);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        java.util.Collection collection34 = options3.getOptions();
        boolean boolean36 = options3.hasOption("");
        boolean boolean38 = options3.hasOption("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        boolean boolean3 = commandLine0.hasOption("org.apache.commons.cli.MissingArgumentException: ");
        boolean boolean5 = commandLine0.hasOption("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] :: 1 ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create("");
        option19.setLongOpt("hi!");
        option19.setOptionalArg(true);
        commandLine14.addOption(option19);
        java.util.Iterator iterator25 = commandLine14.iterator();
        boolean boolean27 = commandLine14.hasOption('#');
        java.lang.String str29 = commandLine14.getOptionValue('a');
        java.lang.String str31 = commandLine14.getOptionValue('\000');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.util.Collection collection49 = options2.getOptionGroups();
        java.util.Collection collection50 = options2.getOptions();
        java.util.Collection collection51 = options2.getOptionGroups();
        boolean boolean53 = options2.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(collection50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = option18.getKey();
        option18.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.lang.String str25 = option18.getKey();
        java.lang.String[] strArray26 = option18.getValues();
        option18.setDescription("hi!");
        int int29 = option18.getId();
        java.lang.String str30 = option18.getOpt();
        java.lang.String str31 = option18.getArgName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "a" + "'", str22, "a");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "a" + "'", str25, "a");
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "a" + "'", str30, "a");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: " + "'", str31, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str6 = option4.getValue("");
        boolean boolean7 = option4.hasOptionalArg();
        option4.setArgName("org.apache.commons.cli.MissingOptionException: arg");
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties18 = null;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser11.parse(options12, strArray17, properties18);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine26 = posixParser10.parse(options12, strArray25);
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser28.parse(options29, strArray34, properties35);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser27.parse(options29, strArray38, properties39, true);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        org.apache.commons.cli.CommandLine commandLine59 = posixParser10.parse(options29, strArray57);
        boolean boolean60 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option66 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options67 = options61.addOption(option66);
        java.util.Collection collection68 = options67.getOptionGroups();
        java.lang.String[] strArray69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser10.parse(options67, strArray69);
        java.util.Collection collection71 = options67.getOptionGroups();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(options67);
        org.junit.Assert.assertNotNull(collection68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(collection71);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        java.lang.String[] strArray14 = commandLine8.getOptionValues('a');
        boolean boolean16 = commandLine8.hasOption("[ option:   :: null ]");
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str22 = option21.toString();
        boolean boolean24 = option21.equals((java.lang.Object) 100L);
        boolean boolean25 = option21.hasLongOpt();
        commandLine8.addOption(option21);
        java.lang.String str28 = commandLine8.getOptionValue("[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ option:   +ARG ::  ]" + "'", str22, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options23 = options17.addOption(option22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser24.parse(options25, strArray30, properties31);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options44, strArray49, properties50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine58 = posixParser42.parse(options44, strArray57);
        java.lang.String[] strArray60 = posixParser24.flatten(options34, strArray57, true);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options17, strArray60, properties61, false);
        java.lang.String str65 = commandLine63.getOptionValue("org.apache.commons.cli.ParseException: ");
        java.lang.String str67 = commandLine63.getOptionValue(' ');
        java.lang.String[] strArray69 = commandLine63.getOptionValues('a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(strArray69);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        java.lang.String str9 = options1.toString();
        org.apache.commons.cli.Options options14 = options1.addOption("", "org.apache.commons.cli.MissingArgumentException: ", false, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str20 = option19.toString();
        boolean boolean22 = option19.equals((java.lang.Object) 100L);
        boolean boolean23 = option19.hasLongOpt();
        java.lang.String str25 = option19.getValue((int) '#');
        boolean boolean26 = option19.hasOptionalArg();
        java.lang.String str27 = option19.getKey();
        boolean boolean28 = option19.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup29 = options1.getOptionGroup(option19);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str9, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option:   +ARG ::  ]" + "'", str20, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.Options options49 = options11.addOption("", "arg", true, "");
        java.util.Collection collection50 = options49.getOptionGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options54 = options49.addOption("org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]", true, "org.apache.commons.cli.MissingArgumentException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(collection50);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        boolean boolean5 = commandLine0.hasOption('#');
        java.lang.String str8 = commandLine0.getOptionValue('a', "org.apache.commons.cli.MissingOptionException: arg");
        org.apache.commons.cli.Option option13 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String[] strArray14 = option13.getValues();
        boolean boolean15 = option13.hasArgName();
        option13.setLongOpt("org.apache.commons.cli.ParseException: ");
        java.lang.String str18 = option13.getKey();
        java.lang.Object obj19 = option13.getType();
        commandLine0.addOption(option13);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.cli.MissingOptionException: arg" + "'", str8, "org.apache.commons.cli.MissingOptionException: arg");
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser53.parse(options55, strArray64, properties65, true);
        org.apache.commons.cli.Option option69 = options55.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('a');
        option71.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup74 = options55.getOptionGroup(option71);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = posixParser0.flatten(options55, strArray81, true);
        java.util.Collection collection86 = options55.getOptions();
        java.util.Collection collection87 = options55.getOptionGroups();
        org.apache.commons.cli.Option option89 = options55.getOption("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options94 = options55.addOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", "[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(option69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(collection86);
        org.junit.Assert.assertNotNull(collection87);
        org.junit.Assert.assertNull(option89);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.Iterator iterator17 = commandLine16.iterator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(iterator17);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        org.apache.commons.cli.Option[] optionArray26 = commandLine14.getOptions();
        java.lang.String[] strArray27 = commandLine14.getArgs();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create('a');
        option29.setDescription("");
        boolean boolean32 = option29.hasArgName();
        commandLine14.addOption(option29);
        option29.setOptionalArg(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj24 = commandLine14.getOptionObject('a');
        java.lang.String[] strArray25 = commandLine14.getArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strArray25);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String str19 = commandLine16.getOptionValue('a');
        java.util.Iterator iterator20 = commandLine16.iterator();
        java.lang.String str22 = commandLine16.getOptionValue("");
        java.util.Iterator iterator23 = commandLine16.iterator();
        java.lang.String[] strArray24 = commandLine16.getArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        boolean boolean14 = commandLine8.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str20 = option19.toString();
        boolean boolean22 = option19.equals((java.lang.Object) 100L);
        char char23 = option19.getValueSeparator();
        commandLine8.addOption(option19);
        java.lang.String str26 = option19.getValue("[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option:   +ARG ::  ]" + "'", str20, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]" + "'", str26, "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine24 = posixParser16.parse(options17, strArray22, properties23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine31 = posixParser15.parse(options17, strArray30);
        java.lang.String[] strArray32 = null;
        java.util.Properties properties33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options17, strArray32, properties33);
        commandLine34.addArg("hi!");
        java.lang.Object obj38 = commandLine34.getOptionObject(' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = option18.getKey();
        option18.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.lang.String str25 = option18.getKey();
        java.lang.String[] strArray26 = option18.getValues();
        option18.setDescription("hi!");
        int int29 = option18.getId();
        option18.setOptionalArg(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "a" + "'", str22, "a");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "a" + "'", str25, "a");
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: ", true);
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create("");
        option38.setLongOpt("hi!");
        int int41 = option38.getArgs();
        option38.setDescription("org.apache.commons.cli.ParseException: ");
        java.util.ListIterator listIterator44 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option38, listIterator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.Option option33 = options19.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options19);
        org.apache.commons.cli.Option option36 = options19.getOption("a");
        org.apache.commons.cli.Option option38 = options19.getOption("[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
        org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine();
        java.util.List list40 = commandLine39.getArgList();
        java.lang.String str43 = commandLine39.getOptionValue("", "hi!");
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str49 = option48.toString();
        boolean boolean51 = option48.equals((java.lang.Object) 100L);
        option48.setDescription("");
        option48.addValue("");
        option48.setArgName("org.apache.commons.cli.ParseException: ");
        boolean boolean58 = option48.hasArgName();
        commandLine39.addOption(option48);
        java.lang.String[] strArray61 = commandLine39.getOptionValues("");
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser0.parse(options19, strArray61, properties62);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNull(option33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNull(option36);
        org.junit.Assert.assertNull(option38);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:   +ARG ::  ]" + "'", str49, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String[] strArray19 = commandLine14.getOptionValues("[ option:   +ARG ::  ]");
        boolean boolean21 = commandLine14.hasOption('\000');
        boolean boolean23 = commandLine14.hasOption("[ Options: [ short {=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ] [ long {org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]=[ option:  org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ] +ARG :: hi! ]} ]");
        java.lang.Object obj25 = commandLine14.getOptionObject('4');
        org.apache.commons.cli.Option[] optionArray26 = commandLine14.getOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(optionArray26);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String str19 = commandLine16.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a");
        java.lang.String str21 = commandLine16.getOptionValue('#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        boolean boolean14 = commandLine8.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str20 = option19.toString();
        boolean boolean22 = option19.equals((java.lang.Object) 100L);
        char char23 = option19.getValueSeparator();
        commandLine8.addOption(option19);
        java.lang.String str27 = commandLine8.getOptionValue("", "hi!");
        org.apache.commons.cli.Option[] optionArray28 = commandLine8.getOptions();
        java.lang.String str30 = commandLine8.getOptionValue("");
        boolean boolean32 = commandLine8.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option:   +ARG ::  ]" + "'", str20, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(optionArray28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        commandLine55.addArg("");
        org.apache.commons.cli.Option[] optionArray58 = commandLine55.getOptions();
        commandLine55.addArg("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        java.lang.String[] strArray62 = commandLine55.getOptionValues(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(optionArray58);
        org.junit.Assert.assertNull(strArray62);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.util.List list23 = commandLine14.getArgList();
        java.lang.String str26 = commandLine14.getOptionValue("arg", "[ option:   :: null ]");
        java.lang.String[] strArray27 = commandLine14.getArgs();
        java.lang.String[] strArray29 = commandLine14.getOptionValues(' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ option:   :: null ]" + "'", str26, "[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(strArray29);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.util.Collection collection49 = options2.getOptionGroups();
        java.util.Collection collection50 = options2.getOptions();
        java.util.Collection collection51 = options2.getOptionGroups();
        java.util.List list52 = options2.getRequiredOptions();
        java.util.List list53 = options2.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertNotNull(collection50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNotNull(list53);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: ", true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options65 = options59.addOption(option64);
        org.apache.commons.cli.Options options69 = options59.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser70 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser71.parse(options72, strArray77, properties78);
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser70.parse(options72, strArray81, properties82, true);
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine87 = posixParser0.parse(options59, strArray81, properties85, false);
        java.util.List list88 = options59.helpOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(list88);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str21 = commandLine14.getOptionValue("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        java.lang.String[] strArray23 = commandLine14.getOptionValues("[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
        commandLine14.addArg("[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strArray23);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        org.apache.commons.cli.Options options60 = options36.addOption("", "org.apache.commons.cli.MissingOptionException: arg", false, "a");
        org.apache.commons.cli.Option option62 = org.apache.commons.cli.OptionBuilder.create('a');
        option62.setDescription("");
        java.lang.Object obj65 = option62.getType();
        char char66 = option62.getValueSeparator();
        option62.setLongOpt("");
        option62.setArgName("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray71 = option62.getValues();
        org.apache.commons.cli.Options options72 = options36.addOption(option62);
        org.apache.commons.cli.Options options77 = options72.addOption("", "org.apache.commons.cli.UnrecognizedOptionException: ", false, "hi!");
        java.util.List list78 = options77.getRequiredOptions();
        java.util.Collection collection79 = options77.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(option62);
// flaky:         org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + char66 + "' != '" + '\000' + "'", char66 == '\000');
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(list78);
        org.junit.Assert.assertNotNull(collection79);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        posixParser0.burstToken("a", false);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        java.lang.String str65 = options57.toString();
        org.apache.commons.cli.Options options70 = options57.addOption("", "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser71 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser72 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser72.parse(options73, strArray78, properties79);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine85 = posixParser71.parse(options73, strArray82, properties83, true);
        java.lang.Object obj87 = commandLine85.getOptionObject(' ');
        java.lang.String[] strArray88 = commandLine85.getArgs();
        java.lang.String str90 = commandLine85.getOptionValue(' ');
        java.lang.String[] strArray91 = commandLine85.getArgs();
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options70, strArray91, properties92);
        boolean boolean95 = commandLine93.hasOption("");
        java.util.List list96 = commandLine93.getArgList();
        java.lang.String[] strArray97 = commandLine93.getArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str65, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(list96);
        org.junit.Assert.assertNotNull(strArray97);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options2, strArray43, properties47);
        java.lang.String str50 = commandLine48.getOptionValue(' ');
        java.lang.String str53 = commandLine48.getOptionValue('a', "org.apache.commons.cli.MissingOptionException: arg");
        java.lang.String str56 = commandLine48.getOptionValue('\000', "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.apache.commons.cli.MissingOptionException: arg" + "'", str53, "org.apache.commons.cli.MissingOptionException: arg");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]" + "'", str56, "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        posixParser0.burstToken("[ option:  arg  :: [ Options: [ short {} ] [ long {} ] ]", false);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = posixParser38.parse(options39, strArray44, properties45);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser37.parse(options39, strArray48, properties49, true);
        org.apache.commons.cli.Option option53 = options39.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create('a');
        option55.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup58 = options39.getOptionGroup(option55);
        java.util.List list59 = options39.getRequiredOptions();
        java.util.List list60 = options39.getRequiredOptions();
        java.util.Collection collection61 = options39.getOptions();
        java.util.List list62 = options39.getRequiredOptions();
        java.lang.String[] strArray63 = null;
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser0.parse(options39, strArray63, properties64, true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNull(option53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNull(optionGroup58);
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertNotNull(commandLine66);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", true, "");
        option4.setArgs((int) (short) 100);
        option4.setValueSeparator('4');
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options30 = options24.addOption(option29);
        org.apache.commons.cli.Options options34 = options24.addOption("a", true, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser45.parse(options46, strArray51, properties52);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser44.parse(options46, strArray55, properties56, true);
        org.apache.commons.cli.Option option60 = options46.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder61 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options46);
        java.util.Collection collection62 = options46.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser63 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine72 = posixParser64.parse(options65, strArray70, properties71);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser63.parse(options65, strArray74, properties75, true);
        java.lang.String[] strArray79 = posixParser35.flatten(options46, strArray74, false);
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser9.parse(options34, strArray74, properties80);
        boolean boolean82 = option4.equals((java.lang.Object) posixParser9);
        posixParser9.burstToken("org.apache.commons.cli.ParseException: ", false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNull(option60);
        org.junit.Assert.assertNotNull(optionBuilder61);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = option18.getKey();
        option18.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.lang.String str25 = option18.getKey();
        java.lang.String[] strArray26 = option18.getValues();
        java.lang.String str27 = option18.getDescription();
        int int28 = option18.getArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "a" + "'", str22, "a");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "a" + "'", str25, "a");
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        java.lang.String str4 = commandLine0.getOptionValue("", "hi!");
        boolean boolean6 = commandLine0.hasOption(' ');
        java.util.List list7 = commandLine0.getArgList();
        java.lang.Object obj9 = commandLine0.getOptionObject("org.apache.commons.cli.MissingOptionException: ");
        java.lang.String str11 = commandLine0.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj5 = commandLine0.getOptionObject('a');
        boolean boolean7 = commandLine0.hasOption("");
        java.lang.String str10 = commandLine0.getOptionValue(' ', "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]" + "'", str10, "[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.Options options48 = options11.addOption("arg", false, "org.apache.commons.cli.MissingOptionException: ");
        org.apache.commons.cli.OptionGroup optionGroup49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options50 = options48.addOptionGroup(optionGroup49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(options48);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        commandLine55.addArg("");
        boolean boolean59 = commandLine55.hasOption('4');
        java.lang.String[] strArray61 = commandLine55.getOptionValues("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: a");
        java.lang.String[] strArray62 = commandLine55.getArgs();
        java.lang.String[] strArray64 = commandLine55.getOptionValues(' ');
        commandLine55.addArg("[ option:    :: [ option:   +ARG ::  ] ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNull(strArray64);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        option4.setArgs((int) (byte) 0);
        option4.addValue("org.apache.commons.cli.ParseException: a");
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        boolean boolean19 = commandLine17.hasOption(' ');
        java.lang.String[] strArray21 = commandLine17.getOptionValues("org.apache.commons.cli.ParseException: ");
        java.lang.String[] strArray23 = commandLine17.getOptionValues('a');
        boolean boolean25 = commandLine17.hasOption("[ option:   :: null ]");
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str31 = option30.toString();
        boolean boolean33 = option30.equals((java.lang.Object) 100L);
        boolean boolean34 = option30.hasLongOpt();
        commandLine17.addOption(option30);
        java.lang.String[] strArray36 = commandLine17.getArgs();
        option4.setType((java.lang.Object) strArray36);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strArray21);
        org.junit.Assert.assertNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ option:   +ARG ::  ]" + "'", str31, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str5 = option4.toString();
        int int6 = option4.getArgs();
        option4.setLongOpt("");
        option4.addValue("");
        java.lang.String str11 = option4.getArgName();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser13 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser13.parse(options14, strArray19, properties20);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser12.parse(options14, strArray23, properties24, true);
        boolean boolean27 = option4.equals((java.lang.Object) true);
        option4.setOptionalArg(true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ option:   +ARG ::  ]" + "'", str5, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        java.lang.String str17 = options2.toString();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create('a');
        option19.setDescription("");
        option19.setDescription("[ option:   +ARG ::  ]");
        java.lang.String str24 = option19.getDescription();
        org.apache.commons.cli.Options options25 = options2.addOption(option19);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options32 = options26.addOption(option31);
        boolean boolean33 = option31.hasArgName();
        java.lang.String str34 = option31.getValue();
        org.apache.commons.cli.Options options35 = options2.addOption(option31);
        org.apache.commons.cli.Option option37 = org.apache.commons.cli.OptionBuilder.create("");
        option37.setLongOpt("hi!");
        java.lang.String str40 = option37.getValue();
        java.util.List list41 = option37.getValuesList();
        int int42 = option37.getArgs();
        org.apache.commons.cli.OptionGroup optionGroup43 = options2.getOptionGroup(option37);
        boolean boolean44 = option37.hasArg();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:   +ARG ::  ]" + "'", str24, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "[ option:   +ARG ::  ]");
        org.apache.commons.cli.Options options55 = options49.addOption(option54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options57, strArray62, properties63);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser65.parse(options66, strArray71, properties72);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine90 = posixParser74.parse(options76, strArray89);
        java.lang.String[] strArray92 = posixParser56.flatten(options66, strArray89, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser32.parse(options49, strArray92, properties93, false);
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options19, strArray92, properties96);
        org.apache.commons.cli.Option option99 = options19.getOption("org.apache.commons.cli.MissingOptionException: arg");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNull(option99);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str3 = option1.getValue("");
        java.lang.String str4 = option1.toString();
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser6.parse(options7, strArray12, properties13);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine21 = posixParser5.parse(options7, strArray20);
        java.util.List list22 = commandLine21.getArgList();
        java.lang.String str24 = commandLine21.getOptionValue('a');
        java.util.Iterator iterator25 = commandLine21.iterator();
        java.lang.String str27 = commandLine21.getOptionValue("");
        boolean boolean28 = option1.equals((java.lang.Object) commandLine21);
        char char29 = option1.getValueSeparator();
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[ option:   :: null ]" + "'", str4, "[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option[] optionArray25 = commandLine14.getOptions();
        boolean boolean27 = commandLine14.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list28 = commandLine14.getArgList();
        boolean boolean30 = commandLine14.hasOption('4');
        commandLine14.addArg("org.apache.commons.cli.MissingOptionException: ");
        java.lang.String str34 = commandLine14.getOptionValue('4');
        java.lang.String[] strArray35 = commandLine14.getArgs();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray35);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        org.apache.commons.cli.Option option47 = org.apache.commons.cli.OptionBuilder.create('a');
        option47.setDescription("");
        option47.setLongOpt("");
        org.apache.commons.cli.OptionGroup optionGroup52 = options45.getOptionGroup(option47);
        java.lang.String str53 = option47.getKey();
        boolean boolean54 = option47.hasLongOpt();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "a" + "'", str53, "a");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create("");
        option19.setLongOpt("hi!");
        option19.setOptionalArg(true);
        commandLine14.addOption(option19);
        java.util.Iterator iterator25 = commandLine14.iterator();
        java.lang.String str28 = commandLine14.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        java.lang.String str30 = commandLine14.getOptionValue("a");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]" + "'", str28, "org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        java.lang.String[] strArray50 = commandLine49.getArgs();
        java.lang.Object obj52 = commandLine49.getOptionObject('4');
        java.lang.String[] strArray54 = commandLine49.getOptionValues('#');
        java.util.List list55 = commandLine49.getArgList();
        java.lang.Object obj57 = commandLine49.getOptionObject("org.apache.commons.cli.MissingArgumentException: [ option:   +ARG ::  ]");
        boolean boolean59 = commandLine49.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.util.List list1 = commandLine0.getArgList();
        commandLine0.addArg("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        commandLine0.addArg("org.apache.commons.cli.UnrecognizedOptionException: arg");
        java.lang.String str7 = commandLine0.getOptionValue('4');
        java.lang.String str9 = commandLine0.getOptionValue('4');
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser54.parse(options55, strArray60, properties61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser53.parse(options55, strArray64, properties65, true);
        org.apache.commons.cli.Option option69 = options55.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option71 = org.apache.commons.cli.OptionBuilder.create('a');
        option71.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup74 = options55.getOptionGroup(option71);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options76, strArray81, properties82);
        java.lang.String[] strArray85 = posixParser0.flatten(options55, strArray81, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ", true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.apache.commons.cli.Options options92 = null;
        java.lang.String[] strArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine94 = posixParser0.parse(options92, strArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNull(option69);
        org.junit.Assert.assertNotNull(option71);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        java.util.List list17 = commandLine16.getArgList();
        java.lang.String[] strArray18 = commandLine16.getArgs();
        java.util.List list19 = commandLine16.getArgList();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create("");
        option21.setOptionalArg(false);
        boolean boolean24 = option21.hasLongOpt();
        org.apache.commons.cli.CommandLine commandLine25 = new org.apache.commons.cli.CommandLine();
        java.lang.String str27 = commandLine25.getOptionValue('#');
        option21.setType((java.lang.Object) '#');
        java.lang.String str30 = option21.getValue("org.apache.commons.cli.ParseException: ");
        commandLine16.addOption(option21);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.cli.ParseException: " + "'", str30, "org.apache.commons.cli.ParseException: ");
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        java.lang.Object obj16 = commandLine14.getOptionObject(' ');
        java.lang.String[] strArray17 = commandLine14.getArgs();
        java.lang.String str19 = commandLine14.getOptionValue(' ');
        java.lang.String str22 = commandLine14.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        commandLine14.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray26 = commandLine14.getOptionValues("[ option:  org.apache.commons.cli.ParseException:  +ARG ::  ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray26);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser35.parse(options36, strArray41, properties42);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser34.parse(options36, strArray45, properties46, true);
        org.apache.commons.cli.Option option50 = options36.getOption("[ option:   +ARG ::  ]");
        java.lang.String str51 = options36.toString();
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser0.parse(options36, strArray52, properties53, true);
        java.lang.String[] strArray57 = commandLine55.getOptionValues("org.apache.commons.cli.ParseException: ");
        boolean boolean59 = commandLine55.hasOption(' ');
        java.util.Iterator iterator60 = commandLine55.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(iterator60);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        commandLine33.addArg("");
        org.apache.commons.cli.Option[] optionArray36 = commandLine33.getOptions();
        org.apache.commons.cli.Option option38 = org.apache.commons.cli.OptionBuilder.create('a');
        option38.setDescription("");
        boolean boolean41 = option38.hasArgName();
        java.lang.String str43 = option38.getValue(0);
        boolean boolean44 = option38.hasArgName();
        commandLine33.addOption(option38);
        java.lang.String str47 = commandLine33.getOptionValue('4');
        java.lang.String[] strArray48 = commandLine33.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(optionArray36);
        org.junit.Assert.assertNotNull(option38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strArray48);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        posixParser0.burstToken("hi!", true);
        posixParser0.burstToken("[ option:    :: [ option:   +ARG ::  ] ]", false);
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create("");
        option57.setOptionalArg(false);
        java.util.List list60 = option57.getValuesList();
        boolean boolean61 = option57.hasLongOpt();
        boolean boolean62 = option57.isRequired();
        java.util.ListIterator listIterator63 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option57, listIterator63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.Options options9 = null;
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine44 = posixParser28.parse(options30, strArray43);
        java.lang.String[] strArray46 = posixParser10.flatten(options20, strArray43, true);
        java.lang.String[] strArray48 = posixParser0.flatten(options9, strArray46, true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String str3 = commandLine0.getOptionValue("[ option:   +ARG ::  ]", "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj5 = commandLine0.getOptionObject('a');
        java.lang.Object obj7 = commandLine0.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: arg");
        java.lang.String str9 = commandLine0.getOptionValue('\000');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        boolean boolean12 = commandLine8.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj14 = commandLine8.getOptionObject("a");
        java.util.List list15 = commandLine8.getArgList();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(list15);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = option18.getKey();
        option18.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        java.lang.String str25 = option18.getKey();
        java.lang.String[] strArray26 = option18.getValues();
        boolean boolean27 = option18.hasOptionalArg();
        java.lang.String str29 = option18.getValue("[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
        java.lang.String str31 = option18.getValue("org.apache.commons.cli.MissingOptionException: a");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "a" + "'", str22, "a");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "a" + "'", str25, "a");
        org.junit.Assert.assertNull(strArray26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]" + "'", str29, "[ Options: [ short {=[ option:   +ARG ::  ], a=[ option: a +ARG :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {=[ option:   +ARG ::  ]} ]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.cli.MissingOptionException: a" + "'", str31, "org.apache.commons.cli.MissingOptionException: a");
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine16 = posixParser0.parse(options2, strArray15);
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser18.parse(options19, strArray24, properties25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Properties properties29 = null;
        org.apache.commons.cli.CommandLine commandLine31 = posixParser17.parse(options19, strArray28, properties29, true);
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options34, strArray39, properties40);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine48 = posixParser32.parse(options34, strArray47);
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options19, strArray47);
        org.apache.commons.cli.Option[] optionArray50 = commandLine49.getOptions();
        java.util.Iterator iterator51 = commandLine49.iterator();
        java.lang.String str53 = commandLine49.getOptionValue("org.apache.commons.cli.MissingOptionException: a");
        java.lang.Object obj55 = commandLine49.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(commandLine31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(optionArray50);
        org.junit.Assert.assertNotNull(iterator51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser10.parse(options11, strArray16, properties17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray20, properties21, true);
        org.apache.commons.cli.Option option25 = options11.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options11);
        java.util.Collection collection27 = options11.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser29.parse(options30, strArray35, properties36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser28.parse(options30, strArray39, properties40, true);
        java.lang.String[] strArray44 = posixParser0.flatten(options11, strArray39, false);
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser46.parse(options47, strArray52, properties53);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser45.parse(options47, strArray56, properties57, true);
        org.apache.commons.cli.Option option61 = options47.getOption("[ option:   +ARG ::  ]");
        java.lang.String str62 = options47.toString();
        boolean boolean64 = options47.hasOption("hi!");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "org.apache.commons.cli.ParseException: ", "[ option:   :: null ]", "org.apache.commons.cli.MissingOptionException: ", "arg", "org.apache.commons.cli.MissingOptionException: " };
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser0.parse(options47, strArray71, properties72);
        posixParser0.burstToken("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ], a=[ option: a  :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]", false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNull(option25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNull(option61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str62, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine73);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser2.parse(options3, strArray8, properties9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser1.parse(options3, strArray16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Properties properties30 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser18.parse(options20, strArray29, properties30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options3, strArray29);
        java.lang.String str35 = commandLine33.getOptionValue('4');
        java.lang.String str38 = commandLine33.getOptionValue("org.apache.commons.cli.ParseException: a", "org.apache.commons.cli.UnrecognizedOptionException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: arg" + "'", str38, "org.apache.commons.cli.UnrecognizedOptionException: arg");
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        java.lang.String[] strArray12 = commandLine8.getOptionValues("org.apache.commons.cli.ParseException: ");
        boolean boolean14 = commandLine8.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", true, "");
        java.lang.String str20 = option19.toString();
        boolean boolean22 = option19.equals((java.lang.Object) 100L);
        char char23 = option19.getValueSeparator();
        commandLine8.addOption(option19);
        java.lang.String str27 = commandLine8.getOptionValue("", "hi!");
        org.apache.commons.cli.Option[] optionArray28 = commandLine8.getOptions();
        org.apache.commons.cli.OptionBuilder optionBuilder29 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) optionArray28);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ option:   +ARG ::  ]" + "'", str20, "[ option:   +ARG ::  ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(optionArray28);
        org.junit.Assert.assertNotNull(optionBuilder29);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties8 = null;
        org.apache.commons.cli.CommandLine commandLine9 = posixParser1.parse(options2, strArray7, properties8);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Properties properties12 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray11, properties12, true);
        org.apache.commons.cli.Option option16 = options2.getOption("[ option:   +ARG ::  ]");
        org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create('a');
        option18.setDescription("");
        org.apache.commons.cli.OptionGroup optionGroup21 = options2.getOptionGroup(option18);
        java.lang.String str22 = option18.getKey();
        option18.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: ");
        option18.setDescription("[ Options: [ short {=[ option:    :: [ option:   +ARG ::  ] ]} ] [ long {=[ option:    :: [ option:   +ARG ::  ] ]} ]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(commandLine9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNull(option16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNull(optionGroup21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "a" + "'", str22, "a");
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        boolean boolean10 = commandLine8.hasOption(' ');
        boolean boolean12 = commandLine8.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String str15 = commandLine8.getOptionValue("org.apache.commons.cli.ParseException: a", "org.apache.commons.cli.MissingOptionException: arg");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.cli.MissingOptionException: arg" + "'", str15, "org.apache.commons.cli.MissingOptionException: arg");
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties7 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, properties7);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties16 = null;
        org.apache.commons.cli.CommandLine commandLine17 = posixParser9.parse(options10, strArray15, properties16);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "[ option:   +ARG ::  ]", "hi!", "hi!" };
        java.util.Properties properties26 = null;
        org.apache.commons.cli.CommandLine commandLine27 = posixParser19.parse(options20, strArray25, properties26);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "[ option:   +ARG ::  ]", "[ option:   +ARG ::  ]", "hi!", "" };
        org.apache.commons.cli.CommandLine commandLine34 = posixParser18.parse(options20, strArray33);
        java.lang.String[] strArray36 = posixParser0.flatten(options10, strArray33, true);
        java.util.List list37 = options10.getRequiredOptions();
        java.util.Collection collection38 = options10.getOptions();
        org.apache.commons.cli.Option option40 = org.apache.commons.cli.OptionBuilder.create("");
        option40.setLongOpt("hi!");
        int int43 = option40.getArgs();
        java.lang.String str44 = option40.getLongOpt();
        org.apache.commons.cli.Options options45 = options10.addOption(option40);
        boolean boolean46 = option40.hasLongOpt();
        char char47 = option40.getValueSeparator();
        java.lang.String[] strArray48 = option40.getValues();
        java.lang.String[] strArray49 = option40.getValues();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(commandLine27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(option40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '\000' + "'", char47 == '\000');
        org.junit.Assert.assertNull(strArray48);
        org.junit.Assert.assertNull(strArray49);
    }
}
