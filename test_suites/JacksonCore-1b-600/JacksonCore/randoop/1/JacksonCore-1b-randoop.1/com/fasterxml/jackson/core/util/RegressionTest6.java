package com.fasterxml.jackson.core.util;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonToken jsonToken87 = uTF8StreamJsonParser84.getCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.getLastClearedToken();
        int int90 = uTF8StreamJsonParser84.getFeatureMask();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(jsonToken89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean94 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("", (long) 72);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 72L + "'", long2 == 72L);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            long long91 = uTF8StreamJsonParser84.nextLongValue((long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        char[] charArray92 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.Object obj93 = uTF8StreamJsonParser84.getTypeId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(charArray92);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean93 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter32 = lf2SpacesIndenter27.withLinefeed("");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter27.writeIndentation(jsonGenerator33, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter32);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            double double94 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext24 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext27 = jsonReadContext24.createChildArrayContext((int) (short) 1, 10);
        boolean boolean28 = jsonReadContext27.inArray();
        boolean boolean29 = serializedString20.equals((java.lang.Object) boolean28);
        char[] charArray30 = serializedString20.asQuotedChars();
        int int32 = serializedString1.appendUnquoted(charArray30, 13);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter33 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext24);
        org.junit.Assert.assertNotNull(jsonReadContext27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray2 = serializedString1.asUnquotedUTF8();
        java.lang.String str3 = serializedString1.toString();
        char[] charArray4 = serializedString1.asQuotedChars();
        java.lang.String str5 = serializedString1.getValue();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str3, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str5, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.String str89 = uTF8StreamJsonParser84.getText();
        java.lang.String str90 = uTF8StreamJsonParser84.getText();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger91 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.ObjectCodec objectCodec86 = uTF8StreamJsonParser84.getCodec();
        char[] charArray87 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(objectCodec86);
        org.junit.Assert.assertNull(charArray87);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        com.fasterxml.jackson.core.SerializableString serializableString88 = defaultPrettyPrinter85._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter89 = defaultPrettyPrinter85.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = defaultPrettyPrinter85.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter90.writeStartArray(jsonGenerator91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serializableString88);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter89);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter90);
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter74 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter74);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        int int90 = uTF8StreamJsonParser84.getTokenColumnNr();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType91 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int12 = serializedString5.appendQuotedUTF8(byteArray10, 0);
        char[] charArray13 = serializedString5.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        int int24 = serializedString5.appendUnquotedUTF8(byteArray20, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter26 = defaultPrettyPrinter25._objectIndenter;
        defaultPrettyPrinter3._arrayIndenter = indenter26;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            indenter26.writeIndentation(jsonGenerator28, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(indenter26);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("hi!", (long) (byte) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray42 = new char[] { 'a', ' ', '#', '4' };
        int int44 = serializedString37.appendUnquoted(charArray42, 0);
        java.lang.String str45 = serializedString37.getValue();
        char[] charArray46 = serializedString37.asQuotedChars();
        byte[] byteArray47 = serializedString37.asUnquotedUTF8();
        int int49 = serializedString1.appendQuotedUTF8(byteArray47, (int) (short) 0);
        java.lang.String str50 = serializedString1.getValue();
        int int51 = serializedString1.charLength();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str45, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 47 + "'", int49 == 47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str50, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 47 + "'", int51 == 47);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray9, 47, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 47");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        boolean boolean97 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType98 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int9 = serializedString2.appendQuotedUTF8(byteArray7, 0);
        char[] charArray10 = serializedString2.asQuotedChars();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int17 = serializedString2.appendUnquotedUTF8(byteArray15, (int) (short) 10);
        byte[] byteArray18 = serializedString2.asQuotedUTF8();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper21 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext0, byteArray18, 35, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger90 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter32 = lf2SpacesIndenter27.withLinefeed("");
        boolean boolean33 = lf2SpacesIndenter32.isInline();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter32.writeIndentation(jsonGenerator34, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        int int87 = defaultPrettyPrinter55._nesting;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter88 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator89 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter88.writeStartArray(jsonGenerator89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter88);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = null;
        boolean boolean90 = uTF8StreamJsonParser84.canUseSchema(formatSchema89);
        int int91 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int93 = uTF8StreamJsonParser84.nextIntValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        char[] charArray80 = textBuffer76.getCurrentSegment();
        char[] charArray81 = textBuffer76.emptyAndGetCurrentSegment();
        textBuffer76.resetWithString("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        int int94 = uTF8StreamJsonParser84.getValueAsInt((int) '#');
        com.fasterxml.jackson.core.FormatSchema formatSchema95 = null;
        boolean boolean96 = uTF8StreamJsonParser84.canUseSchema(formatSchema95);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getTypeId();
        // The following exception was thrown during execution in test generation
        try {
            short short90 = uTF8StreamJsonParser84.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int9 = serializedString2.appendQuotedUTF8(byteArray7, 0);
        char[] charArray10 = serializedString2.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int19 = serializedString12.appendQuotedUTF8(byteArray17, 0);
        int int21 = serializedString2.appendUnquotedUTF8(byteArray17, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString2);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter22.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter22.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter22.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = defaultPrettyPrinter22.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter30 = lf2SpacesIndenter28.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter26.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter33 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString34 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter33, serializableString34);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter36 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter33);
        com.fasterxml.jackson.core.SerializableString serializableString37 = defaultPrettyPrinter36._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter38 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter26, serializableString37);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int47 = serializedString40.appendQuotedUTF8(byteArray45, 0);
        char[] charArray48 = serializedString40.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int57 = serializedString50.appendQuotedUTF8(byteArray55, 0);
        int int59 = serializedString40.appendUnquotedUTF8(byteArray55, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter60 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString40);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter61 = defaultPrettyPrinter60._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter62 = defaultPrettyPrinter38.withObjectIndenter(indenter61);
        com.fasterxml.jackson.core.io.IOContext iOContext64 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) indenter61, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter26);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter30);
        org.junit.Assert.assertNotNull(serializableString37);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(indenter61);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter62);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int93 = uTF8StreamJsonParser84.getValueAsInt((int) (short) -1);
        boolean boolean94 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken93 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec92);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        defaultPrettyPrinter85._spacesInObjectEntries = false;
        boolean boolean90 = defaultPrettyPrinter85._spacesInObjectEntries;
        defaultPrettyPrinter85._spacesInObjectEntries = true;
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        defaultPrettyPrinter86._spacesInObjectEntries = false;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter89 = defaultPrettyPrinter86.createInstance();
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter89);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        com.fasterxml.jackson.core.SerializableString serializableString88 = defaultPrettyPrinter85._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter89 = defaultPrettyPrinter85.createInstance();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) defaultPrettyPrinter89, (long) (byte) 10, (int) (byte) 10, (int) ' ');
        com.fasterxml.jackson.core.JsonLocation jsonLocation97 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) defaultPrettyPrinter89, 0L, (int) (byte) 100, (int) ' ');
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serializableString88);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter89);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        int int30 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString33 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, serializableString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray38 = serializedString37.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, (com.fasterxml.jackson.core.SerializableString) serializedString37);
        boolean boolean40 = serializedString1.equals((java.lang.Object) serializedString37);
        java.lang.Class<?> wildcardClass41 = serializedString37.getClass();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 47 + "'", int30 == 47);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long94 = uTF8StreamJsonParser84.getValueAsLong((long) (byte) 0);
        int int95 = uTF8StreamJsonParser84.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray8, 0, (int) '#');
        long long13 = mergedStream11.skip((long) (short) 1);
        int int14 = mergedStream11.available();
        mergedStream11.mark((int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation23 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) "hi!", 0L, (long) (-1), (int) '4', (int) (byte) 1);
        com.fasterxml.jackson.core.JsonParseException jsonParseException24 = new com.fasterxml.jackson.core.JsonParseException("com.fasterxml.jackson.core.JsonParseException: ", jsonLocation23);
        com.fasterxml.jackson.core.io.SerializedString serializedString26 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int33 = serializedString26.appendQuotedUTF8(byteArray31, 0);
        byte[] byteArray34 = serializedString26.asUnquotedUTF8();
        boolean boolean35 = jsonLocation23.equals((java.lang.Object) byteArray34);
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, (java.io.InputStream) mergedStream11, byteArray34, (int) (byte) 0, (int) ' ');
        com.fasterxml.jackson.core.util.TextBuffer textBuffer39 = iOContext3.constructTextBuffer();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 34 + "'", int14 == 34);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(textBuffer39);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("[Source: #; line: 1, column: 1]", (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext90 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(jsonStreamContext90);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.nextIntValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        int int90 = uTF8StreamJsonParser84.getTokenColumnNr();
        // The following exception was thrown during execution in test generation
        try {
            long long92 = uTF8StreamJsonParser84.nextLongValue((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter50 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.withArrayIndenter(indenter50);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter51.writeEndArray(jsonGenerator52, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(jsonToken91);
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.JsonToken jsonToken95 = uTF8StreamJsonParser84.getCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNull(jsonToken95);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser96 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.JsonToken jsonToken97 = uTF8StreamJsonParser84.getLastClearedToken();
        // The following exception was thrown during execution in test generation
        try {
            int int99 = uTF8StreamJsonParser84.nextIntValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser96);
        org.junit.Assert.assertNull(jsonToken97);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        char[] charArray27 = serializedString19.asQuotedChars();
        int int28 = serializedString19.charLength();
        char[] charArray29 = serializedString19.asQuotedChars();
        int int31 = serializedString1.appendUnquoted(charArray29, (int) (short) 10);
        byte[] byteArray32 = serializedString1.asUnquotedUTF8();
        java.lang.String str33 = serializedString1.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 47 + "'", int28 == 47);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str33, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        com.fasterxml.jackson.core.io.SerializedString serializedString81 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray86 = new char[] { 'a', ' ', '#', '4' };
        int int88 = serializedString81.appendUnquoted(charArray86, 0);
        textBuffer76.resetWithShared(charArray86, 97, 97);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray37 = serializedString36.asUnquotedUTF8();
        java.lang.String str38 = serializedString36.toString();
        char[] charArray39 = serializedString36.asQuotedChars();
        int int41 = serializedString1.appendQuoted(charArray39, 47);
        byte[] byteArray42 = serializedString1.asQuotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter43.writeStartArray(jsonGenerator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean90 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        char[] charArray80 = textBuffer76.getCurrentSegment();
        char[] charArray81 = textBuffer76.expandCurrentSegment();
        // The following exception was thrown during execution in test generation
        try {
            double double82 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"a\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a
        org.junit.Assert.assertNotNull(charArray81);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        int int82 = textBuffer76.size();
        textBuffer76.setCurrentLength(0);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        byte[] byteArray57 = null;
        iOContext12.releaseBase64Buffer(byteArray57);
        java.lang.Object obj59 = iOContext12.getSourceReference();
        boolean boolean60 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding61 = iOContext12.getEncoding();
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray68 = new char[] { 'a', ' ', '#', '4' };
        int int70 = serializedString63.appendUnquoted(charArray68, 0);
        boolean boolean74 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray68, 1, (int) (byte) 1, false);
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseConcatBuffer(charArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jsonEncoding61);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            short short90 = uTF8StreamJsonParser84.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter25._withSpaces(true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        int int92 = uTF8StreamJsonParser84.getValueAsInt((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number93 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        boolean boolean78 = textBuffer76.hasTextAsCharacters();
        char[] charArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            textBuffer76.append(charArray79, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser96 = uTF8StreamJsonParser84.skipChildren();
        char[] charArray97 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            byte byte98 = uTF8StreamJsonParser84.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser96);
        org.junit.Assert.assertNull(charArray97);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        int int32 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray39 = new char[] { 'a', ' ', '#', '4' };
        int int41 = serializedString34.appendUnquoted(charArray39, 0);
        java.lang.String str42 = serializedString34.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation44 = null;
        java.lang.Throwable throwable45 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException46 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation44, throwable45);
        boolean boolean47 = serializedString34.equals((java.lang.Object) jsonLocation44);
        byte[] byteArray48 = serializedString34.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray55 = new char[] { 'a', ' ', '#', '4' };
        int int57 = serializedString50.appendUnquoted(charArray55, 0);
        java.lang.String str58 = serializedString50.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation60 = null;
        java.lang.Throwable throwable61 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException62 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation60, throwable61);
        boolean boolean63 = serializedString50.equals((java.lang.Object) jsonLocation60);
        byte[] byteArray64 = serializedString50.asUnquotedUTF8();
        int int66 = serializedString34.appendQuotedUTF8(byteArray64, 34);
        int int67 = serializedString34.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter68 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString34);
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray75 = new char[] { 'a', ' ', '#', '4' };
        int int77 = serializedString70.appendUnquoted(charArray75, 0);
        java.lang.String str78 = serializedString70.getValue();
        char[] charArray79 = serializedString70.asQuotedChars();
        byte[] byteArray80 = serializedString70.asUnquotedUTF8();
        int int82 = serializedString34.appendQuotedUTF8(byteArray80, (int) (short) 0);
        int int84 = serializedString1.appendQuotedUTF8(byteArray80, (int) (byte) 10);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 47 + "'", int32 == 47);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str58, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 47 + "'", int67 == 47);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str78, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 47 + "'", int82 == 47);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            short short94 = uTF8StreamJsonParser84.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(objectCodec92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]", (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString86 = defaultPrettyPrinter55._rootSeparator;
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
        org.junit.Assert.assertNotNull(serializableString86);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.setCurrentLength(63);
        char[] charArray80 = textBuffer76.getTextBuffer();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNull(charArray80);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str91, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(jsonLocation92);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        int int94 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.SerializableString serializableString96 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = uTF8StreamJsonParser84.nextFieldName(serializableString96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonLocation jsonLocation89 = uTF8StreamJsonParser84.getCurrentLocation();
        int int90 = uTF8StreamJsonParser84.getTextLength();
        int int91 = uTF8StreamJsonParser84.getValueAsInt();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonLocation89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        int int93 = uTF8StreamJsonParser84.getValueAsInt();
        long long95 = uTF8StreamJsonParser84.getValueAsLong((long) 47);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 47L + "'", long95 == 47L);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec94);
        uTF8StreamJsonParser84.overrideCurrentName("");
        char[] charArray98 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertNull(charArray98);
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec94);
        uTF8StreamJsonParser84.overrideCurrentName("");
        // The following exception was thrown during execution in test generation
        try {
            float float98 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getFeatureMask();
        int int93 = uTF8StreamJsonParser84.getFeatureMask();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        java.lang.String str96 = uTF8StreamJsonParser84.getText();
        uTF8StreamJsonParser84.overrideCurrentName("");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        defaultPrettyPrinter85._spacesInObjectEntries = false;
        boolean boolean90 = defaultPrettyPrinter85._spacesInObjectEntries;
        java.lang.Class<?> wildcardClass91 = defaultPrettyPrinter85.getClass();
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: #; line: 1, column: 1]");
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]", (long) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 97L + "'", long2 == 97L);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString("");
        com.fasterxml.jackson.core.Base64Variant base64Variant91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue(base64Variant91);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str94 = uTF8StreamJsonParser84.getValueAsString("a");
        // The following exception was thrown during execution in test generation
        try {
            long long96 = uTF8StreamJsonParser84.nextLongValue((long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "a" + "'", str94, "a");
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString24 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter25 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.SerializableString serializableString26 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator27, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(serializableString24);
        org.junit.Assert.assertNotNull(indenter25);
        org.junit.Assert.assertNotNull(serializableString26);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        int int79 = textBuffer76.getCurrentSegmentSize();
        textBuffer76.resetWithEmpty();
        com.fasterxml.jackson.core.io.SerializedString serializedString82 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray87 = new char[] { 'a', ' ', '#', '4' };
        int int89 = serializedString82.appendUnquoted(charArray87, 0);
        // The following exception was thrown during execution in test generation
        try {
            textBuffer76.resetWithCopy(charArray87, 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        char[] charArray85 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray85);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonToken jsonToken87 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext88 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken87);
        org.junit.Assert.assertNotNull(jsonStreamContext88);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        boolean boolean90 = uTF8StreamJsonParser84.hasCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int12 = serializedString5.appendQuotedUTF8(byteArray10, 0);
        char[] charArray13 = serializedString5.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        int int24 = serializedString5.appendUnquotedUTF8(byteArray20, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter26 = defaultPrettyPrinter25._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int35 = serializedString28.appendQuotedUTF8(byteArray33, 0);
        char[] charArray36 = serializedString28.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int45 = serializedString38.appendQuotedUTF8(byteArray43, 0);
        int int47 = serializedString28.appendUnquotedUTF8(byteArray43, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter48 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter49 = defaultPrettyPrinter48._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString51 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int58 = serializedString51.appendQuotedUTF8(byteArray56, 0);
        char[] charArray59 = serializedString51.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString61 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int68 = serializedString61.appendQuotedUTF8(byteArray66, 0);
        int int70 = serializedString51.appendUnquotedUTF8(byteArray66, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter71 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter72 = defaultPrettyPrinter71._objectIndenter;
        defaultPrettyPrinter48.indentObjectsWith(indenter72);
        defaultPrettyPrinter25._objectIndenter = indenter72;
        defaultPrettyPrinter25._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter77 = defaultPrettyPrinter25._objectIndenter;
        defaultPrettyPrinter3.indentArraysWith(indenter77);
        boolean boolean79 = indenter77.isInline();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator80 = null;
        // The following exception was thrown during execution in test generation
        try {
            indenter77.writeIndentation(jsonGenerator80, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(indenter26);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(indenter49);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(indenter72);
        org.junit.Assert.assertNotNull(indenter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        int int93 = uTF8StreamJsonParser84.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        int int79 = textBuffer76.getCurrentSegmentSize();
        textBuffer76.resetWithEmpty();
        textBuffer76.setCurrentLength((-1));
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean95 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonLocation jsonLocation96 = uTF8StreamJsonParser84.getCurrentLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(jsonLocation96);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str91 = uTF8StreamJsonParser84.getText();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        int int87 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number94 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray19 = serializedString1.asQuotedChars();
        int int20 = serializedString1.charLength();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 47 + "'", int20 == 47);
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonLocation jsonLocation89 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.FormatSchema formatSchema90 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.setSchema(formatSchema90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonLocation89);
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonReadContext93);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        com.fasterxml.jackson.core.SerializableString serializableString88 = defaultPrettyPrinter85._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter89 = defaultPrettyPrinter85.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = defaultPrettyPrinter85.createInstance();
        defaultPrettyPrinter90.spacesInObjectEntries(false);
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serializableString88);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter89);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter90);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        defaultPrettyPrinter55._spacesInObjectEntries = true;
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser96 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.JsonToken jsonToken97 = uTF8StreamJsonParser84.getLastClearedToken();
        java.lang.String str98 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser96);
        org.junit.Assert.assertNull(jsonToken97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str98, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = com.fasterxml.jackson.core.io.NumberInput.parseInt("com.fasterxml.jackson.core.JsonParseException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"com.fasterxml.jackson.core.JsonParseException: \"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        char[] charArray80 = textBuffer76.getCurrentSegment();
        com.fasterxml.jackson.core.io.SerializedString serializedString82 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray83 = serializedString82.asUnquotedUTF8();
        java.lang.String str84 = serializedString82.toString();
        char[] charArray85 = serializedString82.asQuotedChars();
        textBuffer76.resetWithShared(charArray85, (int) (byte) 10, (int) 'a');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str84, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        com.fasterxml.jackson.core.Base64Variant base64Variant85 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray86 = uTF8StreamJsonParser84.getBinaryValue(base64Variant85);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter73.writeRootValueSeparator(jsonGenerator74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        char[] charArray35 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal38 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray35, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        char[] charArray82 = textBuffer76.getTextBuffer();
        textBuffer76.ensureNotShared();
        char[] charArray84 = textBuffer76.emptyAndGetCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "a
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenLineNr();
        // The following exception was thrown during execution in test generation
        try {
            short short89 = uTF8StreamJsonParser84.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: #; line: 1, column: 1]");
        com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.getCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertNull(jsonToken92);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getObjectId();
        int int92 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) 1);
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.setSchema(formatSchema93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int91 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) -1);
        char[] charArray92 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNull(charArray92);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.String str89 = uTF8StreamJsonParser84.getText();
        // The following exception was thrown during execution in test generation
        try {
            float float90 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        int int93 = uTF8StreamJsonParser84.getTextLength();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        char[] charArray13 = serializedString2.asQuotedChars();
        char[] charArray14 = serializedString2.asQuotedChars();
        byte[] byteArray15 = serializedString2.asQuotedUTF8();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        long long92 = uTF8StreamJsonParser84.getValueAsLong(1L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        char[] charArray11 = serializedString1.asQuotedChars();
        byte[] byteArray12 = serializedString1.asQuotedUTF8();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        byte[] byteArray11 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString13 = new com.fasterxml.jackson.core.io.SerializedString("[Source: hi!; line: 52, column: 1]");
        boolean boolean14 = serializedString1.equals((java.lang.Object) "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int37 = serializedString30.appendQuotedUTF8(byteArray35, 0);
        int int39 = serializedString20.appendUnquotedUTF8(byteArray35, (int) (short) -1);
        int int41 = serializedString10.appendQuotedUTF8(byteArray35, (int) (byte) 1);
        java.lang.String str42 = serializedString10.toString();
        char[] charArray43 = serializedString10.asQuotedChars();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 47L);
        boolean boolean92 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 47.0d + "'", double91 == 47.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray49 = new char[] { 'a', ' ', '#', '4' };
        int int51 = serializedString44.appendUnquoted(charArray49, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString53 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray58 = new char[] { 'a', ' ', '#', '4' };
        int int60 = serializedString53.appendUnquoted(charArray58, 0);
        boolean boolean61 = serializedString44.equals((java.lang.Object) serializedString53);
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray64 = serializedString63.asUnquotedUTF8();
        int int66 = serializedString44.appendQuotedUTF8(byteArray64, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray73 = new char[] { 'a', ' ', '#', '4' };
        int int75 = serializedString68.appendUnquoted(charArray73, 0);
        int int77 = serializedString44.appendUnquoted(charArray73, (int) 'a');
        byte[] byteArray78 = serializedString44.asUnquotedUTF8();
        int int80 = serializedString20.appendQuotedUTF8(byteArray78, 35);
        int int81 = serializedString20.charLength();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 47 + "'", int81 == 47);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        java.lang.Object obj96 = uTF8StreamJsonParser84.getInputSource();
        char[] charArray97 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNull(charArray97);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        char[] charArray11 = serializedString1.asQuotedChars();
        java.lang.String str12 = serializedString1.getValue();
        java.lang.String str13 = serializedString1.getValue();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray20 = new char[] { 'a', ' ', '#', '4' };
        int int22 = serializedString15.appendUnquoted(charArray20, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray29 = new char[] { 'a', ' ', '#', '4' };
        int int31 = serializedString24.appendUnquoted(charArray29, 0);
        boolean boolean32 = serializedString15.equals((java.lang.Object) serializedString24);
        char[] charArray33 = serializedString15.asQuotedChars();
        boolean boolean37 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray33, (int) (byte) 10, 10, true);
        int int40 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray33, (int) (byte) 1, 0);
        int int42 = serializedString1.appendUnquoted(charArray33, (int) '#');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str12, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str13, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 63 + "'", int40 == 63);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        com.fasterxml.jackson.core.Base64Variant base64Variant94 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray95 = uTF8StreamJsonParser84.getBinaryValue(base64Variant94);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonToken jsonToken87 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.FormatSchema formatSchema88 = uTF8StreamJsonParser84.getSchema();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            long long91 = uTF8StreamJsonParser84.nextLongValue((long) 47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken87);
        org.junit.Assert.assertNull(formatSchema88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        int int32 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray39 = new char[] { 'a', ' ', '#', '4' };
        int int41 = serializedString34.appendUnquoted(charArray39, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray48 = new char[] { 'a', ' ', '#', '4' };
        int int50 = serializedString43.appendUnquoted(charArray48, 0);
        boolean boolean51 = serializedString34.equals((java.lang.Object) serializedString43);
        char[] charArray58 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean62 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray58, (int) (byte) -1, 0, true);
        int int64 = serializedString34.appendUnquoted(charArray58, (-1));
        int int66 = serializedString1.appendUnquoted(charArray58, (int) (byte) 0);
        byte[] byteArray67 = serializedString1.asQuotedUTF8();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 47 + "'", int32 == 47);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.getLastClearedToken();
        // The following exception was thrown during execution in test generation
        try {
            double double93 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertNull(jsonToken92);
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext90 = uTF8StreamJsonParser84.getParsingContext();
        int int91 = uTF8StreamJsonParser84.getValueAsInt();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(jsonStreamContext90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean94 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getObjectId();
        int int92 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) 1);
        java.lang.Object obj93 = uTF8StreamJsonParser84.getInputSource();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version94);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext89 = uTF8StreamJsonParser84.getParsingContext();
        java.io.Writer writer90 = null;
        int int91 = uTF8StreamJsonParser84.releaseBuffered(writer90);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertNotNull(jsonReadContext89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getInputSource();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(jsonLocation91);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter50);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter51.writeRootValueSeparator(jsonGenerator52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) (-1));
        int int93 = uTF8StreamJsonParser84.getValueAsInt(47);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-1.0d) + "'", double91 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 47 + "'", int93 == 47);
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean93 = uTF8StreamJsonParser84.hasCurrentToken();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean96 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(charArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        boolean boolean23 = defaultPrettyPrinter21._spacesInObjectEntries;
        defaultPrettyPrinter21._spacesInObjectEntries = true;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString28 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter27, serializableString28);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int38 = serializedString31.appendQuotedUTF8(byteArray36, 0);
        char[] charArray39 = serializedString31.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int48 = serializedString41.appendQuotedUTF8(byteArray46, 0);
        int int50 = serializedString31.appendUnquotedUTF8(byteArray46, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString31);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter52 = defaultPrettyPrinter51._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString54 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int61 = serializedString54.appendQuotedUTF8(byteArray59, 0);
        char[] charArray62 = serializedString54.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString64 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int71 = serializedString64.appendQuotedUTF8(byteArray69, 0);
        int int73 = serializedString54.appendUnquotedUTF8(byteArray69, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter74 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString54);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter75 = defaultPrettyPrinter74._objectIndenter;
        defaultPrettyPrinter51.indentObjectsWith(indenter75);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter77 = defaultPrettyPrinter51._arrayIndenter;
        defaultPrettyPrinter27._arrayIndenter = indenter77;
        defaultPrettyPrinter21._arrayIndenter = indenter77;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter80 = defaultPrettyPrinter21._arrayIndenter;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(indenter52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(indenter75);
        org.junit.Assert.assertNotNull(indenter77);
        org.junit.Assert.assertNotNull(indenter80);
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        java.nio.ByteBuffer byteBuffer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = serializedString20.putQuotedUTF8(byteBuffer30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getObjectId();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getInputSource();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext92 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNotNull(jsonReadContext92);
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter50);
        defaultPrettyPrinter51._nesting = (short) -1;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter51.beforeObjectEntries(jsonGenerator54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            int int92 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jsonToken91);
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getObjectId();
        // The following exception was thrown during execution in test generation
        try {
            long long92 = uTF8StreamJsonParser84.nextLongValue(72L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        int int23 = serializedString1.appendQuotedUTF8(byteArray21, (int) (short) 1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter27._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter27._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int40 = serializedString33.appendQuotedUTF8(byteArray38, 0);
        char[] charArray41 = serializedString33.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        int int52 = serializedString33.appendUnquotedUTF8(byteArray48, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter54 = defaultPrettyPrinter53._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int63 = serializedString56.appendQuotedUTF8(byteArray61, 0);
        char[] charArray64 = serializedString56.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString66 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int73 = serializedString66.appendQuotedUTF8(byteArray71, 0);
        int int75 = serializedString56.appendUnquotedUTF8(byteArray71, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter76 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString56);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter77 = defaultPrettyPrinter76._objectIndenter;
        defaultPrettyPrinter53.indentObjectsWith(indenter77);
        defaultPrettyPrinter31._objectIndenter = indenter77;
        defaultPrettyPrinter25._objectIndenter = indenter77;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator81 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter25.writeStartObject(jsonGenerator81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(indenter54);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(indenter77);
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("com.fasterxml.jackson.core.JsonParseException: ", (long) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 97L + "'", long2 == 97L);
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        int int30 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString33 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, serializableString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray38 = serializedString37.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, (com.fasterxml.jackson.core.SerializableString) serializedString37);
        boolean boolean40 = serializedString1.equals((java.lang.Object) serializedString37);
        java.lang.String str41 = serializedString1.toString();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 47 + "'", int30 == 47);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str41, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        int int90 = uTF8StreamJsonParser84.getTokenColumnNr();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean91 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext93 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: true; line: 0, column: 100]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonStreamContext93);
        org.junit.Assert.assertNull(jsonToken94);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        java.io.Writer writer95 = null;
        int int96 = uTF8StreamJsonParser84.releaseBuffered(writer95);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNull(charArray94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        defaultPrettyPrinter94._nesting = 34;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter97 = defaultPrettyPrinter94.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator98 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter94.writeStartArray(jsonGenerator98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter97);
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger90 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray16 = new char[] { 'a', ' ', '#', '4' };
        int int18 = serializedString11.appendUnquoted(charArray16, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray25 = new char[] { 'a', ' ', '#', '4' };
        int int27 = serializedString20.appendUnquoted(charArray25, 0);
        boolean boolean28 = serializedString11.equals((java.lang.Object) serializedString20);
        char[] charArray29 = serializedString11.asQuotedChars();
        boolean boolean33 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray29, (int) (byte) 10, 10, true);
        int int36 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray29, (int) (byte) 1, 0);
        int int38 = serializedString1.appendQuoted(charArray29, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 63 + "'", int36 == 63);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        int int93 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        int int91 = uTF8StreamJsonParser84.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number87 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.ObjectCodec objectCodec96 = uTF8StreamJsonParser84.getCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertNull(objectCodec96);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.FormatSchema formatSchema94 = null;
        boolean boolean95 = uTF8StreamJsonParser84.canUseSchema(formatSchema94);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter86.writeEndArray(jsonGenerator87, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        java.io.InputStream inputStream1 = null;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream7 = new com.fasterxml.jackson.core.io.MergedStream(iOContext0, inputStream1, byteArray4, 0, (int) '#');
        long long9 = mergedStream7.skip((long) (short) 1);
        boolean boolean10 = mergedStream7.markSupported();
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray26 = new char[] { 'a', ' ', '#', '4' };
        int int28 = serializedString21.appendUnquoted(charArray26, 0);
        boolean boolean29 = serializedString12.equals((java.lang.Object) serializedString21);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int38 = serializedString31.appendQuotedUTF8(byteArray36, 0);
        char[] charArray39 = serializedString31.asQuotedChars();
        boolean boolean40 = serializedString12.equals((java.lang.Object) serializedString31);
        char[] charArray47 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean51 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray47, (int) (byte) -1, 0, true);
        int int53 = serializedString31.appendQuoted(charArray47, (int) '#');
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray60 = new char[] { 'a', ' ', '#', '4' };
        int int62 = serializedString55.appendUnquoted(charArray60, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString64 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray69 = new char[] { 'a', ' ', '#', '4' };
        int int71 = serializedString64.appendUnquoted(charArray69, 0);
        boolean boolean72 = serializedString55.equals((java.lang.Object) serializedString64);
        com.fasterxml.jackson.core.io.SerializedString serializedString74 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = serializedString74.asUnquotedUTF8();
        int int77 = serializedString55.appendQuotedUTF8(byteArray75, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString79 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray84 = new char[] { 'a', ' ', '#', '4' };
        int int86 = serializedString79.appendUnquoted(charArray84, 0);
        int int88 = serializedString55.appendUnquoted(charArray84, (int) 'a');
        byte[] byteArray89 = serializedString55.asUnquotedUTF8();
        int int91 = serializedString31.appendQuotedUTF8(byteArray89, 35);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = mergedStream7.read(byteArray89, 63, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonLocation jsonLocation89 = uTF8StreamJsonParser84.getCurrentLocation();
        int int90 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType91 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonLocation89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.createInstance();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            long long91 = uTF8StreamJsonParser84.nextLongValue(13L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21._withSpaces(true);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeArrayValueSeparator(jsonGenerator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        boolean boolean88 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        java.lang.String str89 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal94 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext87 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        int int88 = jsonReadContext87.getCurrentIndex();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext91 = jsonReadContext87.createChildArrayContext(0, 0);
        java.lang.String str92 = jsonReadContext91.getCurrentName();
        jsonReadContext91.setCurrentName("hi!");
        java.lang.String str95 = jsonReadContext91.toString();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext96 = jsonReadContext91.getParent();
        java.lang.String str97 = jsonStreamContext96.getTypeDesc();
        boolean boolean98 = jsonLocation33.equals((java.lang.Object) jsonStreamContext96);
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jsonReadContext87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(jsonReadContext91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[0]" + "'", str95, "[0]");
        org.junit.Assert.assertNotNull(jsonStreamContext96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ROOT" + "'", str97, "ROOT");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        int int93 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number94 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter87 = defaultPrettyPrinter55.createInstance();
        com.fasterxml.jackson.core.SerializableString serializableString88 = defaultPrettyPrinter55._rootSeparator;
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter87);
        org.junit.Assert.assertNotNull(serializableString88);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean90 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter23.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter24.writeStartObject(jsonGenerator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartArray(jsonGenerator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        byte[] byteArray44 = serializedString20.asUnquotedUTF8();
        java.lang.String str45 = serializedString20.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str45, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.JsonParser jsonParser87 = uTF8StreamJsonParser84.skipChildren();
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNotNull(jsonParser87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        boolean boolean90 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        // The following exception was thrown during execution in test generation
        try {
            long long92 = uTF8StreamJsonParser84.nextLongValue((long) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long94 = uTF8StreamJsonParser84.getValueAsLong((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger95 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        char[] charArray27 = serializedString19.asQuotedChars();
        int int28 = serializedString19.charLength();
        char[] charArray29 = serializedString19.asQuotedChars();
        int int31 = serializedString1.appendUnquoted(charArray29, (int) (short) 10);
        char[] charArray32 = serializedString1.asQuotedChars();
        java.lang.String str33 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation37 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) str33, 0L, 0, (int) (short) 100);
        com.fasterxml.jackson.core.io.SerializedString serializedString39 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray40 = serializedString39.asQuotedChars();
        byte[] byteArray41 = serializedString39.asQuotedUTF8();
        boolean boolean42 = jsonLocation37.equals((java.lang.Object) byteArray41);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 47 + "'", int28 == 47);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str33, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.contentsAsArray();
        textBuffer76.setCurrentLength((int) 'a');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        char[] charArray25 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        defaultPrettyPrinter26.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter26.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter26.writeStartArray(jsonGenerator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = null;
        boolean boolean90 = uTF8StreamJsonParser84.canUseSchema(formatSchema89);
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(version91);
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) jsonLocation88, (long) 35, 10, (int) (byte) 0);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        int int79 = textBuffer76.getCurrentSegmentSize();
        textBuffer76.resetWithEmpty();
        // The following exception was thrown during execution in test generation
        try {
            textBuffer76.append("", 13, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        java.lang.String str96 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonLocation jsonLocation97 = uTF8StreamJsonParser84.getTokenLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str96, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonLocation97);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        byte[] byteArray11 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString13 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = serializedString13.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext17 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext20 = jsonReadContext17.createChildArrayContext((int) (short) 1, 10);
        boolean boolean21 = jsonReadContext20.inArray();
        boolean boolean22 = serializedString13.equals((java.lang.Object) boolean21);
        char[] charArray23 = serializedString13.asQuotedChars();
        int int25 = serializedString1.appendUnquoted(charArray23, 100);
        com.fasterxml.jackson.core.JsonLocation jsonLocation32 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) "hi!", 0L, (long) (-1), (int) '4', (int) (byte) 1);
        com.fasterxml.jackson.core.JsonParseException jsonParseException33 = new com.fasterxml.jackson.core.JsonParseException("com.fasterxml.jackson.core.JsonParseException: ", jsonLocation32);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        byte[] byteArray43 = serializedString35.asUnquotedUTF8();
        boolean boolean44 = jsonLocation32.equals((java.lang.Object) byteArray43);
        int int46 = serializedString1.appendQuotedUTF8(byteArray43, 0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext17);
        org.junit.Assert.assertNotNull(jsonReadContext20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 47 + "'", int46 == 47);
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number86 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        boolean boolean78 = textBuffer76.hasTextAsCharacters();
        java.lang.String str79 = textBuffer76.contentsAsString();
        textBuffer76.append(' ');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter23.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter24.withoutSpacesInObjectEntries();
        defaultPrettyPrinter24._spacesInObjectEntries = true;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter24.writeArrayValueSeparator(jsonGenerator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        byte[] byteArray57 = null;
        iOContext12.releaseBase64Buffer(byteArray57);
        java.lang.Object obj59 = iOContext12.getSourceReference();
        boolean boolean60 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding61 = iOContext12.getEncoding();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer62 = iOContext12.constructTextBuffer();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray63 = iOContext12.allocReadIOBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jsonEncoding61);
        org.junit.Assert.assertNotNull(textBuffer62);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream88, false);
        boolean boolean91 = iOContext90.isResourceManaged();
        com.fasterxml.jackson.core.io.SerializedString serializedString93 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray94 = serializedString93.asUnquotedUTF8();
        java.lang.String str95 = serializedString93.toString();
        byte[] byteArray96 = serializedString93.asQuotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            iOContext90.releaseBase64Buffer(byteArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str95, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        char[] charArray87 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.Version version88 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            double double89 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray87);
        org.junit.Assert.assertNotNull(version88);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        boolean boolean85 = uTF8StreamJsonParser84.hasTextCharacters();
        char[] charArray86 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext87 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(charArray86);
        org.junit.Assert.assertNotNull(jsonReadContext87);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long93 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext94 = uTF8StreamJsonParser84.getParsingContext();
        double double96 = uTF8StreamJsonParser84.getValueAsDouble((double) 100L);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(jsonReadContext94);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 100.0d + "'", double96 == 100.0d);
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean();
        com.fasterxml.jackson.core.JsonParser jsonParser94 = uTF8StreamJsonParser84.setFeatureMask((int) (byte) -1);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(jsonParser94);
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        java.lang.String str96 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser97 = uTF8StreamJsonParser84.skipChildren();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str96, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonParser97);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        long long90 = uTF8StreamJsonParser84.getValueAsLong((long) 'a');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 97L + "'", long90 == 97L);
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter21._rootSeparator;
        char[] charArray96 = serializableString95.asQuotedChars();
        java.lang.String str97 = serializableString95.getValue();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str97, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(97);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonParser jsonParser89 = uTF8StreamJsonParser84.skipChildren();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(jsonParser89);
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter24 = null;
        defaultPrettyPrinter21._arrayIndenter = indenter24;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getTypeId();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger90 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        double double94 = uTF8StreamJsonParser84.getValueAsDouble();
        java.lang.String str95 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType97 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str95, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(jsonToken96);
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter50 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.withArrayIndenter(indenter50);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeArrayValueSeparator(jsonGenerator52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        java.lang.String str89 = uTF8StreamJsonParser84.getValueAsString("[Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.nextIntValue(63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        textBuffer76.releaseBuffers();
        int int86 = textBuffer76.size();
        textBuffer76.releaseBuffers();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean95 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonParser.Feature feature96 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser97 = uTF8StreamJsonParser84.enable(feature96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        boolean boolean88 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        com.fasterxml.jackson.core.JsonParser jsonParser89 = uTF8StreamJsonParser84.skipChildren();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
        org.junit.Assert.assertNotNull(jsonParser89);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        textBuffer76.setCurrentLength((int) (byte) 0);
        java.lang.String str82 = textBuffer76.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getCurrentSegment();
        int int82 = textBuffer76.getTextOffset();
        int int83 = textBuffer76.getTextOffset();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21._withSpaces(true);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = defaultPrettyPrinter21.createInstance();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter26);
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeArrayValueSeparator(jsonGenerator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        defaultPrettyPrinter86._spacesInObjectEntries = false;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator89 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter86.writeEndObject(jsonGenerator89, 47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(97);
        com.fasterxml.jackson.core.JsonParser jsonParser93 = jsonParser91.setFeatureMask(35);
        // The following exception was thrown during execution in test generation
        try {
            float float94 = jsonParser91.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertNotNull(jsonParser93);
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        int int79 = textBuffer76.getCurrentSegmentSize();
        char[] charArray80 = textBuffer76.emptyAndGetCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.SerializableString serializableString22 = defaultPrettyPrinter21._rootSeparator;
        java.nio.ByteBuffer byteBuffer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int24 = serializableString22.putUnquotedUTF8(byteBuffer23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(serializableString22);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.JsonParser jsonParser87 = uTF8StreamJsonParser84.skipChildren();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNotNull(jsonParser87);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        int int30 = serializedString1.appendQuoted(charArray28, 63);
        byte[] byteArray31 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray38 = new char[] { 'a', ' ', '#', '4' };
        int int40 = serializedString33.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString42 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray47 = new char[] { 'a', ' ', '#', '4' };
        int int49 = serializedString42.appendUnquoted(charArray47, 0);
        boolean boolean50 = serializedString33.equals((java.lang.Object) serializedString42);
        char[] charArray51 = serializedString33.asQuotedChars();
        boolean boolean55 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray51, (int) (byte) 10, 10, true);
        int int58 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray51, (int) (byte) 1, 0);
        int int60 = serializedString1.appendQuoted(charArray51, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal61 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 63 + "'", int58 == 63);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 47 + "'", int60 == 47);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        java.lang.Object obj92 = uTF8StreamJsonParser84.getObjectId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number93 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonLocation jsonLocation94 = uTF8StreamJsonParser84.getTokenLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertNotNull(jsonLocation94);
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        double double94 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 100);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 100.0d + "'", double94 == 100.0d);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getInputSource();
        com.fasterxml.jackson.core.Base64Variant base64Variant92 = null;
        java.io.OutputStream outputStream93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int94 = uTF8StreamJsonParser84.readBinaryValue(base64Variant92, outputStream93);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream65, false);
        mergedStream65.reset();
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        int int44 = serializedString20.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray51 = new char[] { 'a', ' ', '#', '4' };
        int int53 = serializedString46.appendUnquoted(charArray51, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray60 = new char[] { 'a', ' ', '#', '4' };
        int int62 = serializedString55.appendUnquoted(charArray60, 0);
        boolean boolean63 = serializedString46.equals((java.lang.Object) serializedString55);
        int int64 = serializedString55.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString66 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray71 = new char[] { 'a', ' ', '#', '4' };
        int int73 = serializedString66.appendUnquoted(charArray71, 0);
        java.lang.String str74 = serializedString66.getValue();
        char[] charArray75 = serializedString66.asQuotedChars();
        byte[] byteArray76 = serializedString66.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString78 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray79 = serializedString78.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext82 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext85 = jsonReadContext82.createChildArrayContext((int) (short) 1, 10);
        boolean boolean86 = jsonReadContext85.inArray();
        boolean boolean87 = serializedString78.equals((java.lang.Object) boolean86);
        char[] charArray88 = serializedString78.asQuotedChars();
        int int90 = serializedString66.appendUnquoted(charArray88, 100);
        int int92 = serializedString55.appendUnquoted(charArray88, (int) 'a');
        boolean boolean96 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray88, 0, 0, true);
        int int98 = serializedString20.appendUnquoted(charArray88, 10);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 47 + "'", int44 == 47);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 47 + "'", int64 == 47);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str74, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext82);
        org.junit.Assert.assertNotNull(jsonReadContext85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number93 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        int int92 = uTF8StreamJsonParser84.getValueAsInt(47);
        // The following exception was thrown during execution in test generation
        try {
            float float93 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 47 + "'", int92 == 47);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.getValueAsBoolean();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        textBuffer76.ensureNotShared();
        int int86 = textBuffer76.getCurrentSegmentSize();
        boolean boolean87 = textBuffer76.hasTextAsCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            long long89 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray40 = new char[] { 'a', ' ', '#', '4' };
        int int42 = serializedString35.appendUnquoted(charArray40, 0);
        java.lang.String str43 = serializedString35.getValue();
        char[] charArray44 = serializedString35.asQuotedChars();
        byte[] byteArray45 = serializedString35.asUnquotedUTF8();
        int int47 = serializedString1.appendQuotedUTF8(byteArray45, 0);
        java.lang.String str48 = serializedString1.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str43, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 47 + "'", int47 == 47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str48, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        textBuffer76.ensureNotShared();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        com.fasterxml.jackson.core.JsonLocation jsonLocation47 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) serializedString20, (long) (byte) 1, (long) (short) 100, 10, (int) (byte) 100);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        java.io.InputStream inputStream1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        char[] charArray30 = serializedString22.asQuotedChars();
        boolean boolean31 = serializedString3.equals((java.lang.Object) serializedString22);
        char[] charArray32 = serializedString3.asQuotedChars();
        byte[] byteArray33 = serializedString3.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream36 = new com.fasterxml.jackson.core.io.MergedStream(iOContext0, inputStream1, byteArray33, (int) (byte) 100, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = mergedStream36.read();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        com.fasterxml.jackson.core.SerializableString serializableString88 = defaultPrettyPrinter85._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter89 = defaultPrettyPrinter85.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = defaultPrettyPrinter85.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter90.writeArrayValueSeparator(jsonGenerator91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serializableString88);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter89);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter90);
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        char[] charArray87 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext88 = uTF8StreamJsonParser84.getParsingContext();
        long long89 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray87);
        org.junit.Assert.assertNotNull(jsonReadContext88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser96 = uTF8StreamJsonParser84.skipChildren();
        char[] charArray97 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean98 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser96);
        org.junit.Assert.assertNull(charArray97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        java.lang.String str90 = uTF8StreamJsonParser84.getText();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        java.io.Writer writer79 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator80 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext12, 0, objectCodec78, writer79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: true; line: 0, column: 100]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int14 = serializedString7.appendQuotedUTF8(byteArray12, 0);
        char[] charArray15 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        int int26 = serializedString7.appendUnquotedUTF8(byteArray22, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString7);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter28 = defaultPrettyPrinter27._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int37 = serializedString30.appendQuotedUTF8(byteArray35, 0);
        char[] charArray38 = serializedString30.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int47 = serializedString40.appendQuotedUTF8(byteArray45, 0);
        int int49 = serializedString30.appendUnquotedUTF8(byteArray45, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString30);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter51 = defaultPrettyPrinter50._objectIndenter;
        defaultPrettyPrinter27.indentObjectsWith(indenter51);
        defaultPrettyPrinter5._objectIndenter = indenter51;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter54 = defaultPrettyPrinter5._objectIndenter;
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(indenter28);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(indenter51);
        org.junit.Assert.assertNotNull(indenter54);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec94);
        uTF8StreamJsonParser84.overrideCurrentName("");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        char[] charArray25 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        int int27 = defaultPrettyPrinter26._nesting;
        int int28 = defaultPrettyPrinter26._nesting;
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            float float93 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(objectCodec92);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray36 = new char[] { 'a', ' ', '#', '4' };
        int int38 = serializedString31.appendUnquoted(charArray36, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray45 = new char[] { 'a', ' ', '#', '4' };
        int int47 = serializedString40.appendUnquoted(charArray45, 0);
        boolean boolean48 = serializedString31.equals((java.lang.Object) serializedString40);
        int int49 = serializedString40.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString51 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray56 = new char[] { 'a', ' ', '#', '4' };
        int int58 = serializedString51.appendUnquoted(charArray56, 0);
        java.lang.String str59 = serializedString51.getValue();
        char[] charArray60 = serializedString51.asQuotedChars();
        byte[] byteArray61 = serializedString51.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray64 = serializedString63.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext67 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext70 = jsonReadContext67.createChildArrayContext((int) (short) 1, 10);
        boolean boolean71 = jsonReadContext70.inArray();
        boolean boolean72 = serializedString63.equals((java.lang.Object) boolean71);
        char[] charArray73 = serializedString63.asQuotedChars();
        int int75 = serializedString51.appendUnquoted(charArray73, 100);
        int int77 = serializedString40.appendUnquoted(charArray73, (int) 'a');
        com.fasterxml.jackson.core.io.SerializedString serializedString79 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int86 = serializedString79.appendQuotedUTF8(byteArray84, 0);
        int int88 = serializedString40.appendUnquotedUTF8(byteArray84, (int) (byte) -1);
        int int90 = serializedString20.appendQuotedUTF8(byteArray84, 0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 47 + "'", int49 == 47);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str59, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext67);
        org.junit.Assert.assertNotNull(jsonReadContext70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        char[] charArray87 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean88 = uTF8StreamJsonParser84.canReadObjectId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        java.lang.String str96 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str96, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(jsonToken90);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        int int94 = uTF8StreamJsonParser84.getFeatureMask();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        int int97 = uTF8StreamJsonParser84.getValueAsInt(47);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 47 + "'", int97 == 47);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.setFeatureMask((int) '#');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(jsonParser95);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int9 = serializedString2.appendQuotedUTF8(byteArray7, 0);
        char[] charArray10 = serializedString2.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int19 = serializedString12.appendQuotedUTF8(byteArray17, 0);
        int int21 = serializedString2.appendUnquotedUTF8(byteArray17, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString2);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter22.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter22.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter22.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = defaultPrettyPrinter22.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter30 = lf2SpacesIndenter28.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter26.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter33 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString34 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter33, serializableString34);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter36 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter33);
        com.fasterxml.jackson.core.SerializableString serializableString37 = defaultPrettyPrinter36._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter38 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter26, serializableString37);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) defaultPrettyPrinter26, true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter26);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter30);
        org.junit.Assert.assertNotNull(serializableString37);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter96 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter98 = defaultPrettyPrinter96._withSpaces(true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter96);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter98);
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger86 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter25._withSpaces(true);
        boolean boolean28 = defaultPrettyPrinter25._spacesInObjectEntries;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter25.writeStartObject(jsonGenerator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        char[] charArray80 = textBuffer76.getCurrentSegment();
        char[] charArray81 = textBuffer76.expandCurrentSegment();
        java.lang.String str82 = textBuffer76.contentsAsString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "a" + "'", str82, "a");
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        int int19 = serializedString10.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray26 = new char[] { 'a', ' ', '#', '4' };
        int int28 = serializedString21.appendUnquoted(charArray26, 0);
        java.lang.String str29 = serializedString21.getValue();
        char[] charArray30 = serializedString21.asQuotedChars();
        byte[] byteArray31 = serializedString21.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray34 = serializedString33.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext37 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext40 = jsonReadContext37.createChildArrayContext((int) (short) 1, 10);
        boolean boolean41 = jsonReadContext40.inArray();
        boolean boolean42 = serializedString33.equals((java.lang.Object) boolean41);
        char[] charArray43 = serializedString33.asQuotedChars();
        int int45 = serializedString21.appendUnquoted(charArray43, 100);
        int int47 = serializedString10.appendUnquoted(charArray43, (int) 'a');
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int56 = serializedString49.appendQuotedUTF8(byteArray54, 0);
        int int58 = serializedString10.appendUnquotedUTF8(byteArray54, (int) (byte) -1);
        java.io.OutputStream outputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int60 = serializedString10.writeQuotedUTF8(outputStream59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 47 + "'", int19 == 47);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str29, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext37);
        org.junit.Assert.assertNotNull(jsonReadContext40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean94 = uTF8StreamJsonParser84.hasTextCharacters();
        int int96 = uTF8StreamJsonParser84.getValueAsInt(72);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonReadContext93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 72 + "'", int96 == 72);
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        int int44 = serializedString20.charLength();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler45 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray52 = new char[] { 'a', ' ', '#', '4' };
        int int54 = serializedString47.appendUnquoted(charArray52, 0);
        java.lang.String str55 = serializedString47.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext57 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler45, (java.lang.Object) serializedString47, false);
        byte[] byteArray58 = null;
        iOContext57.releaseReadIOBuffer(byteArray58);
        com.fasterxml.jackson.core.io.SerializedString serializedString61 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int68 = serializedString61.appendQuotedUTF8(byteArray66, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper71 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext57, byteArray66, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation75 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) byteArray66, (long) (short) -1, (int) (byte) 1, (int) '4');
        boolean boolean76 = serializedString20.equals((java.lang.Object) (byte) 1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 47 + "'", int44 == 47);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str55, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int37 = serializedString30.appendQuotedUTF8(byteArray35, 0);
        int int39 = serializedString20.appendUnquotedUTF8(byteArray35, (int) (short) -1);
        int int41 = serializedString10.appendQuotedUTF8(byteArray35, (int) (byte) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray48 = new char[] { 'a', ' ', '#', '4' };
        int int50 = serializedString43.appendUnquoted(charArray48, 0);
        java.lang.String str51 = serializedString43.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext52 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext52, inputStream53, byteArray56, 0, (int) '#');
        int int61 = serializedString43.appendUnquotedUTF8(byteArray56, 34);
        int int63 = serializedString10.appendQuotedUTF8(byteArray56, (int) '#');
        java.nio.ByteBuffer byteBuffer64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int65 = serializedString10.putQuotedUTF8(byteBuffer64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str51, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertNotNull(version91);
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray30 = serializedString20.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray30, (-1), 35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean93 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(version92);
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        com.fasterxml.jackson.core.JsonParser jsonParser89 = uTF8StreamJsonParser84.skipChildren();
        java.lang.Object obj90 = jsonParser89.getEmbeddedObject();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
        org.junit.Assert.assertNotNull(jsonParser89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getInputSource();
        boolean boolean91 = uTF8StreamJsonParser84.isClosed();
        uTF8StreamJsonParser84.overrideCurrentName("a");
        boolean boolean94 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ");
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str91, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream88, false);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray91 = iOContext90.allocConcatBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString("");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger91 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getInputSource();
        boolean boolean92 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        java.lang.Object obj92 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str93 = uTF8StreamJsonParser84.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number94 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        long long92 = uTF8StreamJsonParser84.getValueAsLong(1L);
        java.lang.String str93 = uTF8StreamJsonParser84.getText();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        byte[] byteArray57 = null;
        iOContext12.releaseBase64Buffer(byteArray57);
        java.lang.Object obj59 = iOContext12.getSourceReference();
        boolean boolean60 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding61 = iOContext12.getEncoding();
        java.io.InputStream inputStream62 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString64 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray69 = new char[] { 'a', ' ', '#', '4' };
        int int71 = serializedString64.appendUnquoted(charArray69, 0);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int80 = serializedString64.appendUnquotedUTF8(byteArray78, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader84 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, inputStream62, byteArray78, (int) '#', (int) (short) -1, true);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding85 = iOContext12.getEncoding();
        java.io.Reader reader87 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer89 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser90 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) (byte) -1, reader87, objectCodec88, charsToNameCanonicalizer89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jsonEncoding61);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNull(jsonEncoding85);
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger91 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            int int94 = uTF8StreamJsonParser84.nextIntValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(objectCodec92);
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        char[] charArray87 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext88 = uTF8StreamJsonParser84.getParsingContext();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray87);
        org.junit.Assert.assertNotNull(jsonReadContext88);
        org.junit.Assert.assertNull(charArray89);
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        char[] charArray27 = serializedString19.asQuotedChars();
        int int28 = serializedString19.charLength();
        char[] charArray29 = serializedString19.asQuotedChars();
        int int31 = serializedString1.appendUnquoted(charArray29, (int) (short) 10);
        char[] charArray32 = serializedString1.asQuotedChars();
        byte[] byteArray33 = serializedString1.asUnquotedUTF8();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 47 + "'", int28 == 47);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        defaultPrettyPrinter94._nesting = 34;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter97 = defaultPrettyPrinter94.createInstance();
        defaultPrettyPrinter97._nesting = (byte) 10;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter97);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getInputSource();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding27 = byteSourceJsonBootstrapper26.detectEncoding();
        java.io.Reader reader28 = byteSourceJsonBootstrapper26.constructReader();
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        char[] charArray39 = serializedString30.asQuotedChars();
        char[] charArray40 = serializedString30.asQuotedChars();
        int int41 = reader28.read(charArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal44 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray40, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + jsonEncoding27 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding27.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(reader28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "ddm.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "ddm.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[d, d, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "ddm.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "ddm.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[d, d, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        int int78 = textBuffer76.size();
        char[] charArray79 = textBuffer76.contentsAsArray();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[]");
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray19 = new char[] { 'a', ' ', '#', '4' };
        int int21 = serializedString14.appendUnquoted(charArray19, 0);
        boolean boolean22 = serializedString5.equals((java.lang.Object) serializedString14);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        boolean boolean33 = serializedString5.equals((java.lang.Object) serializedString24);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        byte[] byteArray43 = serializedString35.asUnquotedUTF8();
        int int45 = serializedString24.appendQuotedUTF8(byteArray43, (int) '#');
        java.lang.String str46 = serializedString24.getValue();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter47 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext50 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        int int51 = jsonReadContext50.getCurrentIndex();
        boolean boolean52 = jsonReadContext50.expectComma();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext53 = jsonReadContext50.getParent();
        java.lang.String str54 = jsonReadContext50.getTypeDesc();
        com.fasterxml.jackson.core.JsonLocation jsonLocation64 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) "hi!", 0L, (long) (-1), (int) '4', (int) (byte) 1);
        com.fasterxml.jackson.core.JsonParseException jsonParseException65 = new com.fasterxml.jackson.core.JsonParseException("com.fasterxml.jackson.core.JsonParseException: ", jsonLocation64);
        com.fasterxml.jackson.core.JsonLocation jsonLocation66 = jsonParseException65.getLocation();
        long long67 = jsonLocation66.getByteOffset();
        com.fasterxml.jackson.core.JsonParseException jsonParseException68 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation66);
        com.fasterxml.jackson.core.JsonParseException jsonParseException69 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation66);
        com.fasterxml.jackson.core.JsonParseException jsonParseException70 = new com.fasterxml.jackson.core.JsonParseException("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]", jsonLocation66);
        com.fasterxml.jackson.core.JsonLocation jsonLocation71 = jsonReadContext50.getStartLocation((java.lang.Object) jsonLocation66);
        boolean boolean72 = serializedString24.equals((java.lang.Object) jsonLocation71);
        long long73 = jsonLocation71.getCharOffset();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str46, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(jsonReadContext50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jsonStreamContext53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ROOT" + "'", str54, "ROOT");
        org.junit.Assert.assertNotNull(jsonLocation66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(jsonLocation71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        int int90 = uTF8StreamJsonParser84.getTokenColumnNr();
        long long92 = uTF8StreamJsonParser84.getValueAsLong(73844676736L);
        com.fasterxml.jackson.core.ObjectCodec objectCodec93 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec93);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 73844676736L + "'", long92 == 73844676736L);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray2 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        java.lang.String str13 = serializedString5.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) serializedString5, false);
        byte[] byteArray16 = null;
        iOContext15.releaseReadIOBuffer(byteArray16);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper29 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray24, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler30 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray37 = new char[] { 'a', ' ', '#', '4' };
        int int39 = serializedString32.appendUnquoted(charArray37, 0);
        java.lang.String str40 = serializedString32.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler30, (java.lang.Object) serializedString32, false);
        byte[] byteArray43 = null;
        iOContext42.releaseReadIOBuffer(byteArray43);
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int53 = serializedString46.appendQuotedUTF8(byteArray51, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext42, byteArray51, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper59 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray51, 47, (int) (byte) 0);
        int int61 = serializedString1.appendQuotedUTF8(byteArray51, (int) '#');
        char[] charArray62 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal65 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray62, (int) (byte) -1, 63);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str13, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str40, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            long long88 = uTF8StreamJsonParser84.nextLongValue((long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        textBuffer76.releaseBuffers();
        // The following exception was thrown during execution in test generation
        try {
            double double86 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonParser.Feature feature97 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser98 = uTF8StreamJsonParser84.enable(feature97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNull(jsonToken96);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec94);
        uTF8StreamJsonParser84.overrideCurrentName("");
        boolean boolean98 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter37 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString39 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int46 = serializedString39.appendQuotedUTF8(byteArray44, 0);
        char[] charArray47 = serializedString39.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int56 = serializedString49.appendQuotedUTF8(byteArray54, 0);
        int int58 = serializedString39.appendUnquotedUTF8(byteArray54, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter59 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString39);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter60 = defaultPrettyPrinter59._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter61 = defaultPrettyPrinter59.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString62 = defaultPrettyPrinter59._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter63 = defaultPrettyPrinter59._objectIndenter;
        defaultPrettyPrinter37.indentArraysWith(indenter63);
        defaultPrettyPrinter35._arrayIndenter = indenter63;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter35.writeObjectFieldValueSeparator(jsonGenerator66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(indenter60);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter61);
        org.junit.Assert.assertNotNull(serializableString62);
        org.junit.Assert.assertNotNull(indenter63);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str93 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.FormatSchema formatSchema94 = uTF8StreamJsonParser84.getSchema();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str93, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(formatSchema94);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        char[] charArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal3 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray0, 47, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeArrayValueSeparator(jsonGenerator87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            double double89 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        char[] charArray92 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str93 = uTF8StreamJsonParser84.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            short short94 = uTF8StreamJsonParser84.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(charArray92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getFeatureMask();
        com.fasterxml.jackson.core.JsonToken jsonToken93 = uTF8StreamJsonParser84.getCurrentToken();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger95 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertNull(jsonToken93);
        org.junit.Assert.assertNull(charArray94);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int12 = serializedString5.appendQuotedUTF8(byteArray10, 0);
        char[] charArray13 = serializedString5.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        int int24 = serializedString5.appendUnquotedUTF8(byteArray20, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter26 = defaultPrettyPrinter25._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int35 = serializedString28.appendQuotedUTF8(byteArray33, 0);
        char[] charArray36 = serializedString28.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int45 = serializedString38.appendQuotedUTF8(byteArray43, 0);
        int int47 = serializedString28.appendUnquotedUTF8(byteArray43, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter48 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter49 = defaultPrettyPrinter48._objectIndenter;
        defaultPrettyPrinter25.indentObjectsWith(indenter49);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter51 = defaultPrettyPrinter25._arrayIndenter;
        defaultPrettyPrinter1._arrayIndenter = indenter51;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter1.writeEndObject(jsonGenerator54, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(indenter26);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(indenter49);
        org.junit.Assert.assertNotNull(indenter51);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter53);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.ObjectCodec objectCodec90 = uTF8StreamJsonParser84.getCodec();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(objectCodec90);
        org.junit.Assert.assertNotNull(jsonLocation91);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        char[] charArray85 = textBuffer76.expandCurrentSegment();
        char[] charArray86 = textBuffer76.emptyAndGetCurrentSegment();
        int int87 = textBuffer76.getCurrentSegmentSize();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        double double94 = uTF8StreamJsonParser84.getValueAsDouble();
        // The following exception was thrown during execution in test generation
        try {
            double double95 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        defaultPrettyPrinter94._spacesInObjectEntries = true;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter94.writeObjectFieldValueSeparator(jsonGenerator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        long long96 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.io.SerializedString serializedString94 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray95 = serializedString94.asUnquotedUTF8();
        java.lang.String str96 = serializedString94.toString();
        byte[] byteArray97 = serializedString94.asQuotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = uTF8StreamJsonParser84.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str96, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) (-1));
        java.lang.String str93 = uTF8StreamJsonParser84.getValueAsString("");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-1.0d) + "'", double91 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        long long92 = uTF8StreamJsonParser84.getValueAsLong(0L);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray26 = new char[] { 'a', ' ', '#', '4' };
        int int28 = serializedString21.appendUnquoted(charArray26, 0);
        boolean boolean29 = serializedString12.equals((java.lang.Object) serializedString21);
        byte[] byteArray30 = serializedString12.asUnquotedUTF8();
        int int32 = serializedString1.appendQuotedUTF8(byteArray30, 34);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        java.lang.String str86 = uTF8StreamJsonParser84.getValueAsString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        defaultPrettyPrinter94._spacesInObjectEntries = true;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter97 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter94);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter98 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter97);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        char[] charArray35 = serializedString1.asQuotedChars();
        java.lang.String str36 = serializedString1.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str36, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        long long93 = uTF8StreamJsonParser84.getValueAsLong();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-1.0d) + "'", double91 == (-1.0d));
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (byte) 1);
        int int94 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal95 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext93 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.getCurrentToken();
        java.lang.String str96 = uTF8StreamJsonParser84.getValueAsString("[Source: true; line: 0, column: 100]");
        java.lang.String str97 = uTF8StreamJsonParser84.getText();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonStreamContext93);
        org.junit.Assert.assertNull(jsonToken94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[Source: true; line: 0, column: 100]" + "'", str96, "[Source: true; line: 0, column: 100]");
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int10 = serializedString3.appendQuotedUTF8(byteArray8, 0);
        int int12 = serializedString1.appendQuotedUTF8(byteArray8, 0);
        int int13 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray20 = new char[] { 'a', ' ', '#', '4' };
        int int22 = serializedString15.appendUnquoted(charArray20, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray29 = new char[] { 'a', ' ', '#', '4' };
        int int31 = serializedString24.appendUnquoted(charArray29, 0);
        boolean boolean32 = serializedString15.equals((java.lang.Object) serializedString24);
        char[] charArray33 = serializedString15.asQuotedChars();
        int int35 = serializedString1.appendQuoted(charArray33, 10);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 47 + "'", int13 == 47);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        java.io.InputStream inputStream1 = null;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream7 = new com.fasterxml.jackson.core.io.MergedStream(iOContext0, inputStream1, byteArray4, 0, (int) '#');
        mergedStream7.mark((int) (short) 10);
        boolean boolean10 = mergedStream7.markSupported();
        int int11 = mergedStream7.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString13 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray18 = new char[] { 'a', ' ', '#', '4' };
        int int20 = serializedString13.appendUnquoted(charArray18, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray27 = new char[] { 'a', ' ', '#', '4' };
        int int29 = serializedString22.appendUnquoted(charArray27, 0);
        boolean boolean30 = serializedString13.equals((java.lang.Object) serializedString22);
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int39 = serializedString32.appendQuotedUTF8(byteArray37, 0);
        char[] charArray40 = serializedString32.asQuotedChars();
        boolean boolean41 = serializedString13.equals((java.lang.Object) serializedString32);
        char[] charArray48 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean52 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray48, (int) (byte) -1, 0, true);
        int int54 = serializedString32.appendQuoted(charArray48, (int) '#');
        char[] charArray55 = serializedString32.asQuotedChars();
        byte[] byteArray56 = serializedString32.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            int int57 = mergedStream7.read(byteArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        boolean boolean90 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(version91);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ");
        java.lang.String str92 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean93 = uTF8StreamJsonParser84.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            int int94 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str91, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean95 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.ObjectCodec objectCodec86 = uTF8StreamJsonParser84.getCodec();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec89 = uTF8StreamJsonParser84.getCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(objectCodec86);
        org.junit.Assert.assertNull(objectCodec89);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        int int92 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger93 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        int int94 = uTF8StreamJsonParser84.getFeatureMask();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        java.lang.String str89 = uTF8StreamJsonParser84.getValueAsString("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder90 = uTF8StreamJsonParser84._getByteArrayBuilder();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getLastClearedToken();
        // The following exception was thrown during execution in test generation
        try {
            int int93 = uTF8StreamJsonParser84.nextIntValue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(byteArrayBuilder90);
        org.junit.Assert.assertNull(jsonToken91);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        int int90 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder92 = uTF8StreamJsonParser84._getByteArrayBuilder();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertNotNull(byteArrayBuilder92);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            float float89 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        char[] charArray11 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray11, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 123");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            long long94 = uTF8StreamJsonParser84.nextLongValue(52L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(objectCodec92);
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        java.lang.String str89 = uTF8StreamJsonParser84.getValueAsString("[Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        char[] charArray79 = textBuffer76.contentsAsArray();
        char[] charArray80 = textBuffer76.getCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString33 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, serializableString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32);
        com.fasterxml.jackson.core.SerializableString serializableString36 = defaultPrettyPrinter35._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter37 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter25, serializableString36);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter38 = defaultPrettyPrinter37.createInstance();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(serializableString36);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter38);
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        textBuffer76.resetWithEmpty();
        char[] charArray85 = textBuffer76.expandCurrentSegment();
        char[] charArray86 = textBuffer76.emptyAndGetCurrentSegment();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal89 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray86, (int) (byte) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertNotNull(charArray86);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonParser.Feature feature92 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = uTF8StreamJsonParser84.isEnabled(feature92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertNull(jsonToken91);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str87 = uTF8StreamJsonParser84.getValueAsString("?");
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "?" + "'", str87, "?");
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        char[] charArray92 = uTF8StreamJsonParser84.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertNull(charArray92);
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = uTF8StreamJsonParser84.getCodec();
        boolean boolean93 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType94 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNull(objectCodec92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str93 = uTF8StreamJsonParser84.getValueAsString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        double double2 = com.fasterxml.jackson.core.io.NumberInput.parseAsDouble("[Source: #; line: 1, column: 1]", (double) 1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getText();
        double double92 = uTF8StreamJsonParser84.getValueAsDouble((double) 97);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 97.0d + "'", double92 == 97.0d);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str87 = uTF8StreamJsonParser84.getValueAsString("?");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal88 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "?" + "'", str87, "?");
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        int int23 = serializedString1.appendQuotedUTF8(byteArray21, (int) (short) 1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter27._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter27._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int40 = serializedString33.appendQuotedUTF8(byteArray38, 0);
        char[] charArray41 = serializedString33.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        int int52 = serializedString33.appendUnquotedUTF8(byteArray48, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter54 = defaultPrettyPrinter53._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int63 = serializedString56.appendQuotedUTF8(byteArray61, 0);
        char[] charArray64 = serializedString56.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString66 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int73 = serializedString66.appendQuotedUTF8(byteArray71, 0);
        int int75 = serializedString56.appendUnquotedUTF8(byteArray71, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter76 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString56);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter77 = defaultPrettyPrinter76._objectIndenter;
        defaultPrettyPrinter53.indentObjectsWith(indenter77);
        defaultPrettyPrinter31._objectIndenter = indenter77;
        defaultPrettyPrinter25._objectIndenter = indenter77;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter81 = defaultPrettyPrinter25.createInstance();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(indenter54);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(indenter77);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter81);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getInputSource();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        boolean boolean93 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = null;
        boolean boolean90 = uTF8StreamJsonParser84.canUseSchema(formatSchema89);
        com.fasterxml.jackson.core.JsonLocation jsonLocation94 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) boolean90, (long) 100, 34, (int) (short) 100);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        boolean boolean85 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean86 = uTF8StreamJsonParser84.canReadObjectId();
        boolean boolean87 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.Object obj94 = uTF8StreamJsonParser84.getObjectId();
        char[] charArray95 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number96 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(charArray95);
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray16 = new char[] { 'a', ' ', '#', '4' };
        int int18 = serializedString11.appendUnquoted(charArray16, 0);
        boolean boolean19 = serializedString2.equals((java.lang.Object) serializedString11);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int28 = serializedString21.appendQuotedUTF8(byteArray26, 0);
        char[] charArray29 = serializedString21.asQuotedChars();
        boolean boolean30 = serializedString2.equals((java.lang.Object) serializedString21);
        char[] charArray37 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean41 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray37, (int) (byte) -1, 0, true);
        int int43 = serializedString21.appendQuoted(charArray37, (int) '#');
        com.fasterxml.jackson.core.io.IOContext iOContext45 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) '#', true);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray46 = iOContext45.allocTokenBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean94 = uTF8StreamJsonParser84.hasTextCharacters();
        int int96 = uTF8StreamJsonParser84.getValueAsInt(72);
        // The following exception was thrown during execution in test generation
        try {
            short short97 = uTF8StreamJsonParser84.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonReadContext93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 72 + "'", int96 == 72);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.FormatSchema formatSchema92 = uTF8StreamJsonParser84.getSchema();
        com.fasterxml.jackson.core.Version version93 = uTF8StreamJsonParser84.version();
        java.lang.Object obj94 = uTF8StreamJsonParser84.getEmbeddedObject();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNull(formatSchema92);
        org.junit.Assert.assertNotNull(version93);
        org.junit.Assert.assertNull(obj94);
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        char[] charArray11 = serializedString1.asQuotedChars();
        java.lang.String str12 = serializedString1.getValue();
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray19 = new char[] { 'a', ' ', '#', '4' };
        int int21 = serializedString14.appendUnquoted(charArray19, 0);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int30 = serializedString14.appendUnquotedUTF8(byteArray28, (int) (short) -1);
        byte[] byteArray31 = serializedString14.asUnquotedUTF8();
        int int33 = serializedString1.appendUnquotedUTF8(byteArray31, 47);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str12, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        int int91 = uTF8StreamJsonParser84.getTokenLineNr();
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.setCurrentLength(63);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        com.fasterxml.jackson.core.SerializableString serializableString88 = defaultPrettyPrinter85._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter89 = defaultPrettyPrinter85.createInstance();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) defaultPrettyPrinter89, (long) (byte) 10, (int) (byte) 10, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter94 = defaultPrettyPrinter89._arrayIndenter;
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serializableString88);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter89);
        org.junit.Assert.assertNotNull(indenter94);
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        int int82 = textBuffer76.size();
        textBuffer76.append('a');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getInputSource();
        int int92 = uTF8StreamJsonParser84.getValueAsInt((int) (short) 1);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        int int93 = uTF8StreamJsonParser84.getValueAsInt((int) '4');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 52 + "'", int93 == 52);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        boolean boolean92 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        boolean boolean78 = textBuffer76.hasTextAsCharacters();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray79 = textBuffer76.expandCurrentSegment();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        char[] charArray85 = textBuffer76.getCurrentSegment();
        int int86 = textBuffer76.getTextOffset();
        textBuffer76.append('4');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString("?");
        java.lang.String str91 = uTF8StreamJsonParser84.getText();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "?" + "'", str90, "?");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        boolean boolean94 = uTF8StreamJsonParser84.canReadObjectId();
        long long96 = uTF8StreamJsonParser84.getValueAsLong((long) 47);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 47L + "'", long96 == 47L);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString25 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = defaultPrettyPrinter21.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter27.writeIndentation(jsonGenerator29, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(serializableString25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter28);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean94 = uTF8StreamJsonParser84.hasTextCharacters();
        int int96 = uTF8StreamJsonParser84.getValueAsInt(72);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonReadContext93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 72 + "'", int96 == 72);
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str87 = uTF8StreamJsonParser84.getValueAsString("?");
        // The following exception was thrown during execution in test generation
        try {
            long long88 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "?" + "'", str87, "?");
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            double double94 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        double double93 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec94);
        uTF8StreamJsonParser84.overrideCurrentName("");
        // The following exception was thrown during execution in test generation
        try {
            long long99 = uTF8StreamJsonParser84.nextLongValue((long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int15 = serializedString8.appendQuotedUTF8(byteArray13, 0);
        char[] charArray16 = serializedString8.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int25 = serializedString18.appendQuotedUTF8(byteArray23, 0);
        int int27 = serializedString8.appendUnquotedUTF8(byteArray23, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString8);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter29 = defaultPrettyPrinter28._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter30 = defaultPrettyPrinter28.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString31 = defaultPrettyPrinter28._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter32 = defaultPrettyPrinter28._objectIndenter;
        defaultPrettyPrinter6.indentArraysWith(indenter32);
        defaultPrettyPrinter4.indentObjectsWith(indenter32);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter4.createInstance();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(indenter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter30);
        org.junit.Assert.assertNotNull(serializableString31);
        org.junit.Assert.assertNotNull(indenter32);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        int int87 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonParser jsonParser89 = uTF8StreamJsonParser84.setFeatureMask((int) '#');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(jsonParser89);
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        int int82 = textBuffer76.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            float float90 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
        org.junit.Assert.assertNull(charArray89);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext89 = uTF8StreamJsonParser84.getParsingContext();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean91 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertNotNull(jsonReadContext89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger94 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext90 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(jsonStreamContext90);
        org.junit.Assert.assertNull(jsonToken91);
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            float float92 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getObjectId();
        int int92 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.emptyAndGetCurrentSegment();
        int int78 = textBuffer76.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean92 = uTF8StreamJsonParser84.requiresCustomCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext89 = uTF8StreamJsonParser84.getParsingContext();
        jsonReadContext89.setCurrentName("");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonReadContext89);
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getTextBuffer();
        char[] charArray82 = textBuffer76.getTextBuffer();
        textBuffer76.ensureNotShared();
        textBuffer76.ensureNotShared();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        boolean boolean87 = uTF8StreamJsonParser84.requiresCustomCodec();
        java.io.Writer writer88 = null;
        int int89 = uTF8StreamJsonParser84.releaseBuffered(writer88);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) "[Source: #; line: 1, column: 1]", false);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        java.lang.String str13 = serializedString5.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation15 = null;
        java.lang.Throwable throwable16 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException17 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation15, throwable16);
        boolean boolean18 = serializedString5.equals((java.lang.Object) jsonLocation15);
        byte[] byteArray19 = serializedString5.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray26 = new char[] { 'a', ' ', '#', '4' };
        int int28 = serializedString21.appendUnquoted(charArray26, 0);
        java.lang.String str29 = serializedString21.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation31 = null;
        java.lang.Throwable throwable32 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException33 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation31, throwable32);
        boolean boolean34 = serializedString21.equals((java.lang.Object) jsonLocation31);
        byte[] byteArray35 = serializedString21.asUnquotedUTF8();
        int int37 = serializedString5.appendQuotedUTF8(byteArray35, 34);
        com.fasterxml.jackson.core.io.SerializedString serializedString39 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray44 = new char[] { 'a', ' ', '#', '4' };
        int int46 = serializedString39.appendUnquoted(charArray44, 0);
        java.lang.String str47 = serializedString39.getValue();
        char[] charArray48 = serializedString39.asQuotedChars();
        byte[] byteArray49 = serializedString39.asUnquotedUTF8();
        int int51 = serializedString5.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString53 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int62 = serializedString55.appendQuotedUTF8(byteArray60, 0);
        int int64 = serializedString53.appendQuotedUTF8(byteArray60, 0);
        int int66 = serializedString5.appendQuotedUTF8(byteArray60, 35);
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseBase64Buffer(byteArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str13, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str29, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str47, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 47 + "'", int51 == 47);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        char[] charArray87 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            long long88 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray87);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int14 = serializedString7.appendQuotedUTF8(byteArray12, 0);
        char[] charArray15 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        int int26 = serializedString7.appendUnquotedUTF8(byteArray22, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString7);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter28 = defaultPrettyPrinter27._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int37 = serializedString30.appendQuotedUTF8(byteArray35, 0);
        char[] charArray38 = serializedString30.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int47 = serializedString40.appendQuotedUTF8(byteArray45, 0);
        int int49 = serializedString30.appendUnquotedUTF8(byteArray45, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString30);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter51 = defaultPrettyPrinter50._objectIndenter;
        defaultPrettyPrinter27.indentObjectsWith(indenter51);
        defaultPrettyPrinter5._objectIndenter = indenter51;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter5.writeObjectFieldValueSeparator(jsonGenerator54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(indenter28);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(indenter51);
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        defaultPrettyPrinter21.spacesInObjectEntries(true);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter52 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = null;
        boolean boolean90 = uTF8StreamJsonParser84.canUseSchema(formatSchema89);
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]" + "'", str88, "com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(version91);
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        java.lang.String str92 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            long long93 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(jsonStreamContext91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str92, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.FormatSchema formatSchema92 = uTF8StreamJsonParser84.getSchema();
        boolean boolean93 = uTF8StreamJsonParser84.hasCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNull(formatSchema92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream65, false);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding91 = iOContext90.getEncoding();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer92 = iOContext90.constructTextBuffer();
        boolean boolean93 = iOContext90.isResourceManaged();
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(jsonEncoding91);
        org.junit.Assert.assertNotNull(textBuffer92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema91 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.setSchema(formatSchema91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        int int94 = uTF8StreamJsonParser84.getFeatureMask();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.getCurrentToken();
        boolean boolean97 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNull(jsonToken96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream65, false);
        long long92 = mergedStream65.skip(0L);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        // The following exception was thrown during execution in test generation
        try {
            double double1 = com.fasterxml.jackson.core.io.NumberInput.parseDouble("a");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"a\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        char[] charArray80 = textBuffer76.getCurrentSegment();
        char[] charArray81 = textBuffer76.emptyAndGetCurrentSegment();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal82 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray10, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter22.beforeArrayValues(jsonGenerator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        double double95 = uTF8StreamJsonParser84.getValueAsDouble();
        java.lang.Object obj96 = uTF8StreamJsonParser84.getInputSource();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getFeatureMask();
        com.fasterxml.jackson.core.JsonToken jsonToken93 = uTF8StreamJsonParser84.getCurrentToken();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.JsonParser.Feature feature95 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser97 = uTF8StreamJsonParser84.configure(feature95, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertNull(jsonToken93);
        org.junit.Assert.assertNull(charArray94);
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString25 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator26, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(serializableString25);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version95 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("hi!");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(version95);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        boolean boolean85 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean86 = uTF8StreamJsonParser84.canReadObjectId();
        // The following exception was thrown during execution in test generation
        try {
            float float87 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        char[] charArray80 = textBuffer76.getCurrentSegment();
        java.lang.String str81 = textBuffer76.contentsAsString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "a" + "'", str81, "a");
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        boolean boolean23 = defaultPrettyPrinter21._spacesInObjectEntries;
        defaultPrettyPrinter21._spacesInObjectEntries = true;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectFieldValueSeparator(jsonGenerator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext94 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(jsonStreamContext94);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        char[] charArray87 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.Version version88 = uTF8StreamJsonParser84.version();
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray87);
        org.junit.Assert.assertNotNull(version88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        boolean boolean79 = textBuffer76.hasTextAsCharacters();
        textBuffer76.releaseBuffers();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]", (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.FormatSchema formatSchema96 = null;
        boolean boolean97 = uTF8StreamJsonParser84.canUseSchema(formatSchema96);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        long long93 = uTF8StreamJsonParser84.getValueAsLong(52L);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 52L + "'", long93 == 52L);
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        boolean boolean95 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble(0.0d);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        int int90 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getTypeId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        java.lang.Object obj95 = uTF8StreamJsonParser84.getObjectId();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        char[] charArray81 = textBuffer76.getCurrentSegment();
        // The following exception was thrown during execution in test generation
        try {
            double double82 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"a\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getInputSource();
        boolean boolean91 = uTF8StreamJsonParser84.isClosed();
        com.fasterxml.jackson.core.JsonParser.Feature feature92 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser93 = uTF8StreamJsonParser84.disable(feature92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        mergedStream64.mark(1);
        long long91 = mergedStream64.skip(0L);
        mergedStream64.mark(63);
        int int94 = mergedStream64.available();
        // The following exception was thrown during execution in test generation
        try {
            mergedStream64.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        textBuffer76.resetWithEmpty();
        char[] charArray79 = textBuffer76.getTextBuffer();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertNull(charArray79);
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        boolean boolean2 = com.fasterxml.jackson.core.io.NumberInput.inLongRange("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getText();
        boolean boolean91 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        boolean boolean84 = textBuffer76.hasTextAsCharacters();
        textBuffer76.ensureNotShared();
        java.lang.String str86 = textBuffer76.toString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "a" + "'", str86, "a");
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        java.lang.String str89 = uTF8StreamJsonParser84.getValueAsString("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder90 = uTF8StreamJsonParser84._getByteArrayBuilder();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getLastClearedToken();
        int int92 = uTF8StreamJsonParser84.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(byteArrayBuilder90);
        org.junit.Assert.assertNull(jsonToken91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = null;
        boolean boolean90 = uTF8StreamJsonParser84.canUseSchema(formatSchema89);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal91 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        java.lang.String str2 = serializedString1.getValue();
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray9 = new char[] { 'a', ' ', '#', '4' };
        int int11 = serializedString4.appendUnquoted(charArray9, 0);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int20 = serializedString4.appendUnquotedUTF8(byteArray18, (int) (short) -1);
        byte[] byteArray21 = serializedString4.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString23 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int30 = serializedString23.appendQuotedUTF8(byteArray28, 0);
        char[] charArray31 = serializedString23.asQuotedChars();
        int int33 = serializedString4.appendQuoted(charArray31, 63);
        byte[] byteArray34 = serializedString4.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray41 = new char[] { 'a', ' ', '#', '4' };
        int int43 = serializedString36.appendUnquoted(charArray41, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray50 = new char[] { 'a', ' ', '#', '4' };
        int int52 = serializedString45.appendUnquoted(charArray50, 0);
        boolean boolean53 = serializedString36.equals((java.lang.Object) serializedString45);
        char[] charArray54 = serializedString36.asQuotedChars();
        boolean boolean58 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray54, (int) (byte) 10, 10, true);
        int int61 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray54, (int) (byte) 1, 0);
        int int63 = serializedString4.appendQuoted(charArray54, 0);
        int int65 = serializedString1.appendQuoted(charArray54, (int) '4');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str2, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 63 + "'", int61 == 63);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 47 + "'", int63 == 47);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        java.io.OutputStream outputStream92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int93 = uTF8StreamJsonParser84.releaseBuffered(outputStream92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        char[] charArray80 = textBuffer76.getCurrentSegment();
        char[] charArray81 = textBuffer76.contentsAsArray();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a]");
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        boolean boolean85 = uTF8StreamJsonParser84.hasTextCharacters();
        char[] charArray86 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext87 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext88 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(charArray86);
        org.junit.Assert.assertNotNull(jsonReadContext87);
        org.junit.Assert.assertNotNull(jsonStreamContext88);
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext24 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext27 = jsonReadContext24.createChildArrayContext((int) (short) 1, 10);
        boolean boolean28 = jsonReadContext27.inArray();
        boolean boolean29 = serializedString20.equals((java.lang.Object) boolean28);
        char[] charArray30 = serializedString20.asQuotedChars();
        int int32 = serializedString1.appendUnquoted(charArray30, 13);
        char[] charArray33 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray33, (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext24);
        org.junit.Assert.assertNotNull(jsonReadContext27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.Object obj94 = uTF8StreamJsonParser84.getObjectId();
        boolean boolean95 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        int int93 = uTF8StreamJsonParser84.getValueAsInt(0);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(jsonStreamContext91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        byte[] byteArray57 = null;
        iOContext12.releaseBase64Buffer(byteArray57);
        java.lang.Object obj59 = iOContext12.getSourceReference();
        boolean boolean60 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding61 = iOContext12.getEncoding();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer62 = iOContext12.constructTextBuffer();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray63 = textBuffer62.expandCurrentSegment();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jsonEncoding61);
        org.junit.Assert.assertNotNull(textBuffer62);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.io.SerializedString serializedString6 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray11 = new char[] { 'a', ' ', '#', '4' };
        int int13 = serializedString6.appendUnquoted(charArray11, 0);
        java.lang.String str14 = serializedString6.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation16 = null;
        java.lang.Throwable throwable17 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException18 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation16, throwable17);
        boolean boolean19 = serializedString6.equals((java.lang.Object) jsonLocation16);
        byte[] byteArray20 = serializedString6.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        char[] charArray30 = serializedString22.asQuotedChars();
        int int31 = serializedString22.charLength();
        char[] charArray32 = serializedString22.asQuotedChars();
        int int34 = serializedString6.appendQuoted(charArray32, (int) (short) 1);
        byte[] byteArray35 = serializedString6.asQuotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter36 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter4, (com.fasterxml.jackson.core.SerializableString) serializedString6);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter4.writeEndArray(jsonGenerator37, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str14, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 47 + "'", int31 == 47);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        com.fasterxml.jackson.core.Version version88 = uTF8StreamJsonParser84.version();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble(47.0d);
        boolean boolean91 = uTF8StreamJsonParser84.hasTextCharacters();
        com.fasterxml.jackson.core.JsonParser.Feature feature92 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser94 = uTF8StreamJsonParser84.configure(feature92, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertNotNull(version88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 47.0d + "'", double90 == 47.0d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.emptyAndGetCurrentSegment();
        java.lang.String str78 = textBuffer76.contentsAsString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter50);
        defaultPrettyPrinter51._nesting = (short) -1;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter54 = defaultPrettyPrinter51._objectIndenter;
        defaultPrettyPrinter51._nesting = (short) 10;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(indenter54);
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        defaultPrettyPrinter94._nesting = 34;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter94.writeStartArray(jsonGenerator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.String str89 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        int int89 = uTF8StreamJsonParser84.getTokenLineNr();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter50 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.withArrayIndenter(indenter50);
        com.fasterxml.jackson.core.SerializableString serializableString52 = defaultPrettyPrinter51._rootSeparator;
        com.fasterxml.jackson.core.io.SerializedString serializedString54 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray59 = new char[] { 'a', ' ', '#', '4' };
        int int61 = serializedString54.appendUnquoted(charArray59, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray68 = new char[] { 'a', ' ', '#', '4' };
        int int70 = serializedString63.appendUnquoted(charArray68, 0);
        boolean boolean71 = serializedString54.equals((java.lang.Object) serializedString63);
        char[] charArray78 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean82 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray78, (int) (byte) -1, 0, true);
        int int84 = serializedString54.appendUnquoted(charArray78, (-1));
        byte[] byteArray85 = serializedString54.asUnquotedUTF8();
        int int87 = serializableString52.appendUnquotedUTF8(byteArray85, (int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
        org.junit.Assert.assertNotNull(serializableString52);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 47 + "'", int87 == 47);
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray2 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        java.lang.String str13 = serializedString5.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) serializedString5, false);
        byte[] byteArray16 = null;
        iOContext15.releaseReadIOBuffer(byteArray16);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper29 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray24, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler30 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray37 = new char[] { 'a', ' ', '#', '4' };
        int int39 = serializedString32.appendUnquoted(charArray37, 0);
        java.lang.String str40 = serializedString32.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler30, (java.lang.Object) serializedString32, false);
        byte[] byteArray43 = null;
        iOContext42.releaseReadIOBuffer(byteArray43);
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int53 = serializedString46.appendQuotedUTF8(byteArray51, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext42, byteArray51, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper59 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray51, 47, (int) (byte) 0);
        int int61 = serializedString1.appendQuotedUTF8(byteArray51, (int) '#');
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray68 = new char[] { 'a', ' ', '#', '4' };
        int int70 = serializedString63.appendUnquoted(charArray68, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray77 = new char[] { 'a', ' ', '#', '4' };
        int int79 = serializedString72.appendUnquoted(charArray77, 0);
        boolean boolean80 = serializedString63.equals((java.lang.Object) serializedString72);
        com.fasterxml.jackson.core.io.SerializedString serializedString82 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int89 = serializedString82.appendQuotedUTF8(byteArray87, 0);
        char[] charArray90 = serializedString82.asQuotedChars();
        boolean boolean91 = serializedString63.equals((java.lang.Object) serializedString82);
        char[] charArray92 = serializedString82.asQuotedChars();
        int int94 = serializedString1.appendQuoted(charArray92, 13);
        boolean boolean98 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray92, (int) '4', 0, true);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str13, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str40, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean94 = uTF8StreamJsonParser84.hasTextCharacters();
        int int96 = uTF8StreamJsonParser84.getValueAsInt(72);
        com.fasterxml.jackson.core.JsonToken jsonToken97 = uTF8StreamJsonParser84.getLastClearedToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonReadContext93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 72 + "'", int96 == 72);
        org.junit.Assert.assertNull(jsonToken97);
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        int int91 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        defaultPrettyPrinter22.indentArraysWith(indenter91);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter95 = defaultPrettyPrinter22.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator96 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter95.beforeArrayValues(jsonGenerator96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter95);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        defaultPrettyPrinter94._spacesInObjectEntries = true;
        boolean boolean97 = defaultPrettyPrinter94._spacesInObjectEntries;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter98 = defaultPrettyPrinter94.withSpacesInObjectEntries();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter98);
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getLastClearedToken();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter25.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter31.writeArrayValueSeparator(jsonGenerator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext93 = uTF8StreamJsonParser84.getParsingContext();
        java.lang.Object obj94 = uTF8StreamJsonParser84.getInputSource();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonStreamContext93);
        org.junit.Assert.assertNull(obj94);
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter85.writeRootValueSeparator(jsonGenerator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter25.writeRootValueSeparator(jsonGenerator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int91 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) -1);
        boolean boolean92 = uTF8StreamJsonParser84.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) 10);
        int int92 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonParser jsonParser93 = uTF8StreamJsonParser84.skipChildren();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonParser93);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        // The following exception was thrown during execution in test generation
        try {
            double double1 = com.fasterxml.jackson.core.io.NumberInput.parseDouble("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"com.fasterxml.jackson.core.JsonParseException: ? at [Source: hi!; line: 52, column: 1]\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        long long92 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext93 = uTF8StreamJsonParser84.getParsingContext();
        boolean boolean94 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(jsonReadContext93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream88, false);
        boolean boolean91 = iOContext90.isResourceManaged();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer92 = iOContext90.constructTextBuffer();
        int int93 = textBuffer92.getTextOffset();
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(textBuffer92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        long long90 = uTF8StreamJsonParser84.getValueAsLong(0L);
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean93 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version95 = uTF8StreamJsonParser84.version();
        uTF8StreamJsonParser84.clearCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(version95);
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        int int94 = uTF8StreamJsonParser84.getValueAsInt((int) '#');
        java.lang.String str96 = uTF8StreamJsonParser84.getValueAsString("");
        // The following exception was thrown during execution in test generation
        try {
            long long97 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int34 = serializedString27.appendQuotedUTF8(byteArray32, 0);
        char[] charArray35 = serializedString27.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int44 = serializedString37.appendQuotedUTF8(byteArray42, 0);
        int int46 = serializedString27.appendUnquotedUTF8(byteArray42, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter47 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter48 = defaultPrettyPrinter47._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int57 = serializedString50.appendQuotedUTF8(byteArray55, 0);
        char[] charArray58 = serializedString50.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString60 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int67 = serializedString60.appendQuotedUTF8(byteArray65, 0);
        int int69 = serializedString50.appendUnquotedUTF8(byteArray65, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter70 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString50);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter71 = defaultPrettyPrinter70._objectIndenter;
        defaultPrettyPrinter47.indentObjectsWith(indenter71);
        defaultPrettyPrinter25._objectIndenter = indenter71;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(indenter48);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(indenter71);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int12 = serializedString5.appendQuotedUTF8(byteArray10, 0);
        char[] charArray13 = serializedString5.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        int int24 = serializedString5.appendUnquotedUTF8(byteArray20, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter26 = defaultPrettyPrinter25._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int35 = serializedString28.appendQuotedUTF8(byteArray33, 0);
        char[] charArray36 = serializedString28.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int45 = serializedString38.appendQuotedUTF8(byteArray43, 0);
        int int47 = serializedString28.appendUnquotedUTF8(byteArray43, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter48 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter49 = defaultPrettyPrinter48._objectIndenter;
        defaultPrettyPrinter25.indentObjectsWith(indenter49);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter51 = defaultPrettyPrinter25._arrayIndenter;
        defaultPrettyPrinter1._arrayIndenter = indenter51;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter1.beforeArrayValues(jsonGenerator53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(indenter26);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(indenter49);
        org.junit.Assert.assertNotNull(indenter51);
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        boolean boolean87 = uTF8StreamJsonParser84.requiresCustomCodec();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray88 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) (-1));
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder92 = uTF8StreamJsonParser84._getByteArrayBuilder();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-1.0d) + "'", double91 == (-1.0d));
        org.junit.Assert.assertNotNull(byteArrayBuilder92);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        com.fasterxml.jackson.core.JsonLocation jsonLocation92 = uTF8StreamJsonParser84.getCurrentLocation();
        long long93 = uTF8StreamJsonParser84.getValueAsLong();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        double double96 = uTF8StreamJsonParser84.getValueAsDouble((double) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(jsonLocation92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext24 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext27 = jsonReadContext24.createChildArrayContext((int) (short) 1, 10);
        boolean boolean28 = jsonReadContext27.inArray();
        boolean boolean29 = serializedString20.equals((java.lang.Object) boolean28);
        char[] charArray30 = serializedString20.asQuotedChars();
        int int32 = serializedString1.appendUnquoted(charArray30, 13);
        java.nio.ByteBuffer byteBuffer33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = serializedString1.putQuotedUTF8(byteBuffer33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext24);
        org.junit.Assert.assertNotNull(jsonReadContext27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getLastClearedToken();
        long long93 = uTF8StreamJsonParser84.getValueAsLong((long) 34);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(jsonToken91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 34L + "'", long93 == 34L);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonToken jsonToken87 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number88 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken87);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 47L);
        uTF8StreamJsonParser84.overrideCurrentName("");
        long long95 = uTF8StreamJsonParser84.getValueAsLong(0L);
        java.lang.Object obj96 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int97 = uTF8StreamJsonParser84.getValueAsInt();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 47.0d + "'", double91 == 47.0d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext93 = uTF8StreamJsonParser84.getParsingContext();
        char[] charArray94 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number95 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(jsonStreamContext93);
        org.junit.Assert.assertNull(charArray94);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        java.lang.String str96 = uTF8StreamJsonParser84.getText();
        boolean boolean97 = uTF8StreamJsonParser84.hasCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.JsonParser jsonParser87 = uTF8StreamJsonParser84.skipChildren();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getTypeId();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNotNull(jsonParser87);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean93 = uTF8StreamJsonParser84.hasCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray2 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        java.lang.String str13 = serializedString5.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) serializedString5, false);
        byte[] byteArray16 = null;
        iOContext15.releaseReadIOBuffer(byteArray16);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper29 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray24, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler30 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray37 = new char[] { 'a', ' ', '#', '4' };
        int int39 = serializedString32.appendUnquoted(charArray37, 0);
        java.lang.String str40 = serializedString32.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler30, (java.lang.Object) serializedString32, false);
        byte[] byteArray43 = null;
        iOContext42.releaseReadIOBuffer(byteArray43);
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int53 = serializedString46.appendQuotedUTF8(byteArray51, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext42, byteArray51, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper59 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray51, 47, (int) (byte) 0);
        int int61 = serializedString1.appendQuotedUTF8(byteArray51, (int) '#');
        char[] charArray62 = serializedString1.asQuotedChars();
        java.nio.ByteBuffer byteBuffer63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int64 = serializedString1.putUnquotedUTF8(byteBuffer63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str13, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str40, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        char[] charArray87 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.Version version88 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            float float89 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray87);
        org.junit.Assert.assertNotNull(version88);
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean86 = uTF8StreamJsonParser84.canReadTypeId();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken87 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        int int87 = defaultPrettyPrinter55._nesting;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter88 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter89 = defaultPrettyPrinter55.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter90 = defaultPrettyPrinter89._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter89.writeEndArray(jsonGenerator91, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter88);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter89);
        org.junit.Assert.assertNotNull(indenter90);
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getCurrentLocation();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(jsonLocation91);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        int int91 = uTF8StreamJsonParser84.getTextLength();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.String str92 = uTF8StreamJsonParser84.getValueAsString("");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        java.lang.String str96 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        java.lang.String str98 = uTF8StreamJsonParser84.getValueAsString("[Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str96, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str98, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        double double93 = uTF8StreamJsonParser84.getValueAsDouble(7.3844676736E10d);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 7.3844676736E10d + "'", double93 == 7.3844676736E10d);
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.Version version91 = uTF8StreamJsonParser84.version();
        boolean boolean92 = uTF8StreamJsonParser84.canReadObjectId();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext94 = uTF8StreamJsonParser84.getParsingContext();
        int int95 = uTF8StreamJsonParser84.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(version91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(jsonStreamContext94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        char[] charArray84 = textBuffer76.getCurrentSegment();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
        org.junit.Assert.assertNotNull(charArray84);
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext92 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertNotNull(jsonStreamContext91);
        org.junit.Assert.assertNotNull(jsonStreamContext92);
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.nextIntValue(47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString25 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = defaultPrettyPrinter21.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter27.writeIndentation(jsonGenerator29, 63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(serializableString25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter28);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        int int91 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) 10);
        int int92 = uTF8StreamJsonParser84.getTextLength();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec90 = uTF8StreamJsonParser84.getCodec();
        com.fasterxml.jackson.core.ObjectCodec objectCodec91 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec91);
        boolean boolean94 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }
}

