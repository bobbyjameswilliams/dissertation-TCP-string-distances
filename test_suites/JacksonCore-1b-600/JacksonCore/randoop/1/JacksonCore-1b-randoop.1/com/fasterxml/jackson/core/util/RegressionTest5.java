package com.fasterxml.jackson.core.util;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        byte[] byteArray6 = iOContext3.allocReadIOBuffer();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler7 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext10 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler7, (java.lang.Object) (byte) -1, true);
        java.io.InputStream inputStream11 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec12 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = new com.fasterxml.jackson.core.JsonFactory(objectCodec12);
        com.fasterxml.jackson.core.JsonFactory.Feature feature14 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = feature14.enabledIn(3);
        boolean boolean17 = jsonFactory13.isEnabled(feature14);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory13.disable(feature18);
        java.io.OutputStream outputStream20 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator21 = jsonFactory13.createGenerator(outputStream20);
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        byte[] byteArray23 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext22, byteArray23, 0, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser29 = jsonFactory13.createJsonParser(byteArray23, 1, (int) (short) 100);
        com.fasterxml.jackson.core.ObjectCodec objectCodec30 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = new com.fasterxml.jackson.core.JsonFactory(objectCodec30);
        com.fasterxml.jackson.core.JsonFactory.Feature feature32 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean34 = feature32.enabledIn(3);
        boolean boolean35 = jsonFactory31.isEnabled(feature32);
        com.fasterxml.jackson.core.JsonParser.Feature feature36 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = jsonFactory31.disable(feature36);
        java.io.OutputStream outputStream38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory31.createGenerator(outputStream38);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        byte[] byteArray41 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper44 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray41, 0, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser47 = jsonFactory31.createJsonParser(byteArray41, 1, (int) (short) 100);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("hi!");
        com.fasterxml.jackson.core.SerializableString serializableString50 = defaultPrettyPrinter49._rootSeparator;
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 0, (byte) -1, (byte) 1, (byte) 1, (byte) 1 };
        int int59 = serializableString50.appendQuotedUTF8(byteArray57, (int) (byte) 100);
        com.fasterxml.jackson.core.JsonParser jsonParser60 = jsonFactory31.createJsonParser(byteArray57);
        com.fasterxml.jackson.core.JsonParser jsonParser63 = jsonFactory13.createJsonParser(byteArray57, 64, 1);
        com.fasterxml.jackson.core.io.MergedStream mergedStream66 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray57, 10, 2000);
        com.fasterxml.jackson.core.ObjectCodec objectCodec67 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory68 = new com.fasterxml.jackson.core.JsonFactory(objectCodec67);
        com.fasterxml.jackson.core.JsonFactory.Feature feature69 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean71 = feature69.enabledIn(3);
        boolean boolean72 = jsonFactory68.isEnabled(feature69);
        com.fasterxml.jackson.core.JsonParser.Feature feature73 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory74 = jsonFactory68.disable(feature73);
        java.io.OutputStream outputStream75 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = jsonFactory68.createGenerator(outputStream75);
        com.fasterxml.jackson.core.io.IOContext iOContext77 = null;
        byte[] byteArray78 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper81 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext77, byteArray78, 0, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser84 = jsonFactory68.createJsonParser(byteArray78, 1, (int) (short) 100);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, (java.io.InputStream) mergedStream66, byteArray78, (int) (short) -1, 1000, true);
        mergedStream66.mark(64);
        boolean boolean91 = mergedStream66.markSupported();
        mergedStream66.reset();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature14.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertNotNull(jsonGenerator21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
        org.junit.Assert.assertNotNull(jsonParser29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature32.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature36.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory37);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
        org.junit.Assert.assertNotNull(jsonParser47);
        org.junit.Assert.assertNotNull(serializableString50);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 0, -1, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(jsonParser60);
        org.junit.Assert.assertNotNull(jsonParser63);
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature69.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature73.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory74);
        org.junit.Assert.assertNotNull(jsonGenerator76);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
        org.junit.Assert.assertNotNull(jsonParser84);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = com.fasterxml.jackson.core.io.NumberInput.parseInt("com.fasterxml.jackson.core.JsonParseException: \n\n at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"com.fasterxml.jackson.core.JsonParseException: ?? at [Source: CANONICALIZE_FIELD_NAMES; line: 10, column: 100]\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer13 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext11, outputStream12);
        uTF8Writer13.flush();
        java.io.Writer writer16 = uTF8Writer13.append('a');
        com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator17 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext3, (-1959034571), objectCodec7, (java.io.Writer) uTF8Writer13);
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = writerBasedJsonGenerator17.getCodec();
        writerBasedJsonGenerator17.writeNumber((short) (byte) 0);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonFactory.Feature feature23 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean25 = feature23.enabledIn(3);
        boolean boolean26 = jsonFactory22.isEnabled(feature23);
        com.fasterxml.jackson.core.ObjectCodec objectCodec27 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory28 = new com.fasterxml.jackson.core.JsonFactory(objectCodec27);
        com.fasterxml.jackson.core.JsonFactory.Feature feature29 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean31 = feature29.enabledIn(3);
        boolean boolean32 = jsonFactory28.isEnabled(feature29);
        com.fasterxml.jackson.core.JsonParser.Feature feature33 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory28.disable(feature33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = jsonFactory22.disable(feature33);
        com.fasterxml.jackson.core.JsonFactory.Feature feature36 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonLocation jsonLocation41 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) feature36, 0L, (long) (byte) 1, 10, (int) (short) -1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = jsonFactory35.configure(feature36, true);
        byte[] byteArray44 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser47 = jsonFactory43.createParser(byteArray44, (-1111897306), 0);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature48 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        int int49 = feature48.getMask();
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory43.configure(feature48, false);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = writerBasedJsonGenerator17.disable(feature48);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNull(objectCodec18);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature23.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature29.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature33.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonFactory35);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature36.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory43);
        org.junit.Assert.assertNotNull(jsonParser47);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature48.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(jsonGenerator52);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder15 = readerBasedJsonParser14._getByteArrayBuilder();
        readerBasedJsonParser14.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken17 = readerBasedJsonParser14.nextValue();
        java.lang.String str18 = readerBasedJsonParser14.getCurrentName();
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1057285810) + "'", int13 == (-1057285810));
        org.junit.Assert.assertNotNull(byteArrayBuilder15);
        org.junit.Assert.assertNull(jsonToken17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        readerBasedJsonParser14.close();
        java.lang.String str17 = readerBasedJsonParser14.nextTextValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation18 = readerBasedJsonParser14.getCurrentLocation();
        java.lang.String str19 = jsonLocation18.toString();
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-782769716) + "'", int13 == (-782769716));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(jsonLocation18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[Source: -1; line: 1, column: 1]" + "'", str19, "[Source: -1; line: 1, column: 1]");
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder15 = readerBasedJsonParser14._getByteArrayBuilder();
        long long16 = readerBasedJsonParser14.getTokenCharacterOffset();
        boolean boolean18 = readerBasedJsonParser14.getValueAsBoolean(false);
        com.fasterxml.jackson.core.JsonLocation jsonLocation19 = readerBasedJsonParser14.getTokenLocation();
        long long20 = readerBasedJsonParser14.getValueAsLong();
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 78208930 + "'", int13 == 78208930);
        org.junit.Assert.assertNotNull(byteArrayBuilder15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonLocation19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) -1, true);
        java.io.OutputStream outputStream4 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer5 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext3, outputStream4);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext3.setEncoding(jsonEncoding6);
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("false");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1954973613), reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getTextOffset();
        java.lang.String str16 = readerBasedJsonParser14.getText();
        char[] charArray17 = readerBasedJsonParser14.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken18 = readerBasedJsonParser14.getLastClearedToken();
        boolean boolean19 = readerBasedJsonParser14.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean20 = readerBasedJsonParser14.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonEncoding6 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding6.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 342799090 + "'", int13 == 342799090);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(charArray17);
        org.junit.Assert.assertNull(jsonToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        char[] charArray1 = new char[] { ' ' };
        // The following exception was thrown during execution in test generation
        try {
            long long4 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray1, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        char[] charArray6 = new char[] { 'a', 'a', '4', ' ', ' ', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal7 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "aa4  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "aa4  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, a, 4,  ,  , #]");
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        char[] charArray5 = new char[] { '4', 'a', '4', '#', ' ' };
        int int8 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray5, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray5, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4a4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4a4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        char[] charArray5 = new char[] { '4', 'a', '4', '#', ' ' };
        int int8 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray5, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray5, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4a4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4a4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("", (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        char[] charArray5 = new char[] { '4', 'a', '4', '#', ' ' };
        int int8 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray5, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray5, (int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4a4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4a4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("com.fasterxml.jackson.core.JsonParseException: ", (long) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("", 1L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        char[] charArray5 = new char[] { '4', 'a', '4', '#', ' ' };
        int int8 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray5, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal11 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray5, 1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4a4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4a4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        boolean boolean2 = com.fasterxml.jackson.core.io.NumberInput.inLongRange("com.fasterxml.jackson.core.JsonParseException: ", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = com.fasterxml.jackson.core.io.NumberInput.parseLong("com.fasterxml.jackson.core.JsonParseException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"com.fasterxml.jackson.core.JsonParseException: \"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal11 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray6, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal12 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray9, (int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        char[] charArray0 = null;
        boolean boolean4 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray0, (-1), 0, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        char[] charArray6 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean10 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray6, (int) (byte) -1, 0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal13 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray6, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        // The following exception was thrown during execution in test generation
        try {
            double double1 = com.fasterxml.jackson.core.io.NumberInput.parseDouble("");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        java.nio.ByteBuffer byteBuffer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = serializedString1.putQuotedUTF8(byteBuffer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        double double2 = com.fasterxml.jackson.core.io.NumberInput.parseAsDouble("", 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = serializedString1.writeQuotedUTF8(outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        java.nio.ByteBuffer byteBuffer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int11 = serializedString1.putUnquotedUTF8(byteBuffer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("", (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray33 = new char[] { 'a', ' ', '#', '4' };
        int int35 = serializedString28.appendUnquoted(charArray33, 0);
        java.lang.String str36 = serializedString28.getValue();
        char[] charArray37 = serializedString28.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseConcatBuffer(charArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str36, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        char[] charArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = serializedString1.appendQuoted(charArray11, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        double double2 = com.fasterxml.jackson.core.io.NumberInput.parseAsDouble("hi!", 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = com.fasterxml.jackson.core.io.NumberInput.parseLong("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"hi!\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        char[] charArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray0, 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        byte[] byteArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int32 = serializedString20.appendQuotedUTF8(byteArray30, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = serializedString1.writeUnquotedUTF8(outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int35 = serializedString28.appendQuotedUTF8(byteArray33, 0);
        char[] charArray36 = serializedString28.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseTokenBuffer(charArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        byte[] byteArray15 = null;
        iOContext12.releaseWriteEncodingBuffer(byteArray15);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray23 = new char[] { 'a', ' ', '#', '4' };
        int int25 = serializedString18.appendUnquoted(charArray23, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray32 = new char[] { 'a', ' ', '#', '4' };
        int int34 = serializedString27.appendUnquoted(charArray32, 0);
        boolean boolean35 = serializedString18.equals((java.lang.Object) serializedString27);
        char[] charArray36 = serializedString18.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseTokenBuffer(charArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal1 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal("com.fasterxml.jackson.core.JsonParseException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("", 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        com.fasterxml.jackson.core.ObjectCodec objectCodec89 = null;
        java.io.Writer writer90 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.WriterBasedJsonGenerator writerBasedJsonGenerator91 = new com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(iOContext12, (int) '#', objectCodec89, writer90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator22, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator47, 34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeArrayValues(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeRootValueSeparator(jsonGenerator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartObject(jsonGenerator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator50, 34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        java.io.Reader reader89 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec90 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser92 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, 0, reader89, objectCodec90, charsToNameCanonicalizer91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter49.writeRootValueSeparator(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeArrayValues(jsonGenerator95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal46 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray43, 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        byte[] byteArray57 = null;
        iOContext12.releaseBase64Buffer(byteArray57);
        java.lang.Object obj59 = iOContext12.getSourceReference();
        java.io.Reader reader61 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec62 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer63 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser64 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) 'a', reader61, objectCodec62, charsToNameCanonicalizer63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString50 = defaultPrettyPrinter21._rootSeparator;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(serializableString50);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            indenter91.writeIndentation(jsonGenerator95, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter94.writeRootValueSeparator(jsonGenerator95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            indenter91.writeIndentation(jsonGenerator95, 34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator95, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = com.fasterxml.jackson.core.io.NumberInput.parseInt("[Source: hi!; line: 52, column: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"[Source: hi!; line: 52, column: 1]\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        defaultPrettyPrinter94._spacesInObjectEntries = true;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter94.writeEndArray(jsonGenerator97, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("[Source: hi!; line: 52, column: 1]", (long) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray25 = new char[] { 'a', ' ', '#', '4' };
        int int27 = serializedString20.appendUnquoted(charArray25, 0);
        java.lang.String str28 = serializedString20.getValue();
        char[] charArray29 = serializedString20.asQuotedChars();
        char[] charArray30 = serializedString20.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = serializedString1.appendUnquoted(charArray30, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str28, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartObject(jsonGenerator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeArrayValues(jsonGenerator74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator71 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartArray(jsonGenerator71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartObject(jsonGenerator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        char[] charArray6 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean10 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray6, (int) (byte) -1, 0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal13 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray6, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeStartArray(jsonGenerator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter23.beforeObjectEntries(jsonGenerator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("[Source: hi!; line: 52, column: 1]", 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator23, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        java.io.Reader reader89 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec90 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser92 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) (short) 1, reader89, objectCodec90, charsToNameCanonicalizer91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        defaultPrettyPrinter94._nesting = 34;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter94.writeObjectEntrySeparator(jsonGenerator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartArray(jsonGenerator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter22.beforeObjectEntries(jsonGenerator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter73 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            indenter73.writeIndentation(jsonGenerator74, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(indenter73);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter23.writeEndArray(jsonGenerator24, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator95, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int16 = serializedString1.appendUnquotedUTF8(byteArray14, (int) (short) 10);
        java.nio.ByteBuffer byteBuffer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = serializedString1.putUnquotedUTF8(byteBuffer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext1 = null;
        java.io.InputStream inputStream2 = null;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext1, inputStream2, byteArray5, 0, (int) '#');
        com.fasterxml.jackson.core.io.IOContext iOContext10 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) inputStream2, true);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        java.lang.String str20 = serializedString12.getValue();
        char[] charArray21 = serializedString12.asQuotedChars();
        byte[] byteArray22 = serializedString12.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            iOContext10.releaseReadIOBuffer(byteArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 0]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str20, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        com.fasterxml.jackson.core.JsonLocation jsonLocation47 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) '#', (long) 47, 1L, (int) (byte) 1, (int) (short) 1);
        java.lang.String str48 = jsonLocation47.toString();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[Source: #; line: 1, column: 1]" + "'", str48, "[Source: #; line: 1, column: 1]");
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        int int73 = defaultPrettyPrinter21._nesting;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartArray(jsonGenerator74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        // The following exception was thrown during execution in test generation
        try {
            long long89 = mergedStream87.skip((long) 34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter73.writeObjectEntrySeparator(jsonGenerator74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            indenter45.writeIndentation(jsonGenerator47, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray33 = new char[] { 'a', ' ', '#', '4' };
        int int35 = serializedString28.appendUnquoted(charArray33, 0);
        java.lang.String str36 = serializedString28.getValue();
        char[] charArray37 = serializedString28.asQuotedChars();
        byte[] byteArray38 = serializedString28.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseReadIOBuffer(byteArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str36, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        byte[] byteArray57 = null;
        iOContext12.releaseBase64Buffer(byteArray57);
        java.lang.Object obj59 = iOContext12.getSourceReference();
        boolean boolean60 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding61 = iOContext12.getEncoding();
        char[] charArray62 = null;
        iOContext12.releaseConcatBuffer(charArray62);
        com.fasterxml.jackson.core.io.SerializedString serializedString65 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int72 = serializedString65.appendQuotedUTF8(byteArray70, 0);
        char[] charArray73 = serializedString65.asQuotedChars();
        int int74 = serializedString65.charLength();
        char[] charArray75 = serializedString65.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseTokenBuffer(charArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jsonEncoding61);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 47 + "'", int74 == 47);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray30 = serializedString20.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray37 = new char[] { 'a', ' ', '#', '4' };
        int int39 = serializedString32.appendUnquoted(charArray37, 0);
        java.lang.String str40 = serializedString32.getValue();
        char[] charArray41 = serializedString32.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = serializedString20.appendUnquoted(charArray41, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str40, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator24, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter23.writeObjectFieldValueSeparator(jsonGenerator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        boolean boolean71 = indenter68.isInline();
        boolean boolean72 = indenter68.isInline();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = null;
        // The following exception was thrown during execution in test generation
        try {
            indenter68.writeIndentation(jsonGenerator73, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeRootValueSeparator(jsonGenerator73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray30 = serializedString20.asQuotedChars();
        long long33 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray30, 10, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray30, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 73844676736L + "'", long33 == 73844676736L);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator23, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter22.writeEndObject(jsonGenerator23, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            indenter22.writeIndentation(jsonGenerator23, 34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter23.beforeObjectEntries(jsonGenerator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler16 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray23 = new char[] { 'a', ' ', '#', '4' };
        int int25 = serializedString18.appendUnquoted(charArray23, 0);
        java.lang.String str26 = serializedString18.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext28 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler16, (java.lang.Object) serializedString18, false);
        byte[] byteArray29 = null;
        iOContext28.releaseReadIOBuffer(byteArray29);
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int39 = serializedString32.appendQuotedUTF8(byteArray37, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper42 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext28, byteArray37, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding43 = byteSourceJsonBootstrapper42.detectEncoding();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding44 = byteSourceJsonBootstrapper42.detectEncoding();
        java.io.Reader reader45 = byteSourceJsonBootstrapper42.constructReader();
        com.fasterxml.jackson.core.ObjectCodec objectCodec46 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer47 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) (short) 1, reader45, objectCodec46, charsToNameCanonicalizer47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str26, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + jsonEncoding43 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding43.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertTrue("'" + jsonEncoding44 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding44.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(reader45);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        com.fasterxml.jackson.core.JsonLocation jsonLocation75 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) defaultPrettyPrinter21, (long) (byte) 100, (long) (byte) -1, 13, 13);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter85.writeStartObject(jsonGenerator88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        java.io.OutputStream outputStream3 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray19 = new char[] { 'a', ' ', '#', '4' };
        int int21 = serializedString14.appendUnquoted(charArray19, 0);
        boolean boolean22 = serializedString5.equals((java.lang.Object) serializedString14);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        int int45 = serializedString14.appendQuotedUTF8(byteArray39, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator48 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext0, 35, objectCodec2, outputStream3, byteArray39, 35, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.SerializableString serializableString85 = defaultPrettyPrinter55._rootSeparator;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeObjectFieldValueSeparator(jsonGenerator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serializableString85);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        // The following exception was thrown during execution in test generation
        try {
            double double1 = com.fasterxml.jackson.core.io.NumberInput.parseDouble("com.fasterxml.jackson.core.JsonParseException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"com.fasterxml.jackson.core.JsonParseException:\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        java.nio.ByteBuffer byteBuffer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int23 = serializedString1.putQuotedUTF8(byteBuffer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        char[] charArray13 = serializedString2.asQuotedChars();
        boolean boolean17 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray13, (int) (short) 0, (int) (short) 10, true);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator71 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator74, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        char[] charArray81 = new char[] { '4', 'a', '4', '#', ' ' };
        int int84 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray81, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseTokenBuffer(charArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "4a4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "4a4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[4, a, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        boolean boolean23 = defaultPrettyPrinter21._spacesInObjectEntries;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        char[] charArray25 = serializedString17.asQuotedChars();
        int int26 = serializedString17.charLength();
        char[] charArray27 = serializedString17.asQuotedChars();
        int int29 = serializedString1.appendQuoted(charArray27, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray36 = new char[] { 'a', ' ', '#', '4' };
        int int38 = serializedString31.appendUnquoted(charArray36, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray45 = new char[] { 'a', ' ', '#', '4' };
        int int47 = serializedString40.appendUnquoted(charArray45, 0);
        boolean boolean48 = serializedString31.equals((java.lang.Object) serializedString40);
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray51 = serializedString50.asUnquotedUTF8();
        int int53 = serializedString31.appendQuotedUTF8(byteArray51, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray60 = new char[] { 'a', ' ', '#', '4' };
        int int62 = serializedString55.appendUnquoted(charArray60, 0);
        int int64 = serializedString31.appendUnquoted(charArray60, (int) 'a');
        int int66 = serializedString1.appendQuoted(charArray60, (int) ' ');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 47 + "'", int26 == 47);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter73.writeEndObject(jsonGenerator74, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator23, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("hi!", (long) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter85.writeEndArray(jsonGenerator86, 63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter24.writeObjectFieldValueSeparator(jsonGenerator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        java.lang.String str2 = serializedString1.getValue();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        java.lang.String str13 = serializedString5.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) serializedString5, false);
        byte[] byteArray16 = null;
        iOContext15.releaseReadIOBuffer(byteArray16);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper29 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray24, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler30 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray37 = new char[] { 'a', ' ', '#', '4' };
        int int39 = serializedString32.appendUnquoted(charArray37, 0);
        java.lang.String str40 = serializedString32.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler30, (java.lang.Object) serializedString32, false);
        byte[] byteArray43 = null;
        iOContext42.releaseReadIOBuffer(byteArray43);
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int53 = serializedString46.appendQuotedUTF8(byteArray51, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext42, byteArray51, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper59 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray51, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext60 = null;
        java.io.InputStream inputStream61 = null;
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext60, inputStream61, byteArray64, 0, (int) '#');
        mergedStream67.mark((int) (short) 10);
        mergedStream67.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int79 = serializedString72.appendQuotedUTF8(byteArray77, 0);
        char[] charArray80 = serializedString72.asQuotedChars();
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int87 = serializedString72.appendUnquotedUTF8(byteArray85, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream90 = new com.fasterxml.jackson.core.io.MergedStream(iOContext15, (java.io.InputStream) mergedStream67, byteArray85, (int) ' ', 34);
        int int92 = serializedString1.appendQuotedUTF8(byteArray85, 35);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str2, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str13, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str40, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        java.nio.ByteBuffer byteBuffer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = serializedString1.putUnquotedUTF8(byteBuffer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeRootValueSeparator(jsonGenerator95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = serializedString1.writeQuotedUTF8(outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.io.SerializedString serializedString77 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray78 = serializedString77.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext81 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext84 = jsonReadContext81.createChildArrayContext((int) (short) 1, 10);
        boolean boolean85 = jsonReadContext84.inArray();
        boolean boolean86 = serializedString77.equals((java.lang.Object) boolean85);
        char[] charArray87 = serializedString77.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int88 = uTF32Reader75.read(charArray87);
            org.junit.Assert.fail("Expected exception of type java.io.CharConversionException; message: Invalid UTF-32 character 0x2e6d6f63(above 10ffff)  at char #0, byte #3)");
        } catch (java.io.CharConversionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext81);
        org.junit.Assert.assertNotNull(jsonReadContext84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.beforeArrayValues(jsonGenerator87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        char[] charArray3 = new char[] { '4', 'a', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal6 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray3, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, a, #]");
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("", (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream88, false);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray92 = iOContext90.allocNameCopyBuffer((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("[Source: hi!; line: 52, column: 1]", (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.SerializableString serializableString22 = defaultPrettyPrinter21._rootSeparator;
        defaultPrettyPrinter21._spacesInObjectEntries = false;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(serializableString22);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator95, 63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        boolean boolean2 = com.fasterxml.jackson.core.io.NumberInput.inLongRange("hi!", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal1 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal("[Source: hi!; line: 52, column: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        // The following exception was thrown during execution in test generation
        try {
            double double1 = com.fasterxml.jackson.core.io.NumberInput.parseDouble("[Source: #; line: 1, column: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"[Source: #; line: 1, column: 1]\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.SerializableString serializableString85 = defaultPrettyPrinter55._rootSeparator;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeStartObject(jsonGenerator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serializableString85);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        byte[] byteArray15 = null;
        iOContext12.releaseWriteEncodingBuffer(byteArray15);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler17 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray24 = new char[] { 'a', ' ', '#', '4' };
        int int26 = serializedString19.appendUnquoted(charArray24, 0);
        java.lang.String str27 = serializedString19.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext29 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler17, (java.lang.Object) serializedString19, false);
        byte[] byteArray30 = null;
        iOContext29.releaseReadIOBuffer(byteArray30);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler32 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray39 = new char[] { 'a', ' ', '#', '4' };
        int int41 = serializedString34.appendUnquoted(charArray39, 0);
        java.lang.String str42 = serializedString34.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext44 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler32, (java.lang.Object) serializedString34, false);
        byte[] byteArray45 = null;
        iOContext44.releaseReadIOBuffer(byteArray45);
        com.fasterxml.jackson.core.io.SerializedString serializedString48 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int55 = serializedString48.appendQuotedUTF8(byteArray53, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper58 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext44, byteArray53, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding59 = byteSourceJsonBootstrapper58.detectEncoding();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding60 = byteSourceJsonBootstrapper58.detectEncoding();
        iOContext29.setEncoding(jsonEncoding60);
        iOContext12.setEncoding(jsonEncoding60);
        com.fasterxml.jackson.core.io.SerializedString serializedString64 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray69 = new char[] { 'a', ' ', '#', '4' };
        int int71 = serializedString64.appendUnquoted(charArray69, 0);
        java.lang.String str72 = serializedString64.getValue();
        char[] charArray73 = serializedString64.asQuotedChars();
        char[] charArray74 = serializedString64.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseTokenBuffer(charArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str27, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + jsonEncoding59 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding59.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertTrue("'" + jsonEncoding60 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding60.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str72, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter87 = defaultPrettyPrinter55.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeEndObject(jsonGenerator88, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter87);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler22 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray29 = new char[] { 'a', ' ', '#', '4' };
        int int31 = serializedString24.appendUnquoted(charArray29, 0);
        java.lang.String str32 = serializedString24.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler22, (java.lang.Object) serializedString24, false);
        byte[] byteArray35 = null;
        iOContext34.releaseReadIOBuffer(byteArray35);
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int45 = serializedString38.appendQuotedUTF8(byteArray43, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper48 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext34, byteArray43, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler49 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString51 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray56 = new char[] { 'a', ' ', '#', '4' };
        int int58 = serializedString51.appendUnquoted(charArray56, 0);
        java.lang.String str59 = serializedString51.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext61 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler49, (java.lang.Object) serializedString51, false);
        byte[] byteArray62 = null;
        iOContext61.releaseReadIOBuffer(byteArray62);
        com.fasterxml.jackson.core.io.SerializedString serializedString65 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int72 = serializedString65.appendQuotedUTF8(byteArray70, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper75 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext61, byteArray70, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper78 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext34, byteArray70, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream86 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray83, 0, (int) '#');
        long long88 = mergedStream86.skip((long) (short) 1);
        int int89 = mergedStream86.available();
        mergedStream86.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString93 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray94 = serializedString93.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream97 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, (java.io.InputStream) mergedStream86, byteArray94, (int) (short) 100, (int) (short) -1);
        int int99 = serializedString1.appendQuotedUTF8(byteArray94, (int) '4');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str32, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str59, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 34 + "'", int89 == 34);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeEndArray(jsonGenerator86, 34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartArray(jsonGenerator95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        java.lang.Object obj11 = null;
        boolean boolean12 = serializedString1.equals(obj11);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        char[] charArray11 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray11, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndArray(jsonGenerator23, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        double double2 = com.fasterxml.jackson.core.io.NumberInput.parseAsDouble("[Source: hi!; line: 52, column: 1]", (double) (short) -1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        boolean boolean2 = com.fasterxml.jackson.core.io.NumberInput.inLongRange("[Source: #; line: 1, column: 1]", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray19 = serializedString1.asQuotedChars();
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = serializedString1.writeQuotedUTF8(outputStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter85.writeObjectEntrySeparator(jsonGenerator88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray42 = new char[] { 'a', ' ', '#', '4' };
        int int44 = serializedString37.appendUnquoted(charArray42, 0);
        java.lang.String str45 = serializedString37.getValue();
        char[] charArray46 = serializedString37.asQuotedChars();
        byte[] byteArray47 = serializedString37.asUnquotedUTF8();
        int int49 = serializedString1.appendQuotedUTF8(byteArray47, (int) (short) 0);
        java.nio.ByteBuffer byteBuffer50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int51 = serializedString1.putQuotedUTF8(byteBuffer50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str45, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 47 + "'", int49 == 47);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int16 = serializedString1.appendUnquotedUTF8(byteArray14, (int) (short) 10);
        byte[] byteArray17 = serializedString1.asQuotedUTF8();
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = serializedString1.writeUnquotedUTF8(outputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter24.writeEndObject(jsonGenerator25, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int79 = serializedString72.appendQuotedUTF8(byteArray77, 0);
        char[] charArray80 = serializedString72.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString82 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int89 = serializedString82.appendQuotedUTF8(byteArray87, 0);
        int int91 = serializedString72.appendUnquotedUTF8(byteArray87, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter92 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString72);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter93 = defaultPrettyPrinter92._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter92.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter92._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter96 = defaultPrettyPrinter92._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter97 = defaultPrettyPrinter21.withArrayIndenter(indenter96);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator98 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeArrayValues(jsonGenerator98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(indenter93);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
        org.junit.Assert.assertNotNull(indenter96);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter97);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        defaultPrettyPrinter94._spacesInObjectEntries = true;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter94.writeEndArray(jsonGenerator97, 63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeEndObject(jsonGenerator86, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        boolean boolean76 = iOContext12.isResourceManaged();
        java.io.Reader reader78 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer80 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser81 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) (short) 0, reader78, objectCodec79, charsToNameCanonicalizer80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter23.writeStartObject(jsonGenerator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        mergedStream64.mark(1);
        long long91 = mergedStream64.skip(0L);
        int int92 = mergedStream64.available();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartObject(jsonGenerator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation7 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) "hi!", 0L, (long) (-1), (int) '4', (int) (byte) 1);
        com.fasterxml.jackson.core.JsonParseException jsonParseException8 = new com.fasterxml.jackson.core.JsonParseException("com.fasterxml.jackson.core.JsonParseException: ", jsonLocation7);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) "com.fasterxml.jackson.core.JsonParseException: ", true);
        java.io.Reader reader12 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser15 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext10, (int) '4', reader12, objectCodec13, charsToNameCanonicalizer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        byte[] byteArray18 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        int int30 = serializedString1.appendQuoted(charArray28, 63);
        com.fasterxml.jackson.core.JsonLocation jsonLocation34 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) 63, (long) (short) 1, (int) (byte) -1, 0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        boolean boolean86 = defaultPrettyPrinter85._spacesInObjectEntries;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter85.writeStartObject(jsonGenerator87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        java.nio.ByteBuffer byteBuffer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = serializedString1.putQuotedUTF8(byteBuffer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int57 = serializedString50.appendQuotedUTF8(byteArray55, 0);
        char[] charArray58 = serializedString50.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString60 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int67 = serializedString60.appendQuotedUTF8(byteArray65, 0);
        int int69 = serializedString50.appendUnquotedUTF8(byteArray65, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter70 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString50);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter71 = defaultPrettyPrinter70._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString73 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int80 = serializedString73.appendQuotedUTF8(byteArray78, 0);
        char[] charArray81 = serializedString73.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString83 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int90 = serializedString83.appendQuotedUTF8(byteArray88, 0);
        int int92 = serializedString73.appendUnquotedUTF8(byteArray88, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter93 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString73);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter94 = defaultPrettyPrinter93._objectIndenter;
        defaultPrettyPrinter70.indentObjectsWith(indenter94);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter96 = defaultPrettyPrinter21.withObjectIndenter(indenter94);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(indenter71);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(indenter94);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter96);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        char[] charArray35 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal38 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray35, (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray2 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        java.lang.String str13 = serializedString5.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) serializedString5, false);
        byte[] byteArray16 = null;
        iOContext15.releaseReadIOBuffer(byteArray16);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper29 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray24, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler30 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray37 = new char[] { 'a', ' ', '#', '4' };
        int int39 = serializedString32.appendUnquoted(charArray37, 0);
        java.lang.String str40 = serializedString32.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler30, (java.lang.Object) serializedString32, false);
        byte[] byteArray43 = null;
        iOContext42.releaseReadIOBuffer(byteArray43);
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int53 = serializedString46.appendQuotedUTF8(byteArray51, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext42, byteArray51, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper59 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray51, 47, (int) (byte) 0);
        int int61 = serializedString1.appendQuotedUTF8(byteArray51, (int) '#');
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray68 = new char[] { 'a', ' ', '#', '4' };
        int int70 = serializedString63.appendUnquoted(charArray68, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray77 = new char[] { 'a', ' ', '#', '4' };
        int int79 = serializedString72.appendUnquoted(charArray77, 0);
        boolean boolean80 = serializedString63.equals((java.lang.Object) serializedString72);
        com.fasterxml.jackson.core.io.SerializedString serializedString82 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int89 = serializedString82.appendQuotedUTF8(byteArray87, 0);
        char[] charArray90 = serializedString82.asQuotedChars();
        boolean boolean91 = serializedString63.equals((java.lang.Object) serializedString82);
        char[] charArray92 = serializedString82.asQuotedChars();
        int int94 = serializedString1.appendQuoted(charArray92, 13);
        // The following exception was thrown during execution in test generation
        try {
            long long97 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray92, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str13, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str40, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        char[] charArray25 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter1.writeStartObject(jsonGenerator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream88, false);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray92 = iOContext90.allocNameCopyBuffer((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.io.SerializedString serializedString77 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray82 = new char[] { 'a', ' ', '#', '4' };
        int int84 = serializedString77.appendUnquoted(charArray82, 0);
        java.lang.String str85 = serializedString77.getValue();
        char[] charArray86 = serializedString77.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseConcatBuffer(charArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str85, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        char[] charArray11 = serializedString1.asQuotedChars();
        java.nio.ByteBuffer byteBuffer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = serializedString1.putQuotedUTF8(byteBuffer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        java.lang.String str32 = serializedString1.toString();
        java.nio.ByteBuffer byteBuffer33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = serializedString1.putUnquotedUTF8(byteBuffer33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str32, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        int int10 = serializedString1.charLength();
        java.nio.ByteBuffer byteBuffer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = serializedString1.putQuotedUTF8(byteBuffer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        char[] charArray13 = serializedString2.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray13, (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter96 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter96.writeRootValueSeparator(jsonGenerator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter96);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int57 = serializedString50.appendQuotedUTF8(byteArray55, 0);
        char[] charArray58 = serializedString50.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString60 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int67 = serializedString60.appendQuotedUTF8(byteArray65, 0);
        int int69 = serializedString50.appendUnquotedUTF8(byteArray65, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter70 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString50);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter71 = defaultPrettyPrinter70._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString73 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int80 = serializedString73.appendQuotedUTF8(byteArray78, 0);
        char[] charArray81 = serializedString73.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString83 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int90 = serializedString83.appendQuotedUTF8(byteArray88, 0);
        int int92 = serializedString73.appendUnquotedUTF8(byteArray88, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter93 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString73);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter94 = defaultPrettyPrinter93._objectIndenter;
        defaultPrettyPrinter70.indentObjectsWith(indenter94);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter96 = defaultPrettyPrinter21.withObjectIndenter(indenter94);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter96.writeObjectFieldValueSeparator(jsonGenerator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(indenter71);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(indenter94);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter96);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        defaultPrettyPrinter22.indentArraysWith(indenter91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter22.beforeArrayValues(jsonGenerator95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter85.beforeArrayValues(jsonGenerator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        byte[] byteArray57 = null;
        iOContext12.releaseBase64Buffer(byteArray57);
        java.lang.Object obj59 = iOContext12.getSourceReference();
        boolean boolean60 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding61 = iOContext12.getEncoding();
        char[] charArray62 = null;
        iOContext12.releaseConcatBuffer(charArray62);
        com.fasterxml.jackson.core.io.SerializedString serializedString65 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray70 = new char[] { 'a', ' ', '#', '4' };
        int int72 = serializedString65.appendUnquoted(charArray70, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString74 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray79 = new char[] { 'a', ' ', '#', '4' };
        int int81 = serializedString74.appendUnquoted(charArray79, 0);
        boolean boolean82 = serializedString65.equals((java.lang.Object) serializedString74);
        char[] charArray83 = serializedString65.asQuotedChars();
        boolean boolean87 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray83, (int) (byte) 10, 10, true);
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseTokenBuffer(charArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jsonEncoding61);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("hi!", (int) 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        byte[] byteArray11 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString13 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = serializedString13.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext17 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext20 = jsonReadContext17.createChildArrayContext((int) (short) 1, 10);
        boolean boolean21 = jsonReadContext20.inArray();
        boolean boolean22 = serializedString13.equals((java.lang.Object) boolean21);
        char[] charArray23 = serializedString13.asQuotedChars();
        int int25 = serializedString1.appendUnquoted(charArray23, 100);
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray23, (int) (short) 1, 35, true);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext17);
        org.junit.Assert.assertNotNull(jsonReadContext20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("", (long) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 52L + "'", long2 == 52L);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        defaultPrettyPrinter44._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter96 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter97 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter22.indentObjectsWith(indenter97);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter99 = defaultPrettyPrinter22.withoutSpacesInObjectEntries();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(indenter96);
        org.junit.Assert.assertNotNull(indenter97);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter99);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator47, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext88 = null;
        java.io.InputStream inputStream89 = null;
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream95 = new com.fasterxml.jackson.core.io.MergedStream(iOContext88, inputStream89, byteArray92, 0, (int) '#');
        int int96 = mergedStream64.read(byteArray92);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator96 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartObject(jsonGenerator96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        char[] charArray25 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter27 = null;
        defaultPrettyPrinter1.indentObjectsWith(indenter27);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("com.fasterxml.jackson.core.JsonParseException: ", 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal1 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal("[Source: #; line: 1, column: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("[Source: hi!; line: 52, column: 1]", 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray42 = new char[] { 'a', ' ', '#', '4' };
        int int44 = serializedString37.appendUnquoted(charArray42, 0);
        java.lang.String str45 = serializedString37.getValue();
        char[] charArray46 = serializedString37.asQuotedChars();
        byte[] byteArray47 = serializedString37.asUnquotedUTF8();
        int int49 = serializedString1.appendQuotedUTF8(byteArray47, (int) (short) 0);
        java.nio.ByteBuffer byteBuffer50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int51 = serializedString1.putUnquotedUTF8(byteBuffer50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str45, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 47 + "'", int49 == 47);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]", 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray41 = new char[] { 'a', ' ', '#', '4' };
        int int43 = serializedString36.appendUnquoted(charArray41, 0);
        java.lang.String str44 = serializedString36.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation46 = null;
        java.lang.Throwable throwable47 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException48 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation46, throwable47);
        boolean boolean49 = serializedString36.equals((java.lang.Object) jsonLocation46);
        byte[] byteArray50 = serializedString36.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int59 = serializedString52.appendQuotedUTF8(byteArray57, 0);
        char[] charArray60 = serializedString52.asQuotedChars();
        int int61 = serializedString52.charLength();
        char[] charArray62 = serializedString52.asQuotedChars();
        int int64 = serializedString36.appendQuoted(charArray62, (int) (short) 1);
        int int66 = serializedString1.appendUnquoted(charArray62, 34);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str44, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 47 + "'", int61 == 47);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int14 = serializedString7.appendQuotedUTF8(byteArray12, 0);
        char[] charArray15 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        int int26 = serializedString7.appendUnquotedUTF8(byteArray22, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString7);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter28 = defaultPrettyPrinter27._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int37 = serializedString30.appendQuotedUTF8(byteArray35, 0);
        char[] charArray38 = serializedString30.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int47 = serializedString40.appendQuotedUTF8(byteArray45, 0);
        int int49 = serializedString30.appendUnquotedUTF8(byteArray45, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString30);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter51 = defaultPrettyPrinter50._objectIndenter;
        defaultPrettyPrinter27.indentObjectsWith(indenter51);
        defaultPrettyPrinter5._objectIndenter = indenter51;
        boolean boolean54 = indenter51.isInline();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(indenter28);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(indenter51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = com.fasterxml.jackson.core.io.NumberInput.parseLong("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"com.fasterxml.jackson.core.JsonParseException: ? at [Source: hi!; line: 52, column: 1]\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("hi!", 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        mergedStream64.mark(1);
        int int90 = mergedStream64.read();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        int int87 = defaultPrettyPrinter55._nesting;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeEndObject(jsonGenerator88, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("[Source: #; line: 1, column: 1]", (long) (byte) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        boolean boolean2 = com.fasterxml.jackson.core.io.NumberInput.inLongRange("[Source: hi!; line: 52, column: 1]", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        char[] charArray11 = serializedString1.asQuotedChars();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = serializedString1.writeUnquotedUTF8(outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter22.writeRootValueSeparator(jsonGenerator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        boolean boolean23 = defaultPrettyPrinter21._spacesInObjectEntries;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString24 = defaultPrettyPrinter21._rootSeparator;
        int int25 = serializableString24.charLength();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(serializableString24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 47 + "'", int25 == 47);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        mergedStream64.mark(1);
        boolean boolean90 = mergedStream64.markSupported();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray87 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger88 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            long long86 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean89 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.SerializableString serializableString89 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = uTF8StreamJsonParser84.nextFieldName(serializableString89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser.Feature feature90 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser92 = uTF8StreamJsonParser84.configure(feature90, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartArray(jsonGenerator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter21._rootSeparator;
        defaultPrettyPrinter21._spacesInObjectEntries = false;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter98 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter99 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
        org.junit.Assert.assertNotNull(indenter98);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter99);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray88 = iOContext12.allocTokenBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            int int89 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int12 = serializedString5.appendQuotedUTF8(byteArray10, 0);
        char[] charArray13 = serializedString5.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        int int24 = serializedString5.appendUnquotedUTF8(byteArray20, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter26 = defaultPrettyPrinter25._objectIndenter;
        defaultPrettyPrinter3._arrayIndenter = indenter26;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter28.writeStartObject(jsonGenerator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(indenter26);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonToken jsonToken87 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonParser.Feature feature88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser89 = uTF8StreamJsonParser84.disable(feature88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken87);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            double double90 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            int int90 = uTF8StreamJsonParser84.nextIntValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.Base64Variant base64Variant89 = null;
        java.io.OutputStream outputStream90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.readBinaryValue(base64Variant89, outputStream90);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("[Source: hi!; line: 52, column: 1]", 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext7 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext10 = jsonReadContext7.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString13 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray18 = new char[] { 'a', ' ', '#', '4' };
        int int20 = serializedString13.appendUnquoted(charArray18, 0);
        java.lang.String str21 = serializedString13.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) serializedString13, false);
        byte[] byteArray24 = null;
        iOContext23.releaseReadIOBuffer(byteArray24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int34 = serializedString27.appendQuotedUTF8(byteArray32, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper37 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext23, byteArray32, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation38 = jsonReadContext10.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int47 = serializedString40.appendQuotedUTF8(byteArray45, 0);
        char[] charArray48 = serializedString40.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int57 = serializedString50.appendQuotedUTF8(byteArray55, 0);
        int int59 = serializedString40.appendUnquotedUTF8(byteArray55, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter60 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString40);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter61 = defaultPrettyPrinter60._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int70 = serializedString63.appendQuotedUTF8(byteArray68, 0);
        char[] charArray71 = serializedString63.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString73 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int80 = serializedString73.appendQuotedUTF8(byteArray78, 0);
        int int82 = serializedString63.appendUnquotedUTF8(byteArray78, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString63);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter84 = defaultPrettyPrinter83._objectIndenter;
        defaultPrettyPrinter60.indentObjectsWith(indenter84);
        defaultPrettyPrinter60.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter88 = defaultPrettyPrinter60.withoutSpacesInObjectEntries();
        boolean boolean89 = jsonLocation38.equals((java.lang.Object) defaultPrettyPrinter60);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter60);
        defaultPrettyPrinter90._nesting = 1;
        defaultPrettyPrinter90._spacesInObjectEntries = false;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter96 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter97 = defaultPrettyPrinter96._arrayIndenter;
        defaultPrettyPrinter90._arrayIndenter = indenter97;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter99 = defaultPrettyPrinter4.withObjectIndenter(indenter97);
        org.junit.Assert.assertNotNull(jsonReadContext7);
        org.junit.Assert.assertNotNull(jsonReadContext10);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str21, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation38);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(indenter61);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(indenter84);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(indenter97);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter99);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray89 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken86 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        java.lang.String str21 = serializedString1.getValue();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str21, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number90 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter85.beforeObjectEntries(jsonGenerator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal45 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray36, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.writeEndObject(jsonGenerator86, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        // The following exception was thrown during execution in test generation
        try {
            double double1 = com.fasterxml.jackson.core.io.NumberInput.parseDouble("?");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"?\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.FormatSchema formatSchema88 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.setSchema(formatSchema88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.Base64Variant base64Variant89 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray90 = uTF8StreamJsonParser84.getBinaryValue(base64Variant89);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        boolean boolean2 = com.fasterxml.jackson.core.io.NumberInput.inLongRange("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        java.io.OutputStream outputStream86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int87 = uTF8StreamJsonParser84.releaseBuffered(outputStream86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("", 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        java.io.InputStream inputStream1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        char[] charArray30 = serializedString22.asQuotedChars();
        boolean boolean31 = serializedString3.equals((java.lang.Object) serializedString22);
        char[] charArray32 = serializedString3.asQuotedChars();
        byte[] byteArray33 = serializedString3.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream36 = new com.fasterxml.jackson.core.io.MergedStream(iOContext0, inputStream1, byteArray33, (int) (byte) 100, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            mergedStream36.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("[Source: #; line: 1, column: 1]", (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.getLastClearedToken();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.nextIntValue(97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(jsonToken89);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType91 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter87 = defaultPrettyPrinter55.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter87.writeArrayValueSeparator(jsonGenerator88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter87);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter21._rootSeparator;
        java.lang.Class<?> wildcardClass96 = serializableString95.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        int int23 = serializedString1.appendQuotedUTF8(byteArray21, (int) (short) 1);
        char[] charArray24 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray24, (int) 'a', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        // The following exception was thrown during execution in test generation
        try {
            float float90 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        defaultPrettyPrinter21.spacesInObjectEntries(true);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter51.writeObjectFieldValueSeparator(jsonGenerator52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            float float89 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int19 = serializedString3.appendUnquotedUTF8(byteArray17, (int) (short) -1);
        char[] charArray26 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean30 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray26, (int) (byte) -1, 0, true);
        int int32 = serializedString3.appendUnquoted(charArray26, 100);
        int int34 = serializedString1.appendUnquoted(charArray26, (int) '#');
        char[] charArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = serializedString1.appendQuoted(charArray35, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            long long90 = uTF8StreamJsonParser84.nextLongValue(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray2 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        java.lang.String str13 = serializedString5.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) serializedString5, false);
        byte[] byteArray16 = null;
        iOContext15.releaseReadIOBuffer(byteArray16);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper29 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray24, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler30 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray37 = new char[] { 'a', ' ', '#', '4' };
        int int39 = serializedString32.appendUnquoted(charArray37, 0);
        java.lang.String str40 = serializedString32.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler30, (java.lang.Object) serializedString32, false);
        byte[] byteArray43 = null;
        iOContext42.releaseReadIOBuffer(byteArray43);
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int53 = serializedString46.appendQuotedUTF8(byteArray51, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext42, byteArray51, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper59 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray51, 47, (int) (byte) 0);
        int int61 = serializedString1.appendQuotedUTF8(byteArray51, (int) '#');
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray68 = new char[] { 'a', ' ', '#', '4' };
        int int70 = serializedString63.appendUnquoted(charArray68, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray77 = new char[] { 'a', ' ', '#', '4' };
        int int79 = serializedString72.appendUnquoted(charArray77, 0);
        boolean boolean80 = serializedString63.equals((java.lang.Object) serializedString72);
        com.fasterxml.jackson.core.io.SerializedString serializedString82 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int89 = serializedString82.appendQuotedUTF8(byteArray87, 0);
        char[] charArray90 = serializedString82.asQuotedChars();
        boolean boolean91 = serializedString63.equals((java.lang.Object) serializedString82);
        char[] charArray92 = serializedString82.asQuotedChars();
        int int94 = serializedString1.appendQuoted(charArray92, 13);
        char[] charArray95 = serializedString1.asQuotedChars();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str13, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str40, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray95), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter50 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.withArrayIndenter(indenter50);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter51.beforeObjectEntries(jsonGenerator52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.io.SerializedString serializedString77 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray82 = new char[] { 'a', ' ', '#', '4' };
        int int84 = serializedString77.appendUnquoted(charArray82, 0);
        java.lang.String str85 = serializedString77.getValue();
        char[] charArray86 = serializedString77.asQuotedChars();
        char[] charArray87 = serializedString77.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseTokenBuffer(charArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str85, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        char[] charArray24 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean28 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray24, (int) (byte) -1, 0, true);
        int int30 = serializedString1.appendUnquoted(charArray24, 100);
        byte[] byteArray31 = serializedString1.asQuotedUTF8();
        byte[] byteArray32 = serializedString1.asQuotedUTF8();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        char[] charArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray0, 10, 47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        // The following exception was thrown during execution in test generation
        try {
            double double1 = com.fasterxml.jackson.core.io.NumberInput.parseDouble("[Source: hi!; line: 52, column: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"[Source: hi!; line: 52, column: 1]\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter21._rootSeparator;
        defaultPrettyPrinter21._spacesInObjectEntries = false;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator98 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeArrayValues(jsonGenerator98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.JsonToken jsonToken87 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.Base64Variant base64Variant88 = null;
        java.io.OutputStream outputStream89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int90 = uTF8StreamJsonParser84.readBinaryValue(base64Variant88, outputStream89);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken87);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator26, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger89 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        java.lang.Class<?> wildcardClass90 = uTF8StreamJsonParser84.getClass();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        char[] charArray27 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean31 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray27, (int) (byte) -1, 0, true);
        int int33 = serializedString3.appendUnquoted(charArray27, (-1));
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        java.io.OutputStream outputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = serializedString3.writeQuotedUTF8(outputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        com.fasterxml.jackson.core.SerializableString serializableString88 = defaultPrettyPrinter85._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter89 = defaultPrettyPrinter85._objectIndenter;
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serializableString88);
        org.junit.Assert.assertNotNull(indenter89);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter50 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.withArrayIndenter(indenter50);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter51.writeEndArray(jsonGenerator52, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.JsonParser.Feature feature87 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser88 = uTF8StreamJsonParser84.enable(feature87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        char[] charArray27 = serializedString19.asQuotedChars();
        int int28 = serializedString19.charLength();
        char[] charArray29 = serializedString19.asQuotedChars();
        int int31 = serializedString1.appendUnquoted(charArray29, (int) (short) 10);
        byte[] byteArray32 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray39 = new char[] { 'a', ' ', '#', '4' };
        int int41 = serializedString34.appendUnquoted(charArray39, 0);
        java.lang.String str42 = serializedString34.getValue();
        char[] charArray43 = serializedString34.asQuotedChars();
        char[] charArray44 = serializedString34.asQuotedChars();
        int int46 = serializedString1.appendQuoted(charArray44, (int) (byte) 1);
        boolean boolean50 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray44, 0, (int) ' ', true);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 47 + "'", int28 == 47);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str42, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        int int33 = serializedString1.appendQuotedUTF8(byteArray31, 34);
        int int34 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int44 = serializedString37.appendQuotedUTF8(byteArray42, 0);
        char[] charArray45 = serializedString37.asQuotedChars();
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int52 = serializedString37.appendUnquotedUTF8(byteArray50, (int) (short) 10);
        int int54 = serializedString1.appendQuotedUTF8(byteArray50, (int) (short) 1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 47 + "'", int34 == 47);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        byte[] byteArray32 = serializedString1.asUnquotedUTF8();
        java.nio.ByteBuffer byteBuffer33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = serializedString1.putUnquotedUTF8(byteBuffer33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter55.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter55.beforeObjectEntries(jsonGenerator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            byte byte90 = uTF8StreamJsonParser84.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter23.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter23.beforeObjectEntries(jsonGenerator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        mergedStream87.mark(13);
        mergedStream87.mark(97);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray19 = serializedString1.asQuotedChars();
        char[] charArray20 = serializedString1.asQuotedChars();
        java.nio.ByteBuffer byteBuffer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = serializedString1.putUnquotedUTF8(byteBuffer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        com.fasterxml.jackson.core.SerializableString serializableString90 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = uTF8StreamJsonParser84.nextFieldName(serializableString90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.getCurrentToken();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        com.fasterxml.jackson.core.Base64Variant base64Variant91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue(base64Variant91);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(jsonToken89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        com.fasterxml.jackson.core.JsonParser.Feature feature90 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser92 = uTF8StreamJsonParser84.configure(feature90, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int19 = serializedString3.appendUnquotedUTF8(byteArray17, (int) (short) -1);
        char[] charArray26 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean30 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray26, (int) (byte) -1, 0, true);
        int int32 = serializedString3.appendUnquoted(charArray26, 100);
        int int34 = serializedString1.appendUnquoted(charArray26, (int) '#');
        boolean boolean38 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray26, (int) (byte) 1, 0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal41 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(charArray26, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal1 = com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = uTF8StreamJsonParser84.nextIntValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        int int23 = serializedString1.appendQuotedUTF8(byteArray21, (int) (short) 1);
        char[] charArray24 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray24, (int) (byte) 100, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray89 = uTF8StreamJsonParser84.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = uTF8StreamJsonParser84.getSchema();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType90 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(formatSchema89);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        boolean boolean93 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.SerializableString serializableString90 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = uTF8StreamJsonParser84.nextFieldName(serializableString90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, true);
        char[] charArray10 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean14 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray10, (int) (byte) -1, 0, true);
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseTokenBuffer(charArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        com.fasterxml.jackson.core.JsonLocation jsonLocation47 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) '#', (long) 47, 1L, (int) (byte) 1, (int) (short) 1);
        long long48 = jsonLocation47.getByteOffset();
        long long49 = jsonLocation47.getCharOffset();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 47L + "'", long48 == 47L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        char[] charArray27 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean31 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray27, (int) (byte) -1, 0, true);
        int int33 = serializedString3.appendUnquoted(charArray27, (-1));
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter34.writeStartObject(jsonGenerator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray9, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.nextIntValue(13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString25 = defaultPrettyPrinter21._rootSeparator;
        java.lang.String str26 = serializableString25.getValue();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(serializableString25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str26, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        int int44 = serializedString20.charLength();
        java.nio.ByteBuffer byteBuffer45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int46 = serializedString20.putQuotedUTF8(byteBuffer45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 47 + "'", int44 == 47);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString9 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int16 = serializedString9.appendQuotedUTF8(byteArray14, 0);
        char[] charArray17 = serializedString9.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        int int28 = serializedString9.appendUnquotedUTF8(byteArray24, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString9);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter30 = defaultPrettyPrinter29._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter29.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString32 = defaultPrettyPrinter29._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter33 = defaultPrettyPrinter29._objectIndenter;
        defaultPrettyPrinter7.indentArraysWith(indenter33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter5.withObjectIndenter(indenter33);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter5.writeEndObject(jsonGenerator36, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(indenter30);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(serializableString32);
        org.junit.Assert.assertNotNull(indenter33);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream88, false);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding91 = iOContext90.getEncoding();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = iOContext90.allocReadIOBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(jsonEncoding91);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger93 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.SerializableString serializableString85 = defaultPrettyPrinter55._rootSeparator;
        byte[] byteArray86 = serializableString85.asQuotedUTF8();
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serializableString85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter23.writeArrayValueSeparator(jsonGenerator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger90 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        boolean boolean2 = com.fasterxml.jackson.core.io.NumberInput.inLongRange("com.fasterxml.jackson.core.JsonParseException: hi!\n at [Source: /; line: 0, column: 0]", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        char[] charArray24 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean28 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray24, (int) (byte) -1, 0, true);
        int int30 = serializedString1.appendUnquoted(charArray24, 100);
        java.nio.ByteBuffer byteBuffer31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int32 = serializedString1.putQuotedUTF8(byteBuffer31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        int int91 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter55.createInstance();
        defaultPrettyPrinter86._spacesInObjectEntries = false;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator89 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter86.writeEndArray(jsonGenerator89, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int16 = serializedString1.appendUnquotedUTF8(byteArray14, (int) (short) 10);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray23 = new char[] { 'a', ' ', '#', '4' };
        int int25 = serializedString18.appendUnquoted(charArray23, 0);
        java.lang.String str26 = serializedString18.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation28 = null;
        java.lang.Throwable throwable29 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException30 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation28, throwable29);
        boolean boolean31 = serializedString18.equals((java.lang.Object) jsonLocation28);
        byte[] byteArray32 = serializedString18.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        char[] charArray42 = serializedString34.asQuotedChars();
        int int43 = serializedString34.charLength();
        char[] charArray44 = serializedString34.asQuotedChars();
        int int46 = serializedString18.appendQuoted(charArray44, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString48 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray53 = new char[] { 'a', ' ', '#', '4' };
        int int55 = serializedString48.appendUnquoted(charArray53, 0);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int64 = serializedString48.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        byte[] byteArray65 = serializedString48.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString67 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int74 = serializedString67.appendQuotedUTF8(byteArray72, 0);
        char[] charArray75 = serializedString67.asQuotedChars();
        int int77 = serializedString48.appendQuoted(charArray75, 63);
        int int79 = serializedString18.appendQuoted(charArray75, (int) (short) 10);
        int int81 = serializedString1.appendUnquoted(charArray75, 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str26, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 47 + "'", int43 == 47);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 47 + "'", int81 == 47);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder92 = uTF8StreamJsonParser84._getByteArrayBuilder();
        com.fasterxml.jackson.core.Base64Variant base64Variant93 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = uTF8StreamJsonParser84.getBinaryValue(base64Variant93);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertNotNull(byteArrayBuilder92);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            byte byte93 = uTF8StreamJsonParser84.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertNotNull(version92);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Base64Variant base64Variant90 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = uTF8StreamJsonParser84.getBinaryValue(base64Variant90);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter27 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter29 = lf2SpacesIndenter27.withLinefeed("[Source: hi!; line: 52, column: 1]");
        defaultPrettyPrinter25.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) lf2SpacesIndenter27);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter27.writeIndentation(jsonGenerator31, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
        org.junit.Assert.assertNotNull(lf2SpacesIndenter29);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getFeatureMask();
        double double87 = uTF8StreamJsonParser84.getValueAsDouble((double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-1.0d) + "'", double87 == (-1.0d));
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int86 = uTF8StreamJsonParser84.getTokenLineNr();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        int int91 = uTF8StreamJsonParser84.getValueAsInt((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.FormatSchema formatSchema90 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.setSchema(formatSchema90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.isClosed();
        java.lang.String str94 = uTF8StreamJsonParser84.getText();
        // The following exception was thrown during execution in test generation
        try {
            float float95 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.ObjectCodec objectCodec90 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number91 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec90);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            long long91 = uTF8StreamJsonParser84.nextLongValue(100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("com.fasterxml.jackson.core.JsonParseException: ", (long) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 32L + "'", long2 == 32L);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int79 = serializedString72.appendQuotedUTF8(byteArray77, 0);
        char[] charArray80 = serializedString72.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString82 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int89 = serializedString82.appendQuotedUTF8(byteArray87, 0);
        int int91 = serializedString72.appendUnquotedUTF8(byteArray87, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter92 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString72);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter93 = defaultPrettyPrinter92._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter92.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter92._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter96 = defaultPrettyPrinter92._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter97 = defaultPrettyPrinter21.withArrayIndenter(indenter96);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator98 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectFieldValueSeparator(jsonGenerator98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(indenter93);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
        org.junit.Assert.assertNotNull(indenter96);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter97);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        com.fasterxml.jackson.core.FormatSchema formatSchema91 = uTF8StreamJsonParser84.getSchema();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(formatSchema91);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        boolean boolean87 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getTypeId();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        com.fasterxml.jackson.core.JsonParser.Feature feature96 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser97 = uTF8StreamJsonParser84.enable(feature96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        int int91 = uTF8StreamJsonParser84.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter25.beforeArrayValues(jsonGenerator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.SerializableString serializableString22 = defaultPrettyPrinter21._rootSeparator;
        defaultPrettyPrinter21.spacesInObjectEntries(true);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartArray(jsonGenerator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(serializableString22);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        java.io.OutputStream outputStream91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int92 = uTF8StreamJsonParser84.releaseBuffered(outputStream91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.Base64Variant base64Variant91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue(base64Variant91);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(jsonToken90);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.String str89 = uTF8StreamJsonParser84.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.nextIntValue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        int int2 = com.fasterxml.jackson.core.io.NumberInput.parseAsInt("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]", 47);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 47 + "'", int2 == 47);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number88 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.Base64Variant base64Variant90 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = uTF8StreamJsonParser84.getBinaryValue(base64Variant90);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        int int3 = jsonReadContext2.getCurrentIndex();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext6 = jsonReadContext2.createChildArrayContext(0, 0);
        java.lang.String str7 = jsonReadContext6.getCurrentName();
        java.lang.String str8 = jsonReadContext6.getCurrentName();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler9 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray16 = new char[] { 'a', ' ', '#', '4' };
        int int18 = serializedString11.appendUnquoted(charArray16, 0);
        java.lang.String str19 = serializedString11.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler9, (java.lang.Object) serializedString11, false);
        byte[] byteArray22 = null;
        iOContext21.releaseReadIOBuffer(byteArray22);
        com.fasterxml.jackson.core.io.SerializedString serializedString25 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int32 = serializedString25.appendQuotedUTF8(byteArray30, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper35 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext21, byteArray30, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler36 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray43 = new char[] { 'a', ' ', '#', '4' };
        int int45 = serializedString38.appendUnquoted(charArray43, 0);
        java.lang.String str46 = serializedString38.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler36, (java.lang.Object) serializedString38, false);
        byte[] byteArray49 = null;
        iOContext48.releaseReadIOBuffer(byteArray49);
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int59 = serializedString52.appendQuotedUTF8(byteArray57, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper62 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext48, byteArray57, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper65 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext21, byteArray57, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext66 = null;
        java.io.InputStream inputStream67 = null;
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream73 = new com.fasterxml.jackson.core.io.MergedStream(iOContext66, inputStream67, byteArray70, 0, (int) '#');
        long long75 = mergedStream73.skip((long) (short) 1);
        int int76 = mergedStream73.available();
        mergedStream73.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray81 = serializedString80.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext21, (java.io.InputStream) mergedStream73, byteArray81, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream86 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer88 = null;
        byte[] byteArray89 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser93 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, (int) (short) 1, inputStream86, objectCodec87, bytesToNameCanonicalizer88, byteArray89, (int) (byte) -1, (int) (short) 10, false);
        com.fasterxml.jackson.core.JsonLocation jsonLocation94 = jsonReadContext6.getStartLocation((java.lang.Object) false);
        boolean boolean95 = jsonReadContext6.inArray();
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(jsonReadContext6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str19, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str46, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 34 + "'", int76 == 34);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec91 = uTF8StreamJsonParser84.getCodec();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertNull(objectCodec91);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        com.fasterxml.jackson.core.SerializableString serializableString88 = defaultPrettyPrinter85._rootSeparator;
        defaultPrettyPrinter85._nesting = 100;
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(serializableString88);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        char[] charArray24 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean28 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray24, (int) (byte) -1, 0, true);
        int int30 = serializedString1.appendUnquoted(charArray24, 100);
        boolean boolean34 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray24, (int) (byte) 0, (int) (byte) 10, true);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int17 = serializedString1.appendUnquotedUTF8(byteArray15, (int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray24 = new char[] { 'a', ' ', '#', '4' };
        int int26 = serializedString19.appendUnquoted(charArray24, 0);
        java.lang.String str27 = serializedString19.getValue();
        char[] charArray28 = serializedString19.asQuotedChars();
        char[] charArray29 = serializedString19.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = serializedString1.appendQuoted(charArray29, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str27, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        boolean boolean90 = uTF8StreamJsonParser84.isExpectedStartArrayToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = uTF8StreamJsonParser84.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        mergedStream64.mark((int) (short) 10);
        mergedStream64.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int76 = serializedString69.appendQuotedUTF8(byteArray74, 0);
        char[] charArray77 = serializedString69.asQuotedChars();
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int84 = serializedString69.appendUnquotedUTF8(byteArray82, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray82, (int) ' ', 34);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray88 = iOContext12.allocBase64Buffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        defaultPrettyPrinter22.indentArraysWith(indenter91);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter95 = defaultPrettyPrinter22.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator96 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter22.writeStartObject(jsonGenerator96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter95);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        // The following exception was thrown during execution in test generation
        try {
            int int87 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        int int23 = serializedString1.appendQuotedUTF8(byteArray21, (int) (short) 1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.io.IOContext iOContext25 = null;
        java.io.InputStream inputStream26 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray33 = new char[] { 'a', ' ', '#', '4' };
        int int35 = serializedString28.appendUnquoted(charArray33, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray42 = new char[] { 'a', ' ', '#', '4' };
        int int44 = serializedString37.appendUnquoted(charArray42, 0);
        boolean boolean45 = serializedString28.equals((java.lang.Object) serializedString37);
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        boolean boolean56 = serializedString28.equals((java.lang.Object) serializedString47);
        char[] charArray57 = serializedString28.asQuotedChars();
        byte[] byteArray58 = serializedString28.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext25, inputStream26, byteArray58, (int) (byte) 100, (int) (short) 100);
        int int63 = serializedString1.appendUnquotedUTF8(byteArray58, (int) (byte) 10);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        int int13 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray10, 10, (int) (short) -1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 72 + "'", int13 == 72);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext2 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = jsonReadContext2.createChildArrayContext((int) (short) 1, 10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray13 = new char[] { 'a', ' ', '#', '4' };
        int int15 = serializedString8.appendUnquoted(charArray13, 0);
        java.lang.String str16 = serializedString8.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) serializedString8, false);
        byte[] byteArray19 = null;
        iOContext18.releaseReadIOBuffer(byteArray19);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext18, byteArray27, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonReadContext5.getStartLocation((java.lang.Object) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        char[] charArray43 = serializedString35.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int52 = serializedString45.appendQuotedUTF8(byteArray50, 0);
        int int54 = serializedString35.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter56 = defaultPrettyPrinter55._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        char[] charArray66 = serializedString58.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int75 = serializedString68.appendQuotedUTF8(byteArray73, 0);
        int int77 = serializedString58.appendUnquotedUTF8(byteArray73, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter79 = defaultPrettyPrinter78._objectIndenter;
        defaultPrettyPrinter55.indentObjectsWith(indenter79);
        defaultPrettyPrinter55.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter55.withoutSpacesInObjectEntries();
        boolean boolean84 = jsonLocation33.equals((java.lang.Object) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter55);
        defaultPrettyPrinter85._nesting = 1;
        defaultPrettyPrinter85._spacesInObjectEntries = false;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter85.writeArrayValueSeparator(jsonGenerator90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReadContext2);
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(indenter56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indenter79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = uTF8StreamJsonParser84.getSchema();
        // The following exception was thrown during execution in test generation
        try {
            byte byte90 = uTF8StreamJsonParser84.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(formatSchema89);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        boolean boolean92 = uTF8StreamJsonParser84.isClosed();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.Version version87 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser90 = uTF8StreamJsonParser84.configure(feature88, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNotNull(version87);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter50);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter51.writeEndArray(jsonGenerator52, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        byte[] byteArray11 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString13 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = serializedString13.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext17 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext20 = jsonReadContext17.createChildArrayContext((int) (short) 1, 10);
        boolean boolean21 = jsonReadContext20.inArray();
        boolean boolean22 = serializedString13.equals((java.lang.Object) boolean21);
        char[] charArray23 = serializedString13.asQuotedChars();
        int int25 = serializedString1.appendUnquoted(charArray23, 100);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray32 = new char[] { 'a', ' ', '#', '4' };
        int int34 = serializedString27.appendUnquoted(charArray32, 0);
        java.lang.String str35 = serializedString27.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext36, inputStream37, byteArray40, 0, (int) '#');
        int int45 = serializedString27.appendUnquotedUTF8(byteArray40, 34);
        int int47 = serializedString1.appendQuotedUTF8(byteArray40, (int) '#');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext17);
        org.junit.Assert.assertNotNull(jsonReadContext20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str35, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.setCurrentLength(63);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal80 = textBuffer76.contentsAsDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        boolean boolean90 = uTF8StreamJsonParser84.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        java.lang.String str16 = serializedString1.getValue();
        char[] charArray17 = serializedString1.asQuotedChars();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str16, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString9 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int16 = serializedString9.appendQuotedUTF8(byteArray14, 0);
        char[] charArray17 = serializedString9.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        int int28 = serializedString9.appendUnquotedUTF8(byteArray24, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString9);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter30 = defaultPrettyPrinter29._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter29.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString32 = defaultPrettyPrinter29._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter33 = defaultPrettyPrinter29._objectIndenter;
        defaultPrettyPrinter7.indentArraysWith(indenter33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter5.withObjectIndenter(indenter33);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter35.writeStartObject(jsonGenerator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(indenter30);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(serializableString32);
        org.junit.Assert.assertNotNull(indenter33);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray12 = new char[] { 'a', ' ', '#', '4' };
        int int14 = serializedString7.appendUnquoted(charArray12, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray21 = new char[] { 'a', ' ', '#', '4' };
        int int23 = serializedString16.appendUnquoted(charArray21, 0);
        boolean boolean24 = serializedString7.equals((java.lang.Object) serializedString16);
        char[] charArray25 = serializedString7.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter26 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString7);
        defaultPrettyPrinter26.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter29 = defaultPrettyPrinter26._objectIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter26.writeStartObject(jsonGenerator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(indenter29);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        char[] charArray27 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean31 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray27, (int) (byte) -1, 0, true);
        int int33 = serializedString3.appendUnquoted(charArray27, (-1));
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter1.writeStartArray(jsonGenerator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getObjectId();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal90 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            float float91 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        java.nio.ByteBuffer byteBuffer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = serializedString20.putQuotedUTF8(byteBuffer43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        // The following exception was thrown during execution in test generation
        try {
            float float85 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            long long94 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        byte[] byteArray32 = serializedString1.asUnquotedUTF8();
        int int33 = serializedString1.charLength();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 47 + "'", int33 == 47);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        byte[] byteArray44 = serializedString20.asUnquotedUTF8();
        byte[] byteArray45 = serializedString20.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        int int57 = serializedString20.appendUnquoted(charArray55, (int) (short) 1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter23.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter24.beforeArrayValues(jsonGenerator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter50 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter21.withArrayIndenter(indenter50);
        com.fasterxml.jackson.core.io.SerializedString serializedString53 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray58 = new char[] { 'a', ' ', '#', '4' };
        int int60 = serializedString53.appendUnquoted(charArray58, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString62 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray67 = new char[] { 'a', ' ', '#', '4' };
        int int69 = serializedString62.appendUnquoted(charArray67, 0);
        boolean boolean70 = serializedString53.equals((java.lang.Object) serializedString62);
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int79 = serializedString72.appendQuotedUTF8(byteArray77, 0);
        char[] charArray80 = serializedString72.asQuotedChars();
        boolean boolean81 = serializedString53.equals((java.lang.Object) serializedString72);
        char[] charArray88 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean92 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray88, (int) (byte) -1, 0, true);
        int int94 = serializedString72.appendQuoted(charArray88, (int) '#');
        char[] charArray95 = serializedString72.asQuotedChars();
        byte[] byteArray96 = serializedString72.asUnquotedUTF8();
        byte[] byteArray97 = serializedString72.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter98 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter21, (com.fasterxml.jackson.core.SerializableString) serializedString72);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray95), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType92 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.String str89 = uTF8StreamJsonParser84.getText();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger90 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21._withSpaces(true);
        defaultPrettyPrinter25.spacesInObjectEntries(true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        byte[] byteArray19 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray26 = new char[] { 'a', ' ', '#', '4' };
        int int28 = serializedString21.appendUnquoted(charArray26, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        boolean boolean38 = serializedString21.equals((java.lang.Object) serializedString30);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int47 = serializedString40.appendQuotedUTF8(byteArray45, 0);
        char[] charArray48 = serializedString40.asQuotedChars();
        boolean boolean49 = serializedString21.equals((java.lang.Object) serializedString40);
        char[] charArray56 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean60 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray56, (int) (byte) -1, 0, true);
        int int62 = serializedString40.appendQuoted(charArray56, (int) '#');
        char[] charArray63 = serializedString40.asQuotedChars();
        byte[] byteArray64 = serializedString40.asUnquotedUTF8();
        byte[] byteArray65 = serializedString40.asUnquotedUTF8();
        int int67 = serializedString1.appendQuotedUTF8(byteArray65, (int) ' ');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.io.SerializedString serializedString26 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int33 = serializedString26.appendQuotedUTF8(byteArray31, 0);
        char[] charArray34 = serializedString26.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int43 = serializedString36.appendQuotedUTF8(byteArray41, 0);
        int int45 = serializedString26.appendUnquotedUTF8(byteArray41, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter46 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString26);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter47 = defaultPrettyPrinter46._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int56 = serializedString49.appendQuotedUTF8(byteArray54, 0);
        char[] charArray57 = serializedString49.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString59 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int66 = serializedString59.appendQuotedUTF8(byteArray64, 0);
        int int68 = serializedString49.appendUnquotedUTF8(byteArray64, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter69 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString49);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter70 = defaultPrettyPrinter69._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int79 = serializedString72.appendQuotedUTF8(byteArray77, 0);
        char[] charArray80 = serializedString72.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString82 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int89 = serializedString82.appendQuotedUTF8(byteArray87, 0);
        int int91 = serializedString72.appendUnquotedUTF8(byteArray87, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter92 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString72);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter93 = defaultPrettyPrinter92._objectIndenter;
        defaultPrettyPrinter69.indentObjectsWith(indenter93);
        defaultPrettyPrinter46._objectIndenter = indenter93;
        boolean boolean96 = indenter93.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter97 = defaultPrettyPrinter21.withArrayIndenter(indenter93);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(indenter47);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(indenter70);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(indenter93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter97);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter50);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter52 = defaultPrettyPrinter50._arrayIndenter;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(indenter52);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        com.fasterxml.jackson.core.SerializableString serializableString89 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = uTF8StreamJsonParser84.nextFieldName(serializableString89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getTypeId();
        com.fasterxml.jackson.core.Base64Variant base64Variant90 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = uTF8StreamJsonParser84.getBinaryValue(base64Variant90);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser.Feature feature90 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.disable(feature90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertNotNull(jsonReadContext89);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter73.beforeObjectEntries(jsonGenerator74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        byte[] byteArray57 = null;
        iOContext12.releaseBase64Buffer(byteArray57);
        java.lang.Object obj59 = iOContext12.getSourceReference();
        boolean boolean60 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding61 = iOContext12.getEncoding();
        java.io.InputStream inputStream62 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString64 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray69 = new char[] { 'a', ' ', '#', '4' };
        int int71 = serializedString64.appendUnquoted(charArray69, 0);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int80 = serializedString64.appendUnquotedUTF8(byteArray78, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader84 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, inputStream62, byteArray78, (int) '#', (int) (short) -1, true);
        boolean boolean85 = uTF32Reader84.ready();
        com.fasterxml.jackson.core.io.SerializedString serializedString87 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int94 = serializedString87.appendQuotedUTF8(byteArray92, 0);
        char[] charArray95 = serializedString87.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int98 = uTF32Reader84.read(charArray95, (-1), 63);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: read(buf,-1,63), cbuf[47]");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jsonEncoding61);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray95), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeArrayValues(jsonGenerator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter1._withSpaces(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString9 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int16 = serializedString9.appendQuotedUTF8(byteArray14, 0);
        char[] charArray17 = serializedString9.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        int int28 = serializedString9.appendUnquotedUTF8(byteArray24, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString9);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter30 = defaultPrettyPrinter29._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter29.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString32 = defaultPrettyPrinter29._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter33 = defaultPrettyPrinter29._objectIndenter;
        defaultPrettyPrinter7.indentArraysWith(indenter33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter5.withObjectIndenter(indenter33);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter35.writeArrayValueSeparator(jsonGenerator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(indenter30);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
        org.junit.Assert.assertNotNull(serializableString32);
        org.junit.Assert.assertNotNull(indenter33);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter50);
        defaultPrettyPrinter51._nesting = (short) -1;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter51.writeEndArray(jsonGenerator54, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int91 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.FormatSchema formatSchema92 = uTF8StreamJsonParser84.getSchema();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNull(formatSchema92);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int79 = serializedString72.appendQuotedUTF8(byteArray77, 0);
        char[] charArray80 = serializedString72.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString82 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int89 = serializedString82.appendQuotedUTF8(byteArray87, 0);
        int int91 = serializedString72.appendUnquotedUTF8(byteArray87, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter92 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString72);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter93 = defaultPrettyPrinter92._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter92.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString95 = defaultPrettyPrinter92._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter96 = defaultPrettyPrinter92._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter97 = defaultPrettyPrinter21.withArrayIndenter(indenter96);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter98 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter97);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(indenter93);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(serializableString95);
        org.junit.Assert.assertNotNull(indenter96);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter97);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeObjectFieldValueSeparator(jsonGenerator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        int int30 = serializedString1.charLength();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 47 + "'", int30 == 47);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        int int82 = textBuffer76.size();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            float float93 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream65, false);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray92 = iOContext90.allocNameCopyBuffer((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        char[] charArray13 = serializedString2.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        char[] charArray23 = serializedString15.asQuotedChars();
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int30 = serializedString15.appendUnquotedUTF8(byteArray28, (int) (short) 10);
        byte[] byteArray31 = serializedString15.asQuotedUTF8();
        int int33 = serializedString2.appendUnquotedUTF8(byteArray31, (int) (byte) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int42 = serializedString35.appendQuotedUTF8(byteArray40, 0);
        byte[] byteArray43 = serializedString35.asUnquotedUTF8();
        int int45 = serializedString2.appendQuotedUTF8(byteArray43, 0);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 47 + "'", int45 == 47);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter23.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter24.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter25.writeEndObject(jsonGenerator26, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        boolean boolean2 = com.fasterxml.jackson.core.io.NumberInput.inLongRange("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.ObjectCodec objectCodec86 = uTF8StreamJsonParser84.getCodec();
        uTF8StreamJsonParser84.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            int int89 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(objectCodec86);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(jsonStreamContext91);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        char[] charArray27 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean31 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray27, (int) (byte) -1, 0, true);
        int int33 = serializedString3.appendUnquoted(charArray27, (-1));
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec88 = uTF8StreamJsonParser84.getCodec();
        java.lang.Object obj89 = uTF8StreamJsonParser84.getTypeId();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = uTF8StreamJsonParser84.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(objectCodec88);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray30 = serializedString1.asQuotedChars();
        byte[] byteArray31 = serializedString1.asUnquotedUTF8();
        java.lang.Class<?> wildcardClass32 = byteArray31.getClass();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) 52L);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 52.0d + "'", double90 == 52.0d);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeEndObject(jsonGenerator47, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray2 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext((-1), 10);
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext8 = jsonReadContext5.createChildArrayContext((int) (short) 1, 10);
        boolean boolean9 = jsonReadContext8.inArray();
        boolean boolean10 = serializedString1.equals((java.lang.Object) boolean9);
        char[] charArray11 = serializedString1.asQuotedChars();
        byte[] byteArray12 = serializedString1.asUnquotedUTF8();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonReadContext5);
        org.junit.Assert.assertNotNull(jsonReadContext8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        java.lang.String str11 = serializedString3.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) serializedString3, false);
        byte[] byteArray14 = null;
        iOContext13.releaseReadIOBuffer(byteArray14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int24 = serializedString17.appendQuotedUTF8(byteArray22, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper27 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray22, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler28 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray35 = new char[] { 'a', ' ', '#', '4' };
        int int37 = serializedString30.appendUnquoted(charArray35, 0);
        java.lang.String str38 = serializedString30.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler28, (java.lang.Object) serializedString30, false);
        byte[] byteArray41 = null;
        iOContext40.releaseReadIOBuffer(byteArray41);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int51 = serializedString44.appendQuotedUTF8(byteArray49, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext40, byteArray49, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper57 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext13, byteArray49, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray62, 0, (int) '#');
        mergedStream65.mark((int) (short) 10);
        mergedStream65.reset();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100 };
        int int85 = serializedString70.appendUnquotedUTF8(byteArray83, (int) (short) 10);
        com.fasterxml.jackson.core.io.MergedStream mergedStream88 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, (java.io.InputStream) mergedStream65, byteArray83, (int) ' ', 34);
        com.fasterxml.jackson.core.io.IOContext iOContext90 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) mergedStream65, false);
        boolean boolean91 = mergedStream65.markSupported();
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str11, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str38, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray8 = new char[] { 'a', ' ', '#', '4' };
        int int10 = serializedString3.appendUnquoted(charArray8, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray17 = new char[] { 'a', ' ', '#', '4' };
        int int19 = serializedString12.appendUnquoted(charArray17, 0);
        boolean boolean20 = serializedString3.equals((java.lang.Object) serializedString12);
        char[] charArray27 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean31 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray27, (int) (byte) -1, 0, true);
        int int33 = serializedString3.appendUnquoted(charArray27, (-1));
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int43 = serializedString36.appendQuotedUTF8(byteArray41, 0);
        char[] charArray44 = serializedString36.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int53 = serializedString46.appendQuotedUTF8(byteArray51, 0);
        int int55 = serializedString36.appendUnquotedUTF8(byteArray51, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter56 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString36);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter57 = defaultPrettyPrinter56._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter58 = defaultPrettyPrinter56.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString59 = defaultPrettyPrinter56._rootSeparator;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter60 = defaultPrettyPrinter56._objectIndenter;
        boolean boolean61 = indenter60.isInline();
        defaultPrettyPrinter1.indentArraysWith(indenter60);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter63 = defaultPrettyPrinter1.createInstance();
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(indenter57);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter58);
        org.junit.Assert.assertNotNull(serializableString59);
        org.junit.Assert.assertNotNull(indenter60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter63);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        boolean boolean92 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        uTF8StreamJsonParser84.clearCurrentToken();
        long long95 = uTF8StreamJsonParser84.getValueAsLong((long) 13);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 13L + "'", long95 == 13L);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler15 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext27 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler15, (java.lang.Object) serializedString17, false);
        byte[] byteArray28 = null;
        iOContext27.releaseReadIOBuffer(byteArray28);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int38 = serializedString31.appendQuotedUTF8(byteArray36, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper41 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext27, byteArray36, 1, (int) (short) 1);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding42 = byteSourceJsonBootstrapper41.detectEncoding();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding43 = byteSourceJsonBootstrapper41.detectEncoding();
        iOContext12.setEncoding(jsonEncoding43);
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext45, inputStream46, byteArray49, 0, (int) '#');
        long long54 = mergedStream52.skip((long) (short) 1);
        int int55 = mergedStream52.available();
        int int56 = mergedStream52.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int65 = serializedString58.appendQuotedUTF8(byteArray63, 0);
        byte[] byteArray66 = serializedString58.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader70 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream52, byteArray66, (-1), (int) (byte) 0, false);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding71 = iOContext12.getEncoding();
        java.lang.Object obj72 = iOContext12.getSourceReference();
        com.fasterxml.jackson.core.io.SerializedString serializedString74 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int81 = serializedString74.appendQuotedUTF8(byteArray79, 0);
        char[] charArray82 = serializedString74.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString84 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int91 = serializedString84.appendQuotedUTF8(byteArray89, 0);
        int int93 = serializedString74.appendUnquotedUTF8(byteArray89, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseReadIOBuffer(byteArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + jsonEncoding42 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding42.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertTrue("'" + jsonEncoding43 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding43.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 34 + "'", int55 == 34);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + jsonEncoding71 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding71.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.getLastClearedToken();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(jsonToken89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        char[] charArray93 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext94 = uTF8StreamJsonParser84.getParsingContext();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(charArray93);
        org.junit.Assert.assertNotNull(jsonStreamContext94);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeArrayValueSeparator(jsonGenerator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        com.fasterxml.jackson.core.JsonParser.Feature feature91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser93 = uTF8StreamJsonParser84.configure(feature91, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext89 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType90 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonReadContext89);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString24 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartObject(jsonGenerator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(serializableString24);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = defaultPrettyPrinter2.withArrayIndenter(indenter3);
        com.fasterxml.jackson.core.io.SerializedString serializedString6 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray11 = new char[] { 'a', ' ', '#', '4' };
        int int13 = serializedString6.appendUnquoted(charArray11, 0);
        java.lang.String str14 = serializedString6.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation16 = null;
        java.lang.Throwable throwable17 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException18 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation16, throwable17);
        boolean boolean19 = serializedString6.equals((java.lang.Object) jsonLocation16);
        byte[] byteArray20 = serializedString6.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int29 = serializedString22.appendQuotedUTF8(byteArray27, 0);
        char[] charArray30 = serializedString22.asQuotedChars();
        int int31 = serializedString22.charLength();
        char[] charArray32 = serializedString22.asQuotedChars();
        int int34 = serializedString6.appendQuoted(charArray32, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray41 = new char[] { 'a', ' ', '#', '4' };
        int int43 = serializedString36.appendUnquoted(charArray41, 0);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 };
        int int52 = serializedString36.appendUnquotedUTF8(byteArray50, (int) (short) -1);
        byte[] byteArray53 = serializedString36.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int62 = serializedString55.appendQuotedUTF8(byteArray60, 0);
        char[] charArray63 = serializedString55.asQuotedChars();
        int int65 = serializedString36.appendQuoted(charArray63, 63);
        int int67 = serializedString6.appendQuoted(charArray63, (int) (short) 10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter68 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter4, (com.fasterxml.jackson.core.SerializableString) serializedString6);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter4);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str14, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 47 + "'", int31 == 47);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger91 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean86 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        boolean boolean89 = uTF8StreamJsonParser84.hasTextCharacters();
        boolean boolean90 = uTF8StreamJsonParser84.isClosed();
        int int92 = uTF8StreamJsonParser84.getValueAsInt(47);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = uTF8StreamJsonParser84.nextLongValue((long) 72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 47 + "'", int92 == 47);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken88 = uTF8StreamJsonParser84.getCurrentToken();
        uTF8StreamJsonParser84.clearCurrentToken();
        int int90 = uTF8StreamJsonParser84.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            long long91 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(jsonToken88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        java.lang.String str89 = uTF8StreamJsonParser84.getValueAsString("[Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType90 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Source: hi!; line: 52, column: 1]" + "'", str89, "[Source: hi!; line: 52, column: 1]");
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        int int93 = uTF8StreamJsonParser84.getValueAsInt();
        long long95 = uTF8StreamJsonParser84.getValueAsLong((long) 47);
        // The following exception was thrown during execution in test generation
        try {
            float float96 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 47L + "'", long95 == 47L);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        char[] charArray10 = serializedString1.asQuotedChars();
        char[] charArray11 = serializedString1.asQuotedChars();
        java.nio.ByteBuffer byteBuffer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = serializedString1.putUnquotedUTF8(byteBuffer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        com.fasterxml.jackson.core.ObjectCodec objectCodec96 = uTF8StreamJsonParser84.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            double double97 = uTF8StreamJsonParser84.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNull(objectCodec96);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        int int89 = uTF8StreamJsonParser84.getValueAsInt();
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        com.fasterxml.jackson.core.JsonToken jsonToken91 = uTF8StreamJsonParser84.getCurrentToken();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(jsonToken90);
        org.junit.Assert.assertNull(jsonToken91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.contentsAsArray();
        textBuffer76.resetWithEmpty();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a]");
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getInputSource();
        com.fasterxml.jackson.core.Base64Variant base64Variant91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue(base64Variant91);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean95 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            float float96 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = uTF8StreamJsonParser84.getCodec();
        java.lang.String str88 = uTF8StreamJsonParser84.getValueAsString();
        boolean boolean89 = uTF8StreamJsonParser84.isClosed();
        boolean boolean90 = uTF8StreamJsonParser84.getValueAsBoolean();
        com.fasterxml.jackson.core.Base64Variant base64Variant91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = uTF8StreamJsonParser84.getBinaryValue(base64Variant91);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertNull(objectCodec87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean94 = uTF8StreamJsonParser84.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        // The following exception was thrown during execution in test generation
        try {
            float float87 = uTF8StreamJsonParser84.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        int int92 = uTF8StreamJsonParser84.getFeatureMask();
        java.lang.String str94 = uTF8StreamJsonParser84.getValueAsString("a");
        boolean boolean95 = uTF8StreamJsonParser84.canReadTypeId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "a" + "'", str94, "a");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        boolean boolean78 = textBuffer76.hasTextAsCharacters();
        java.lang.String str79 = textBuffer76.contentsAsString();
        char[] charArray80 = textBuffer76.contentsAsArray();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[]");
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        char[] charArray5 = new char[] { '4', 'a', '4', '#', ' ' };
        int int8 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray5, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = com.fasterxml.jackson.core.io.NumberInput.parseLong(charArray5, 34, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4a4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4a4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString2 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, serializableString2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int12 = serializedString5.appendQuotedUTF8(byteArray10, 0);
        char[] charArray13 = serializedString5.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int22 = serializedString15.appendQuotedUTF8(byteArray20, 0);
        int int24 = serializedString5.appendUnquotedUTF8(byteArray20, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter26 = defaultPrettyPrinter25._objectIndenter;
        defaultPrettyPrinter3._arrayIndenter = indenter26;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter28.beforeArrayValues(jsonGenerator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(indenter26);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("", (long) (short) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        java.lang.String str83 = textBuffer76.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double84 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"a\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "a" + "'", str83, "a");
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType89 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        com.fasterxml.jackson.core.Version version92 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.FormatSchema formatSchema93 = null;
        boolean boolean94 = uTF8StreamJsonParser84.canUseSchema(formatSchema93);
        com.fasterxml.jackson.core.JsonParser jsonParser95 = uTF8StreamJsonParser84.skipChildren();
        double double97 = uTF8StreamJsonParser84.getValueAsDouble((double) 73844676736L);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jsonParser95);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 7.3844676736E10d + "'", double97 == 7.3844676736E10d);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int89 = uTF8StreamJsonParser84.getTokenColumnNr();
        java.lang.Object obj90 = uTF8StreamJsonParser84.getTypeId();
        java.lang.Object obj91 = uTF8StreamJsonParser84.getInputSource();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        com.fasterxml.jackson.core.ObjectCodec objectCodec91 = null;
        uTF8StreamJsonParser84.setCodec(objectCodec91);
        com.fasterxml.jackson.core.Version version93 = uTF8StreamJsonParser84.version();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNotNull(version93);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.Version version90 = uTF8StreamJsonParser84.version();
        boolean boolean91 = uTF8StreamJsonParser84.hasCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            int int92 = uTF8StreamJsonParser84.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(97);
        com.fasterxml.jackson.core.JsonToken jsonToken92 = uTF8StreamJsonParser84.getCurrentToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertNull(jsonToken92);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        char[] charArray36 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean40 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray36, (int) (byte) -1, 0, true);
        int int42 = serializedString20.appendQuoted(charArray36, (int) '#');
        char[] charArray43 = serializedString20.asQuotedChars();
        byte[] byteArray44 = serializedString20.asUnquotedUTF8();
        byte[] byteArray45 = serializedString20.asUnquotedUTF8();
        byte[] byteArray46 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int48 = serializedString20.appendQuotedUTF8(byteArray46, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext89 = uTF8StreamJsonParser84.getParsingContext();
        com.fasterxml.jackson.core.JsonParser jsonParser91 = uTF8StreamJsonParser84.setFeatureMask(10);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder92 = uTF8StreamJsonParser84._getByteArrayBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken93 = uTF8StreamJsonParser84.nextToken();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonStreamContext89);
        org.junit.Assert.assertNotNull(jsonParser91);
        org.junit.Assert.assertNotNull(byteArrayBuilder92);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int93 = uTF8StreamJsonParser84.getValueAsInt((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger94 = uTF8StreamJsonParser84.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        char[] charArray76 = null;
        int int79 = uTF32Reader75.read(charArray76, (-1), (int) (byte) 0);
        boolean boolean80 = uTF32Reader75.ready();
        boolean boolean81 = uTF32Reader75.markSupported();
        com.fasterxml.jackson.core.io.SerializedString serializedString83 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray84 = serializedString83.asUnquotedUTF8();
        java.lang.String str85 = serializedString83.toString();
        char[] charArray86 = serializedString83.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            int int89 = uTF32Reader75.read(charArray86, 100, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: read(buf,100,97), cbuf[47]");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str85, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter23 = null;
        defaultPrettyPrinter22._arrayIndenter = indenter23;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter22.createInstance();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        int int93 = uTF8StreamJsonParser84.getValueAsInt();
        long long95 = uTF8StreamJsonParser84.getValueAsLong((long) 47);
        com.fasterxml.jackson.core.FormatSchema formatSchema96 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser84.setSchema(formatSchema96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 47L + "'", long95 == 47L);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.FormatSchema formatSchema88 = null;
        boolean boolean89 = uTF8StreamJsonParser84.canUseSchema(formatSchema88);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        java.lang.String str89 = uTF8StreamJsonParser84.getText();
        boolean boolean90 = uTF8StreamJsonParser84.canReadObjectId();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation11 = null;
        java.lang.Throwable throwable12 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation11, throwable12);
        boolean boolean14 = serializedString1.equals((java.lang.Object) jsonLocation11);
        byte[] byteArray15 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray22 = new char[] { 'a', ' ', '#', '4' };
        int int24 = serializedString17.appendUnquoted(charArray22, 0);
        java.lang.String str25 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation27 = null;
        java.lang.Throwable throwable28 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException29 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation27, throwable28);
        boolean boolean30 = serializedString17.equals((java.lang.Object) jsonLocation27);
        byte[] byteArray31 = serializedString17.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int40 = serializedString33.appendQuotedUTF8(byteArray38, 0);
        char[] charArray41 = serializedString33.asQuotedChars();
        int int42 = serializedString33.charLength();
        char[] charArray43 = serializedString33.asQuotedChars();
        int int45 = serializedString17.appendQuoted(charArray43, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray52 = new char[] { 'a', ' ', '#', '4' };
        int int54 = serializedString47.appendUnquoted(charArray52, 0);
        java.lang.String str55 = serializedString47.getValue();
        com.fasterxml.jackson.core.JsonLocation jsonLocation57 = null;
        java.lang.Throwable throwable58 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException59 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation57, throwable58);
        boolean boolean60 = serializedString47.equals((java.lang.Object) jsonLocation57);
        byte[] byteArray61 = serializedString47.asUnquotedUTF8();
        int int63 = serializedString17.appendUnquotedUTF8(byteArray61, (int) '#');
        int int65 = serializedString1.appendQuotedUTF8(byteArray61, (int) (short) 1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str25, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 47 + "'", int42 == 47);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str55, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        char[] charArray92 = uTF8StreamJsonParser84.getTextCharacters();
        int int93 = uTF8StreamJsonParser84.getTokenColumnNr();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken94 = uTF8StreamJsonParser84.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(charArray92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        double double2 = com.fasterxml.jackson.core.io.NumberInput.parseAsDouble("com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]\n at [Source: hi!; line: 52, column: 1]", (double) 10);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            long long90 = uTF8StreamJsonParser84.nextLongValue((long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        boolean boolean2 = com.fasterxml.jackson.core.io.NumberInput.inLongRange("com.fasterxml.jackson.core.JsonParseException: ", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        boolean boolean93 = uTF8StreamJsonParser84.canReadObjectId();
        com.fasterxml.jackson.core.io.SerializedString serializedString95 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        java.lang.String str96 = serializedString95.getValue();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = uTF8StreamJsonParser84.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str96, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 47L);
        boolean boolean92 = uTF8StreamJsonParser84.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal93 = uTF8StreamJsonParser84.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 47.0d + "'", double91 == 47.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter50.createInstance();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        double double88 = uTF8StreamJsonParser84.getValueAsDouble((double) 63);
        char[] charArray89 = uTF8StreamJsonParser84.getTextCharacters();
        com.fasterxml.jackson.core.JsonLocation jsonLocation90 = uTF8StreamJsonParser84.getCurrentLocation();
        com.fasterxml.jackson.core.JsonLocation jsonLocation91 = uTF8StreamJsonParser84.getCurrentLocation();
        int int92 = uTF8StreamJsonParser84.getTokenColumnNr();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 63.0d + "'", double88 == 63.0d);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNotNull(jsonLocation90);
        org.junit.Assert.assertNotNull(jsonLocation91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        int int30 = serializedString1.charLength();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: ");
        com.fasterxml.jackson.core.SerializableString serializableString33 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, serializableString33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray38 = serializedString37.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter32, (com.fasterxml.jackson.core.SerializableString) serializedString37);
        boolean boolean40 = serializedString1.equals((java.lang.Object) serializedString37);
        java.lang.String str41 = serializedString37.getValue();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 47 + "'", int30 == 47);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str41, "com.fasterxml.jackson.core.JsonParseException: ");
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        long long2 = com.fasterxml.jackson.core.io.NumberInput.parseAsLong("com.fasterxml.jackson.core.JsonParseException: ", (long) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 52L + "'", long2 == 52L);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter73 = defaultPrettyPrinter21._arrayIndenter;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(indenter73);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        boolean boolean95 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType96 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        char[] charArray88 = uTF8StreamJsonParser84.getTextCharacters();
        boolean boolean89 = uTF8StreamJsonParser84.canReadObjectId();
        java.lang.String str91 = uTF8StreamJsonParser84.getValueAsString("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        int int92 = uTF8StreamJsonParser84.getTextLength();
        java.lang.String str94 = uTF8StreamJsonParser84.getValueAsString("");
        // The following exception was thrown during execution in test generation
        try {
            int int96 = uTF8StreamJsonParser84.nextIntValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(charArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]" + "'", str91, "com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        boolean boolean76 = iOContext12.isResourceManaged();
        com.fasterxml.jackson.core.io.SerializedString serializedString78 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray83 = new char[] { 'a', ' ', '#', '4' };
        int int85 = serializedString78.appendUnquoted(charArray83, 0);
        java.lang.String str86 = serializedString78.getValue();
        char[] charArray87 = serializedString78.asQuotedChars();
        byte[] byteArray88 = serializedString78.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            iOContext12.releaseReadIOBuffer(byteArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str86, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = com.fasterxml.jackson.core.io.NumberInput.parseInt("com.fasterxml.jackson.core.JsonParseException: \n at [Source: hi!; line: 52, column: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"com.fasterxml.jackson.core.JsonParseException: ? at [Source: hi!; line: 52, column: 1]\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation93 = uTF8StreamJsonParser84.getTokenLocation();
        int int94 = uTF8StreamJsonParser84.getTokenLineNr();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(jsonLocation93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray85 = iOContext12.allocBase64Buffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext89 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = uTF8StreamJsonParser84.nextIntValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertNotNull(jsonReadContext89);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        defaultPrettyPrinter21.indentObjectsWith(indenter45);
        boolean boolean47 = indenter45.isInline();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray2 = serializedString1.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray10 = new char[] { 'a', ' ', '#', '4' };
        int int12 = serializedString5.appendUnquoted(charArray10, 0);
        java.lang.String str13 = serializedString5.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) serializedString5, false);
        byte[] byteArray16 = null;
        iOContext15.releaseReadIOBuffer(byteArray16);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int26 = serializedString19.appendQuotedUTF8(byteArray24, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper29 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray24, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler30 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray37 = new char[] { 'a', ' ', '#', '4' };
        int int39 = serializedString32.appendUnquoted(charArray37, 0);
        java.lang.String str40 = serializedString32.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler30, (java.lang.Object) serializedString32, false);
        byte[] byteArray43 = null;
        iOContext42.releaseReadIOBuffer(byteArray43);
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int53 = serializedString46.appendQuotedUTF8(byteArray51, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext42, byteArray51, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper59 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray51, 47, (int) (byte) 0);
        int int61 = serializedString1.appendQuotedUTF8(byteArray51, (int) '#');
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray68 = new char[] { 'a', ' ', '#', '4' };
        int int70 = serializedString63.appendUnquoted(charArray68, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray77 = new char[] { 'a', ' ', '#', '4' };
        int int79 = serializedString72.appendUnquoted(charArray77, 0);
        boolean boolean80 = serializedString63.equals((java.lang.Object) serializedString72);
        com.fasterxml.jackson.core.io.SerializedString serializedString82 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int89 = serializedString82.appendQuotedUTF8(byteArray87, 0);
        char[] charArray90 = serializedString82.asQuotedChars();
        boolean boolean91 = serializedString63.equals((java.lang.Object) serializedString82);
        char[] charArray92 = serializedString82.asQuotedChars();
        int int94 = serializedString1.appendQuoted(charArray92, 13);
        boolean boolean98 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray92, (int) (short) 1, (int) '#', true);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str13, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str40, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        char[] charArray80 = textBuffer76.getCurrentSegment();
        char[] charArray81 = textBuffer76.emptyAndGetCurrentSegment();
        com.fasterxml.jackson.core.io.SerializedString serializedString83 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray88 = new char[] { 'a', ' ', '#', '4' };
        int int90 = serializedString83.appendUnquoted(charArray88, 0);
        java.lang.String str91 = serializedString83.getValue();
        char[] charArray92 = serializedString83.asQuotedChars();
        char[] charArray93 = serializedString83.asQuotedChars();
        textBuffer76.resetWithShared(charArray93, (int) ' ', (int) (short) 10);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str91, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int27 = serializedString20.appendQuotedUTF8(byteArray25, 0);
        char[] charArray28 = serializedString20.asQuotedChars();
        boolean boolean29 = serializedString1.equals((java.lang.Object) serializedString20);
        java.nio.ByteBuffer byteBuffer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = serializedString20.putUnquotedUTF8(byteBuffer30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = textBuffer76.contentsAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"a\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        double double94 = uTF8StreamJsonParser84.getValueAsDouble();
        int int95 = uTF8StreamJsonParser84.getTextLength();
        com.fasterxml.jackson.core.JsonToken jsonToken96 = uTF8StreamJsonParser84.getLastClearedToken();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNull(jsonToken96);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        defaultPrettyPrinter44.indentObjectsWith(indenter68);
        defaultPrettyPrinter21._objectIndenter = indenter68;
        defaultPrettyPrinter21._nesting = (short) 100;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter73 = defaultPrettyPrinter21._objectIndenter;
        boolean boolean74 = indenter73.isInline();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(indenter73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        defaultPrettyPrinter22.indentArraysWith(indenter91);
        com.fasterxml.jackson.core.JsonLocation jsonLocation99 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) defaultPrettyPrinter22, (long) (-1), (long) (byte) 100, (int) 'a', (int) (short) 1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getValueAsInt();
        int int87 = uTF8StreamJsonParser84.getValueAsInt((int) 'a');
        boolean boolean89 = uTF8StreamJsonParser84.getValueAsBoolean(true);
        com.fasterxml.jackson.core.JsonToken jsonToken90 = uTF8StreamJsonParser84.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType91 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(jsonToken90);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        java.lang.Object obj88 = uTF8StreamJsonParser84.getEmbeddedObject();
        com.fasterxml.jackson.core.FormatSchema formatSchema89 = uTF8StreamJsonParser84.getSchema();
        // The following exception was thrown during execution in test generation
        try {
            long long90 = uTF8StreamJsonParser84.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(formatSchema89);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = serializedString20.asUnquotedUTF8();
        int int23 = serializedString1.appendQuotedUTF8(byteArray21, (int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString25 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray30 = new char[] { 'a', ' ', '#', '4' };
        int int32 = serializedString25.appendUnquoted(charArray30, 0);
        int int34 = serializedString1.appendUnquoted(charArray30, (int) 'a');
        char[] charArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = serializedString1.appendQuoted(charArray35, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray86 = iOContext12.allocNameCopyBuffer((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        java.lang.Object obj91 = uTF8StreamJsonParser84.getEmbeddedObject();
        int int92 = uTF8StreamJsonParser84.getTextLength();
        long long93 = uTF8StreamJsonParser84.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version94 = uTF8StreamJsonParser84.version();
        java.lang.String str95 = uTF8StreamJsonParser84.getText();
        uTF8StreamJsonParser84.clearCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            int int98 = uTF8StreamJsonParser84.nextIntValue((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        java.lang.String str9 = serializedString1.getValue();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        java.lang.String str12 = serializedString11.getValue();
        byte[] byteArray13 = serializedString11.asUnquotedUTF8();
        char[] charArray14 = serializedString11.asQuotedChars();
        int int16 = serializedString1.appendQuoted(charArray14, (int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str9, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str12, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 47 + "'", int16 == 47);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        int int88 = uTF8StreamJsonParser84.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken89 = uTF8StreamJsonParser84.getLastClearedToken();
        java.lang.String str90 = uTF8StreamJsonParser84.getValueAsString();
        com.fasterxml.jackson.core.JsonParser.Feature feature91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser92 = uTF8StreamJsonParser84.enable(feature91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(jsonToken89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        int int78 = textBuffer76.getTextOffset();
        boolean boolean79 = textBuffer76.hasTextAsCharacters();
        com.fasterxml.jackson.core.io.SerializedString serializedString81 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int88 = serializedString81.appendQuotedUTF8(byteArray86, 0);
        char[] charArray89 = serializedString81.asQuotedChars();
        boolean boolean93 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray89, (int) (byte) 100, (int) (short) 10, false);
        textBuffer76.resetWithShared(charArray89, 10, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal97 = textBuffer76.contentsAsDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.SerializableString serializableString25 = defaultPrettyPrinter21._rootSeparator;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter21.writeStartArray(jsonGenerator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(serializableString25);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter22 = defaultPrettyPrinter21._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int31 = serializedString24.appendQuotedUTF8(byteArray29, 0);
        char[] charArray32 = serializedString24.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int41 = serializedString34.appendQuotedUTF8(byteArray39, 0);
        int int43 = serializedString24.appendUnquotedUTF8(byteArray39, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString24);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter45 = defaultPrettyPrinter44._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int54 = serializedString47.appendQuotedUTF8(byteArray52, 0);
        char[] charArray55 = serializedString47.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int64 = serializedString57.appendQuotedUTF8(byteArray62, 0);
        int int66 = serializedString47.appendUnquotedUTF8(byteArray62, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter68 = defaultPrettyPrinter67._objectIndenter;
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int77 = serializedString70.appendQuotedUTF8(byteArray75, 0);
        char[] charArray78 = serializedString70.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int87 = serializedString80.appendQuotedUTF8(byteArray85, 0);
        int int89 = serializedString70.appendUnquotedUTF8(byteArray85, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter91 = defaultPrettyPrinter90._objectIndenter;
        defaultPrettyPrinter67.indentObjectsWith(indenter91);
        defaultPrettyPrinter44._objectIndenter = indenter91;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter21.withArrayIndenter(indenter91);
        defaultPrettyPrinter94._nesting = 34;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter97 = defaultPrettyPrinter94.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter indenter98 = defaultPrettyPrinter94._objectIndenter;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(indenter22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(indenter45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(indenter68);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(indenter91);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter97);
        org.junit.Assert.assertNotNull(indenter98);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.contentsAsArray();
        textBuffer76.append('a');
        java.lang.String str80 = textBuffer76.toString();
        boolean boolean81 = textBuffer76.hasTextAsCharacters();
        char[] charArray82 = textBuffer76.finishCurrentSegment();
        int int85 = com.fasterxml.jackson.core.io.NumberInput.parseInt(charArray82, 97, (int) (byte) -1);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "a" + "'", str80, "a");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-48) + "'", int85 == (-48));
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int8 = serializedString1.appendQuotedUTF8(byteArray6, 0);
        char[] charArray9 = serializedString1.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int18 = serializedString11.appendQuotedUTF8(byteArray16, 0);
        int int20 = serializedString1.appendUnquotedUTF8(byteArray16, (int) (short) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter21.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = defaultPrettyPrinter21.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = defaultPrettyPrinter21.createInstance();
        defaultPrettyPrinter21.spacesInObjectEntries(true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[c, o, m, ., f, a, s, t, e, r, x, m, l, ., j, a, c, k, s, o, n, ., c, o, r, e, ., J, s, o, n, P, a, r, s, e, E, x, c, e, p, t, i, o, n, :,  ]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter25);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        double double90 = uTF8StreamJsonParser84.getValueAsDouble((double) (short) -1);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext91 = uTF8StreamJsonParser84.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = uTF8StreamJsonParser84.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(jsonStreamContext91);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        int int68 = mergedStream64.read();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray71 = serializedString70.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext12, (java.io.InputStream) mergedStream64, byteArray71, 0, (int) ' ', false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer76 = iOContext12.constructTextBuffer();
        char[] charArray77 = textBuffer76.getTextBuffer();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray78 = textBuffer76.expandCurrentSegment();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(textBuffer76);
        org.junit.Assert.assertNull(charArray77);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray6 = new char[] { 'a', ' ', '#', '4' };
        int int8 = serializedString1.appendUnquoted(charArray6, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray15 = new char[] { 'a', ' ', '#', '4' };
        int int17 = serializedString10.appendUnquoted(charArray15, 0);
        boolean boolean18 = serializedString1.equals((java.lang.Object) serializedString10);
        char[] charArray25 = new char[] { '#', '#', 'a', 'a', ' ', '#' };
        boolean boolean29 = com.fasterxml.jackson.core.io.NumberInput.inLongRange(charArray25, (int) (byte) -1, 0, true);
        int int31 = serializedString1.appendUnquoted(charArray25, (-1));
        int int32 = serializedString1.charLength();
        java.io.OutputStream outputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = serializedString1.writeQuotedUTF8(outputStream33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 47 + "'", int32 == 47);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        uTF8StreamJsonParser84.overrideCurrentName("[Source: hi!; line: 52, column: 1]");
        uTF8StreamJsonParser84.clearCurrentToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation88 = uTF8StreamJsonParser84.getTokenLocation();
        int int89 = uTF8StreamJsonParser84.getTextOffset();
        double double91 = uTF8StreamJsonParser84.getValueAsDouble((double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType92 = uTF8StreamJsonParser84.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: ; line: 1, column: 0]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertNotNull(jsonLocation88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature86 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser87 = uTF8StreamJsonParser84.enable(feature86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray7 = new char[] { 'a', ' ', '#', '4' };
        int int9 = serializedString2.appendUnquoted(charArray7, 0);
        java.lang.String str10 = serializedString2.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) serializedString2, false);
        byte[] byteArray13 = null;
        iOContext12.releaseReadIOBuffer(byteArray13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int23 = serializedString16.appendQuotedUTF8(byteArray21, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray21, 1, (int) (short) 1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler27 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        char[] charArray34 = new char[] { 'a', ' ', '#', '4' };
        int int36 = serializedString29.appendUnquoted(charArray34, 0);
        java.lang.String str37 = serializedString29.getValue();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler27, (java.lang.Object) serializedString29, false);
        byte[] byteArray40 = null;
        iOContext39.releaseReadIOBuffer(byteArray40);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 10 };
        int int50 = serializedString43.appendQuotedUTF8(byteArray48, 0);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper53 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext39, byteArray48, 1, (int) (short) 1);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper56 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext12, byteArray48, 47, (int) (byte) 0);
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 0 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray61, 0, (int) '#');
        long long66 = mergedStream64.skip((long) (short) 1);
        int int67 = mergedStream64.available();
        mergedStream64.mark((int) (short) 1);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("com.fasterxml.jackson.core.JsonParseException: ");
        byte[] byteArray72 = serializedString71.asUnquotedUTF8();
        com.fasterxml.jackson.core.io.MergedStream mergedStream75 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, (java.io.InputStream) mergedStream64, byteArray72, (int) (short) 100, (int) (short) -1);
        java.io.InputStream inputStream77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer79 = null;
        byte[] byteArray80 = null;
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser84 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext12, (int) (short) 1, inputStream77, objectCodec78, bytesToNameCanonicalizer79, byteArray80, (int) (byte) -1, (int) (short) 10, false);
        int int85 = uTF8StreamJsonParser84.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation86 = uTF8StreamJsonParser84.getCurrentLocation();
        int int87 = uTF8StreamJsonParser84.getTextOffset();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str10, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: " + "'", str37, "com.fasterxml.jackson.core.JsonParseException: ");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 100, 100, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 34 + "'", int67 == 34);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 99, 111, 114, 101, 46, 74, 115, 111, 110, 80, 97, 114, 115, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonLocation86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }
}
